
PROYECTO_MATOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009238  08009238  00019238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009698  08009698  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009698  08009698  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080096a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001d4  08009874  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009874  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c392  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eef  00000000  00000000  0002c5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a3  00000000  00000000  0002eec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c605  00000000  00000000  0002f66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5e3  00000000  00000000  0004bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a45e4  00000000  00000000  00059253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d00  00000000  00000000  000fd838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00101538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009220 	.word	0x08009220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009220 	.word	0x08009220

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <medicion>:
int count =0;
float Volt =0.00;

//MEDICION DE VOLTAJES LDR O DIVISORES

void medicion(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	Volt =(medida/4096.0)*voltaje;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <medicion+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc01 	bl	8000504 <__aeabi_ui2d>
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <medicion+0x44>)
 8000d08:	f7ff fda0 	bl	800084c <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <medicion+0x48>)
 8000d1a:	f7ff fc6d 	bl	80005f8 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff ff5f 	bl	8000be8 <__aeabi_d2f>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <medicion+0x4c>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000030c 	.word	0x2000030c
 8000d38:	40b00000 	.word	0x40b00000
 8000d3c:	40140000 	.word	0x40140000
 8000d40:	20000310 	.word	0x20000310

08000d44 <seteo_sistem>:
//SETEO INICIAL DEL SISTEMA
void seteo_sistem(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	    X_derecha();
 8000d48:	f000 f820 	bl	8000d8c <X_derecha>
		HAL_Delay(30000);
 8000d4c:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d50:	f000 fc78 	bl	8001644 <HAL_Delay>
		stop();
 8000d54:	f000 f84a 	bl	8000dec <stop>
		X1_izquierda();
 8000d58:	f000 f824 	bl	8000da4 <X1_izquierda>
		HAL_Delay(9000);
 8000d5c:	f242 3028 	movw	r0, #9000	; 0x2328
 8000d60:	f000 fc70 	bl	8001644 <HAL_Delay>
		stop();
 8000d64:	f000 f842 	bl	8000dec <stop>

		Y_derecha();
 8000d68:	f000 f828 	bl	8000dbc <Y_derecha>
		HAL_Delay(30000);
 8000d6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d70:	f000 fc68 	bl	8001644 <HAL_Delay>
		stop();
 8000d74:	f000 f83a 	bl	8000dec <stop>
		Y1_izquierda();
 8000d78:	f000 f82c 	bl	8000dd4 <Y1_izquierda>
		HAL_Delay(9000);
 8000d7c:	f242 3028 	movw	r0, #9000	; 0x2328
 8000d80:	f000 fc60 	bl	8001644 <HAL_Delay>
		stop();
 8000d84:	f000 f832 	bl	8000dec <stop>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <X_derecha>:
// FUNCION PARA EL MOV EJE X
void X_derecha(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P1_R_GPIO_Port, P1_R_Pin, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f001 feb3 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <X1_izquierda>:
void X1_izquierda(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P1_L_GPIO_Port, P1_L_Pin, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2108      	movs	r1, #8
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <X1_izquierda+0x14>)
 8000dae:	f001 fea9 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	48000400 	.word	0x48000400

08000dbc <Y_derecha>:
//FUNCION MOV EJE Y
void Y_derecha()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P2_R_GPIO_Port, P2_R_Pin, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f001 fe9b 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <Y1_izquierda>:
void Y1_izquierda()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P2_L_GPIO_Port, P2_L_Pin, 1);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dde:	4802      	ldr	r0, [pc, #8]	; (8000de8 <Y1_izquierda+0x14>)
 8000de0:	f001 fe90 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	48000400 	.word	0x48000400

08000dec <stop>:
//FUNCION DE PARADA DE LOS EJES
void stop(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P1_R_GPIO_Port, P1_R_Pin, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f001 fe83 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P1_L_GPIO_Port, P1_L_Pin, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2108      	movs	r1, #8
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <stop+0x3c>)
 8000e04:	f001 fe7e 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_R_GPIO_Port, P2_R_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 fe77 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_L_GPIO_Port, P2_L_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <stop+0x3c>)
 8000e1e:	f001 fe71 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	48000400 	.word	0x48000400

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fba2 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f816 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f000 f916 	bl	8001068 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3c:	f000 f8f6 	bl	800102c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e40:	f000 f8c4 	bl	8000fcc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e44:	f000 f866 	bl	8000f14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, &medida, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4904      	ldr	r1, [pc, #16]	; (8000e5c <main+0x30>)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <main+0x34>)
 8000e4e:	f000 fdc1 	bl	80019d4 <HAL_ADC_Start_DMA>
	seteo_sistem();
 8000e52:	f7ff ff77 	bl	8000d44 <seteo_sistem>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  medicion();
 8000e56:	f7ff ff4d 	bl	8000cf4 <medicion>
 8000e5a:	e7fc      	b.n	8000e56 <main+0x2a>
 8000e5c:	2000030c 	.word	0x2000030c
 8000e60:	200001f0 	.word	0x200001f0

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09c      	sub	sp, #112	; 0x70
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fd99 	bl	80059aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2234      	movs	r2, #52	; 0x34
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 fd8b 	bl	80059aa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ea8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fe3e 	bl	8002b34 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ebe:	f000 f951 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000edc:	2102      	movs	r1, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fe66 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000eea:	f000 f93b 	bl	8001164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 f88e 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f06:	f000 f92d 	bl	8001164 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3770      	adds	r7, #112	; 0x70
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000f86:	f000 fb9f 	bl	80016c8 <HAL_ADC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000f90:	f000 f8e8 	bl	8001164 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_ADC1_Init+0xb4>)
 8000fb2:	f000 fdab 	bl	8001b0c <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fbc:	f000 f8d2 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001f0 	.word	0x200001f0

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <MX_USART2_UART_Init+0x5c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fd8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART2_UART_Init+0x58>)
 8001010:	f003 f996 	bl	8004340 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800101a:	f000 f8a3 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000284 	.word	0x20000284
 8001028:	40004400 	.word	0x40004400

0800102c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_DMA_Init+0x38>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <MX_DMA_Init+0x38>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_DMA_Init+0x38>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	200b      	movs	r0, #11
 8001050:	f001 fa19 	bl	8002486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001054:	200b      	movs	r0, #11
 8001056:	f001 fa32 	bl	80024be <HAL_NVIC_EnableIRQ>

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_GPIO_Init+0xf0>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a35      	ldr	r2, [pc, #212]	; (8001158 <MX_GPIO_Init+0xf0>)
 8001084:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_GPIO_Init+0xf0>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_GPIO_Init+0xf0>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <MX_GPIO_Init+0xf0>)
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a29      	ldr	r2, [pc, #164]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_GPIO_Init+0xf0>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P2_L_Pin|LD2_Pin|P1_L_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f242 4108 	movw	r1, #9224	; 0x2408
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <MX_GPIO_Init+0xf4>)
 80010e6:	f001 fd0d 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_R_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f001 fd06 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80010f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <MX_GPIO_Init+0xf8>)
 800110e:	f001 fb87 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_L_Pin LD2_Pin P1_L_Pin */
  GPIO_InitStruct.Pin = P2_L_Pin|LD2_Pin|P1_L_Pin;
 8001112:	f242 4308 	movw	r3, #9224	; 0x2408
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_GPIO_Init+0xf4>)
 800112c:	f001 fb78 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_R_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_R_Pin;
 8001130:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f001 fb68 	bl	8002820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_MspInit+0x44>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_MspInit+0x44>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_MspInit+0x44>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x44>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f001 f962 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d8:	d14c      	bne.n	8001274 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_ADC_MspInit+0xc4>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_ADC_MspInit+0xc4>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_ADC_MspInit+0xc4>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_ADC_MspInit+0xc4>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <HAL_ADC_MspInit+0xc4>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <HAL_ADC_MspInit+0xc4>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120a:	2301      	movs	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f001 fafe 	bl	8002820 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_ADC_MspInit+0xcc>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 8001246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800124a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 800124e:	2220      	movs	r2, #32
 8001250:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 800125a:	f001 f94a 	bl	80024f2 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001264:	f7ff ff7e 	bl	8001164 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_ADC_MspInit+0xc8>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	20000240 	.word	0x20000240
 8001284:	40020008 	.word	0x40020008

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x7c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d128      	bne.n	80012fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_UART_MspInit+0x80>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012da:	230c      	movs	r3, #12
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ea:	2307      	movs	r3, #7
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f001 fa92 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40004400 	.word	0x40004400
 8001308:	40021000 	.word	0x40021000

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f954 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA1_Channel1_IRQHandler+0x10>)
 8001366:	f001 f96a 	bl	800263e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000240 	.word	0x20000240

08001374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_kill>:

int _kill(int pid, int sig)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138e:	f004 fb5f 	bl	8005a50 <__errno>
 8001392:	4603      	mov	r3, r0
 8001394:	2216      	movs	r2, #22
 8001396:	601a      	str	r2, [r3, #0]
  return -1;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_exit>:

void _exit (int status)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffe7 	bl	8001384 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b6:	e7fe      	b.n	80013b6 <_exit+0x12>

080013b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00a      	b.n	80013e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ca:	f3af 8000 	nop.w
 80013ce:	4601      	mov	r1, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf0      	blt.n	80013ca <_read+0x12>
  }

  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e009      	b.n	8001418 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf1      	blt.n	8001404 <_write+0x12>
  }
  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_close>:

int _close(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001452:	605a      	str	r2, [r3, #4]
  return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_isatty>:

int _isatty(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f004 fac4 	bl	8005a50 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20004000 	.word	0x20004000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	20000314 	.word	0x20000314
 80014fc:	20000468 	.word	0x20000468

08001500 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff ffea 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f004 fa83 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001556:	f7ff fc69 	bl	8000e2c <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800155c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001568:	080096a0 	.word	0x080096a0
  ldr r2, =_sbss
 800156c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001570:	20000468 	.word	0x20000468

08001574 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_IRQHandler>
	...

08001578 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 ff71 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fdec 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 ff89 	bl	80024da <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 ff51 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	20000318 	.word	0x20000318

0800162c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000318 	.word	0x20000318

08001644 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b09a      	sub	sp, #104	; 0x68
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e169      	b.n	80019bc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d176      	bne.n	80017e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d152      	bne.n	80017a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fd4b 	bl	80011b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d13b      	bne.n	80017a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fd67 	bl	8002204 <ADC_Disable>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d12f      	bne.n	80017a8 <HAL_ADC_Init+0xe0>
 8001748:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800174c:	2b00      	cmp	r3, #0
 800174e:	d12b      	bne.n	80017a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001758:	f023 0302 	bic.w	r3, r3, #2
 800175c:	f043 0202 	orr.w	r2, r3, #2
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001772:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001782:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001784:	4b8f      	ldr	r3, [pc, #572]	; (80019c4 <HAL_ADC_Init+0x2fc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a8f      	ldr	r2, [pc, #572]	; (80019c8 <HAL_ADC_Init+0x300>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9a      	lsrs	r2, r3, #18
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800179a:	e002      	b.n	80017a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3b01      	subs	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017c4:	d110      	bne.n	80017e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f023 0312 	bic.w	r3, r3, #18
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 80d6 	bne.w	80019a2 <HAL_ADC_Init+0x2da>
 80017f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80d1 	bne.w	80019a2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 80c9 	bne.w	80019a2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001818:	f043 0202 	orr.w	r2, r3, #2
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001820:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_ADC_Init+0x304>)
 8001822:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <HAL_ADC_Init+0x180>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_ADC_Init+0x180>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_ADC_Init+0x182>
 8001848:	2300      	movs	r3, #0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d11c      	bne.n	8001888 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800184e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_ADC_Init+0x1a8>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_Init+0x1a8>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_ADC_Init+0x1aa>
 8001870:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001872:	2b00      	cmp	r3, #0
 8001874:	d108      	bne.n	8001888 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	431a      	orrs	r2, r3
 8001884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001886:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e5b      	ldrb	r3, [r3, #25]
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001892:	2a01      	cmp	r2, #1
 8001894:	d002      	beq.n	800189c <HAL_ADC_Init+0x1d4>
 8001896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800189a:	e000      	b.n	800189e <HAL_ADC_Init+0x1d6>
 800189c:	2200      	movs	r2, #0
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ae:	4313      	orrs	r3, r2
 80018b0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d11b      	bne.n	80018f4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e5b      	ldrb	r3, [r3, #25]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	3b01      	subs	r3, #1
 80018ca:	045a      	lsls	r2, r3, #17
 80018cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ce:	4313      	orrs	r3, r2
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	663b      	str	r3, [r7, #96]	; 0x60
 80018d6:	e00d      	b.n	80018f4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018e0:	f043 0220 	orr.w	r2, r3, #32
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d007      	beq.n	800190c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	4313      	orrs	r3, r2
 8001906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001908:	4313      	orrs	r3, r2
 800190a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d114      	bne.n	8001944 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001928:	f023 0302 	bic.w	r3, r3, #2
 800192c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7e1b      	ldrb	r3, [r3, #24]
 8001932:	039a      	lsls	r2, r3, #14
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4313      	orrs	r3, r2
 800193e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001940:	4313      	orrs	r3, r2
 8001942:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_ADC_Init+0x308>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001954:	430b      	orrs	r3, r1
 8001956:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d10c      	bne.n	800197a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f023 010f 	bic.w	r1, r3, #15
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	1e5a      	subs	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
 8001978:	e007      	b.n	800198a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 020f 	bic.w	r2, r2, #15
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f023 0303 	bic.w	r3, r3, #3
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
 80019a0:	e00a      	b.n	80019b8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f023 0312 	bic.w	r3, r3, #18
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3768      	adds	r7, #104	; 0x68
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	50000300 	.word	0x50000300
 80019d0:	fff0c007 	.word	0xfff0c007

080019d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d17e      	bne.n	8001af0 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_Start_DMA+0x2c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e07a      	b.n	8001af6 <HAL_ADC_Start_DMA+0x122>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fb97 	bl	800213c <ADC_Enable>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d166      	bne.n	8001ae6 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a62:	d106      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f023 0206 	bic.w	r2, r3, #6
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_ADC_Start_DMA+0x12c>)
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_ADC_Start_DMA+0x130>)
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_ADC_Start_DMA+0x134>)
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	221c      	movs	r2, #28
 8001a9e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0210 	orr.w	r2, r2, #16
 8001aae:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3340      	adds	r3, #64	; 0x40
 8001aca:	4619      	mov	r1, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f000 fd56 	bl	8002580 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0204 	orr.w	r2, r2, #4
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001aee:	e001      	b.n	8001af4 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
 8001af2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	08002071 	.word	0x08002071
 8001b04:	080020eb 	.word	0x080020eb
 8001b08:	08002107 	.word	0x08002107

08001b0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b09b      	sub	sp, #108	; 0x6c
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x22>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e295      	b.n	800205a <HAL_ADC_ConfigChannel+0x54e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 8279 	bne.w	8002038 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d81c      	bhi.n	8001b88 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	461a      	mov	r2, r3
 8001b62:	231f      	movs	r3, #31
 8001b64:	4093      	lsls	r3, r2
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4019      	ands	r1, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
 8001b86:	e063      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d81e      	bhi.n	8001bce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	3b1e      	subs	r3, #30
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4019      	ands	r1, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
 8001bcc:	e040      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b0e      	cmp	r3, #14
 8001bd4:	d81e      	bhi.n	8001c14 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	3b3c      	subs	r3, #60	; 0x3c
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4019      	ands	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	3b3c      	subs	r3, #60	; 0x3c
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
 8001c12:	e01d      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	3b5a      	subs	r3, #90	; 0x5a
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4019      	ands	r1, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	3b5a      	subs	r3, #90	; 0x5a
 8001c44:	fa00 f203 	lsl.w	r2, r0, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80e5 	bne.w	8001e2a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d91c      	bls.n	8001ca2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	3b1e      	subs	r3, #30
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	e019      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d84f      	bhi.n	8001d98 <HAL_ADC_ConfigChannel+0x28c>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d33 	.word	0x08001d33
 8001d08:	08001d55 	.word	0x08001d55
 8001d0c:	08001d77 	.word	0x08001d77
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d16:	4b97      	ldr	r3, [pc, #604]	; (8001f74 <HAL_ADC_ConfigChannel+0x468>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	0691      	lsls	r1, r2, #26
 8001d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d22:	430a      	orrs	r2, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d30:	e07b      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d38:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_ADC_ConfigChannel+0x468>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	0691      	lsls	r1, r2, #26
 8001d42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d44:	430a      	orrs	r2, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d50:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d52:	e06a      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d5a:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <HAL_ADC_ConfigChannel+0x468>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	0691      	lsls	r1, r2, #26
 8001d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d66:	430a      	orrs	r2, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d72:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d74:	e059      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d7c:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <HAL_ADC_ConfigChannel+0x468>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	0691      	lsls	r1, r2, #26
 8001d86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d94:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d96:	e048      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dde:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e02:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e26:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e28:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x33e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x33e>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x340>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 80fe 	bne.w	800204e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00f      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	400a      	ands	r2, r1
 8001e74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e78:	e049      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d91c      	bls.n	8001ed6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6999      	ldr	r1, [r3, #24]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1b      	subs	r3, #27
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b1b      	subs	r3, #27
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	e01b      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6959      	ldr	r1, [r3, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2207      	movs	r2, #7
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	4019      	ands	r1, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6898      	ldr	r0, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_ADC_ConfigChannel+0x46c>)
 8001f10:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d105      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d014      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f2a:	2b11      	cmp	r3, #17
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	f040 8085 	bne.w	800204e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d17e      	bne.n	800204e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10c      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x470>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x470>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e004      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x472>
 8001f74:	83fff000 	.word	0x83fff000
 8001f78:	50000300 	.word	0x50000300
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d150      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f82:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d010      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x498>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x498>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x49a>
 8001fa4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d13c      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d11d      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x4e2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fba:	d118      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_ADC_ConfigChannel+0x55c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_ADC_ConfigChannel+0x560>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9a      	lsrs	r2, r3, #18
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fde:	e002      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f9      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fec:	e02e      	b.n	800204c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b11      	cmp	r3, #17
 8001ff4:	d10b      	bne.n	800200e <HAL_ADC_ConfigChannel+0x502>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffe:	d106      	bne.n	800200e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800200c:	e01e      	b.n	800204c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b12      	cmp	r3, #18
 8002014:	d11a      	bne.n	800204c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800201e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002020:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002022:	e013      	b.n	800204c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002036:	e00a      	b.n	800204e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800204a:	e000      	b.n	800204e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800204c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002056:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800205a:	4618      	mov	r0, r3
 800205c:	376c      	adds	r7, #108	; 0x6c
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000
 800206c:	431bde83 	.word	0x431bde83

08002070 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002086:	2b00      	cmp	r3, #0
 8002088:	d126      	bne.n	80020d8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d115      	bne.n	80020d0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff fadb 	bl	800168c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020d6:	e004      	b.n	80020e2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff fad1 	bl	80016a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fac1 	bl	80016b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <ADC_Enable+0x2c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <ADC_Enable+0x2c>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <ADC_Enable+0x2e>
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d143      	bne.n	80021f6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <ADC_Enable+0xc4>)
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00d      	beq.n	8002198 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0210 	orr.w	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e02f      	b.n	80021f8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021a8:	f7ff fa40 	bl	800162c <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021ae:	e01b      	b.n	80021e8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021b0:	f7ff fa3c 	bl	800162c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d914      	bls.n	80021e8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d00d      	beq.n	80021e8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d1dc      	bne.n	80021b0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	8000003f 	.word	0x8000003f

08002204 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <ADC_Disable+0x2c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <ADC_Disable+0x2c>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <ADC_Disable+0x2e>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d047      	beq.n	80022c6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030d 	and.w	r3, r3, #13
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10f      	bne.n	8002264 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0202 	orr.w	r2, r2, #2
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2203      	movs	r2, #3
 800225a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800225c:	f7ff f9e6 	bl	800162c <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002262:	e029      	b.n	80022b8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e023      	b.n	80022c8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002280:	f7ff f9d4 	bl	800162c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d914      	bls.n	80022b8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10d      	bne.n	80022b8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f043 0210 	orr.w	r2, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e007      	b.n	80022c8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d0dc      	beq.n	8002280 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff3e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff8e 	bl	80023c4 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff31 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e037      	b.n	8002578 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800251e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f940 	bl	80027e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}  
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Start_IT+0x20>
 800259c:	2302      	movs	r3, #2
 800259e:	e04a      	b.n	8002636 <HAL_DMA_Start_IT+0xb6>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d13a      	bne.n	8002628 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f8d4 	bl	8002784 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 020e 	orr.w	r2, r2, #14
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e00f      	b.n	8002616 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 020a 	orr.w	r2, r2, #10
 8002604:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0204 	bic.w	r2, r2, #4
 8002614:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e005      	b.n	8002634 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002634:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2204      	movs	r2, #4
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d024      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x72>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01f      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0204 	bic.w	r2, r2, #4
 800268c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2104      	movs	r1, #4
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d06a      	beq.n	800277c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80026ae:	e065      	b.n	800277c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2202      	movs	r2, #2
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02c      	beq.n	800271a <HAL_DMA_IRQHandler+0xdc>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d027      	beq.n	800271a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020a 	bic.w	r2, r2, #10
 80026e6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	2102      	movs	r1, #2
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d035      	beq.n	800277c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002718:	e030      	b.n	800277c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2208      	movs	r2, #8
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d028      	beq.n	800277c <HAL_DMA_IRQHandler+0x13e>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
    }
  }
}  
 800277a:	e7ff      	b.n	800277c <HAL_DMA_IRQHandler+0x13e>
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d108      	bne.n	80027c4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027c2:	e007      	b.n	80027d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <DMA_CalcBaseAndBitshift+0x34>)
 80027f0:	4413      	add	r3, r2
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <DMA_CalcBaseAndBitshift+0x38>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a06      	ldr	r2, [pc, #24]	; (800281c <DMA_CalcBaseAndBitshift+0x3c>)
 8002804:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	bffdfff8 	.word	0xbffdfff8
 8002818:	cccccccd 	.word	0xcccccccd
 800281c:	40020000 	.word	0x40020000

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e14e      	b.n	8002ace <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8140 	beq.w	8002ac8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d005      	beq.n	8002860 <HAL_GPIO_Init+0x40>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d130      	bne.n	80028c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002896:	2201      	movs	r2, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0201 	and.w	r2, r3, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d017      	beq.n	80028fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d123      	bne.n	8002952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 809a 	beq.w	8002ac8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002994:	4b55      	ldr	r3, [pc, #340]	; (8002aec <HAL_GPIO_Init+0x2cc>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_GPIO_Init+0x2cc>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b52      	ldr	r3, [pc, #328]	; (8002aec <HAL_GPIO_Init+0x2cc>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ac:	4a50      	ldr	r2, [pc, #320]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029d6:	d013      	beq.n	8002a00 <HAL_GPIO_Init+0x1e0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a46      	ldr	r2, [pc, #280]	; (8002af4 <HAL_GPIO_Init+0x2d4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00d      	beq.n	80029fc <HAL_GPIO_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a45      	ldr	r2, [pc, #276]	; (8002af8 <HAL_GPIO_Init+0x2d8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_GPIO_Init+0x1d8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a44      	ldr	r2, [pc, #272]	; (8002afc <HAL_GPIO_Init+0x2dc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_GPIO_Init+0x1d4>
 80029f0:	2303      	movs	r3, #3
 80029f2:	e006      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 80029f4:	2305      	movs	r3, #5
 80029f6:	e004      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e002      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_GPIO_Init+0x1e2>
 8002a00:	2300      	movs	r3, #0
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	f002 0203 	and.w	r2, r2, #3
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	4093      	lsls	r3, r2
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a12:	4937      	ldr	r1, [pc, #220]	; (8002af0 <HAL_GPIO_Init+0x2d0>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a44:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a6e:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f aea9 	bne.w	8002830 <HAL_GPIO_Init+0x10>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	48000400 	.word	0x48000400
 8002af8:	48000800 	.word	0x48000800
 8002afc:	48000c00 	.word	0x48000c00
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f001 b823 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 817d 	beq.w	8002e6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b70:	4bbc      	ldr	r3, [pc, #752]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b7c:	4bb9      	ldr	r3, [pc, #740]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d15c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x10e>
 8002b88:	4bb6      	ldr	r3, [pc, #728]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d155      	bne.n	8002c42 <HAL_RCC_OscConfig+0x10e>
 8002b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002baa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x94>
 8002bc2:	4ba8      	ldr	r3, [pc, #672]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	e015      	b.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bcc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002be4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bf0:	4b9c      	ldr	r3, [pc, #624]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bf8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bfc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c00:	fa92 f2a2 	rbit	r2, r2
 8002c04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c0c:	fab2 f282 	clz	r2, r2
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f042 0220 	orr.w	r2, r2, #32
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f002 021f 	and.w	r2, r2, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 811f 	beq.w	8002e68 <HAL_RCC_OscConfig+0x334>
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8116 	bne.w	8002e68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f000 bfaf 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12e>
 8002c54:	4b83      	ldr	r3, [pc, #524]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a82      	ldr	r2, [pc, #520]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e036      	b.n	8002cd0 <HAL_RCC_OscConfig+0x19c>
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x158>
 8002c72:	4b7c      	ldr	r3, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7b      	ldr	r2, [pc, #492]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b79      	ldr	r3, [pc, #484]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a78      	ldr	r2, [pc, #480]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e021      	b.n	8002cd0 <HAL_RCC_OscConfig+0x19c>
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x184>
 8002c9e:	4b71      	ldr	r3, [pc, #452]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a70      	ldr	r2, [pc, #448]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b6e      	ldr	r3, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6d      	ldr	r2, [pc, #436]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x19c>
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a69      	ldr	r2, [pc, #420]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a66      	ldr	r2, [pc, #408]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f023 020f 	bic.w	r2, r3, #15
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	495f      	ldr	r1, [pc, #380]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d059      	beq.n	8002dae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fc97 	bl	800162c <HAL_GetTick>
 8002cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fc92 	bl	800162c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d902      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	f000 bf43 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8002d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_RCC_OscConfig+0x218>
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e015      	b.n	8002d78 <HAL_RCC_OscConfig+0x244>
 8002d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d74:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ab      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1d0>
 8002dac:	e05d      	b.n	8002e6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe fc3d 	bl	800162c <HAL_GetTick>
 8002db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fc38 	bl	800162c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d902      	bls.n	8002dce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	f000 bee9 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8002dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002de2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0x2cc>
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e015      	b.n	8002e2c <HAL_RCC_OscConfig+0x2f8>
 8002e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e38:	fa92 f2a2 	rbit	r2, r2
 8002e3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ab      	bne.n	8002db8 <HAL_RCC_OscConfig+0x284>
 8002e60:	e003      	b.n	8002e6a <HAL_RCC_OscConfig+0x336>
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 817d 	beq.w	800317a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e80:	4ba6      	ldr	r3, [pc, #664]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e8c:	4ba3      	ldr	r3, [pc, #652]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d172      	bne.n	8002f7e <HAL_RCC_OscConfig+0x44a>
 8002e98:	4ba0      	ldr	r3, [pc, #640]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d16c      	bne.n	8002f7e <HAL_RCC_OscConfig+0x44a>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002eb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x3a0>
 8002ece:	4b93      	ldr	r3, [pc, #588]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e013      	b.n	8002efc <HAL_RCC_OscConfig+0x3c8>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002eec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ef8:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2202      	movs	r2, #2
 8002efe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f06:	fa92 f2a2 	rbit	r2, r2
 8002f0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f12:	fab2 f282 	clz	r2, r2
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	f042 0220 	orr.w	r2, r2, #32
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	f002 021f 	and.w	r2, r2, #31
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCC_OscConfig+0x410>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f000 be2e 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b75      	ldr	r3, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	21f8      	movs	r1, #248	; 0xf8
 8002f5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f62:	fa91 f1a1 	rbit	r1, r1
 8002f66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f6e:	fab1 f181 	clz	r1, r1
 8002f72:	b2c9      	uxtb	r1, r1
 8002f74:	408b      	lsls	r3, r1
 8002f76:	4969      	ldr	r1, [pc, #420]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7c:	e0fd      	b.n	800317a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8088 	beq.w	80030a0 <HAL_RCC_OscConfig+0x56c>
 8002f90:	2301      	movs	r3, #1
 8002f92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fa2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2301      	movs	r3, #1
 8002fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fb36 	bl	800162c <HAL_GetTick>
 8002fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fb31 	bl	800162c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d902      	bls.n	8002fdc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	f000 bde2 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0x4d8>
 8003006:	4b45      	ldr	r3, [pc, #276]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e013      	b.n	8003034 <HAL_RCC_OscConfig+0x500>
 800300c:	2302      	movs	r3, #2
 800300e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800301e:	2302      	movs	r3, #2
 8003020:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003024:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003030:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2202      	movs	r2, #2
 8003036:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800303a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800303e:	fa92 f2a2 	rbit	r2, r2
 8003042:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003046:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800304a:	fab2 f282 	clz	r2, r2
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f042 0220 	orr.w	r2, r2, #32
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f002 021f 	and.w	r2, r2, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0af      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	21f8      	movs	r1, #248	; 0xf8
 800307c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003084:	fa91 f1a1 	rbit	r1, r1
 8003088:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800308c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003090:	fab1 f181 	clz	r1, r1
 8003094:	b2c9      	uxtb	r1, r1
 8003096:	408b      	lsls	r3, r1
 8003098:	4920      	ldr	r1, [pc, #128]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
 800309e:	e06c      	b.n	800317a <HAL_RCC_OscConfig+0x646>
 80030a0:	2301      	movs	r3, #1
 80030a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe faae 	bl	800162c <HAL_GetTick>
 80030d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe faa9 	bl	800162c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	f000 bd5a 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d104      	bne.n	8003120 <HAL_RCC_OscConfig+0x5ec>
 8003116:	4b01      	ldr	r3, [pc, #4]	; (800311c <HAL_RCC_OscConfig+0x5e8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	e015      	b.n	8003148 <HAL_RCC_OscConfig+0x614>
 800311c:	40021000 	.word	0x40021000
 8003120:	2302      	movs	r3, #2
 8003122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003132:	2302      	movs	r3, #2
 8003134:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003138:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003144:	4bc8      	ldr	r3, [pc, #800]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2202      	movs	r2, #2
 800314a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800314e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003152:	fa92 f2a2 	rbit	r2, r2
 8003156:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800315a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f042 0220 	orr.w	r2, r2, #32
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f002 021f 	and.w	r2, r2, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ad      	bne.n	80030d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8110 	beq.w	80033b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d079      	beq.n	8003294 <HAL_RCC_OscConfig+0x760>
 80031a0:	2301      	movs	r3, #1
 80031a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	4bab      	ldr	r3, [pc, #684]	; (800346c <HAL_RCC_OscConfig+0x938>)
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	461a      	mov	r2, r3
 80031c6:	2301      	movs	r3, #1
 80031c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fa2f 	bl	800162c <HAL_GetTick>
 80031ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fe fa2a 	bl	800162c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d902      	bls.n	80031ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f000 bcdb 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003204:	2202      	movs	r2, #2
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f2a3 	rbit	r2, r3
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003228:	2202      	movs	r2, #2
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003242:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003244:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 8003246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003250:	2102      	movs	r1, #2
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003258:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	fa93 f1a3 	rbit	r1, r3
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800326a:	6019      	str	r1, [r3, #0]
  return result;
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0a0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x6a0>
 8003292:	e08d      	b.n	80033b0 <HAL_RCC_OscConfig+0x87c>
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	fa93 f2a3 	rbit	r2, r3
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032b6:	601a      	str	r2, [r3, #0]
  return result;
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b68      	ldr	r3, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x938>)
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	461a      	mov	r2, r3
 80032d2:	2300      	movs	r3, #0
 80032d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7fe f9a9 	bl	800162c <HAL_GetTick>
 80032da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fe f9a4 	bl	800162c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d902      	bls.n	80032f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	f000 bc55 	b.w	8003ba0 <HAL_RCC_OscConfig+0x106c>
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032fe:	2202      	movs	r2, #2
 8003300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fa93 f2a3 	rbit	r2, r3
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003322:	2202      	movs	r2, #2
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003346:	2202      	movs	r2, #2
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003360:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 8003364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800336e:	2102      	movs	r1, #2
 8003370:	6019      	str	r1, [r3, #0]
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f1a3 	rbit	r1, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003388:	6019      	str	r1, [r3, #0]
  return result;
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d197      	bne.n	80032e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 81a1 	beq.w	8003708 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d116      	bne.n	8003406 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b23      	ldr	r3, [pc, #140]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e2:	61d3      	str	r3, [r2, #28]
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_RCC_OscConfig+0x93c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11a      	bne.n	8003448 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCC_OscConfig+0x93c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_RCC_OscConfig+0x93c>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341e:	f7fe f905 	bl	800162c <HAL_GetTick>
 8003422:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	e009      	b.n	800343c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fe f900 	bl	800162c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e3b1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_RCC_OscConfig+0x93c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10d      	bne.n	8003474 <HAL_RCC_OscConfig+0x940>
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a02      	ldr	r2, [pc, #8]	; (8003468 <HAL_RCC_OscConfig+0x934>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e03c      	b.n	80034e0 <HAL_RCC_OscConfig+0x9ac>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	10908120 	.word	0x10908120
 8003470:	40007000 	.word	0x40007000
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <HAL_RCC_OscConfig+0x96a>
 8003484:	4bc1      	ldr	r3, [pc, #772]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4ac0      	ldr	r2, [pc, #768]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	4bbe      	ldr	r3, [pc, #760]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4abd      	ldr	r2, [pc, #756]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	e020      	b.n	80034e0 <HAL_RCC_OscConfig+0x9ac>
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x994>
 80034ae:	4bb7      	ldr	r3, [pc, #732]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4ab6      	ldr	r2, [pc, #728]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6213      	str	r3, [r2, #32]
 80034ba:	4bb4      	ldr	r3, [pc, #720]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4ab3      	ldr	r2, [pc, #716]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6213      	str	r3, [r2, #32]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x9ac>
 80034c8:	4bb0      	ldr	r3, [pc, #704]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4aaf      	ldr	r2, [pc, #700]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	4bad      	ldr	r3, [pc, #692]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4aac      	ldr	r2, [pc, #688]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8081 	beq.w	80035f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7fe f89b 	bl	800162c <HAL_GetTick>
 80034f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	e00b      	b.n	8003514 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe f896 	bl	800162c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e345      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800351c:	2202      	movs	r2, #2
 800351e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003540:	2202      	movs	r2, #2
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003564:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d102      	bne.n	8003580 <HAL_RCC_OscConfig+0xa4c>
 800357a:	4b84      	ldr	r3, [pc, #528]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	e013      	b.n	80035a8 <HAL_RCC_OscConfig+0xa74>
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003588:	2202      	movs	r2, #2
 800358a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	4b79      	ldr	r3, [pc, #484]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035b0:	2102      	movs	r1, #2
 80035b2:	6011      	str	r1, [r2, #0]
 80035b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	fa92 f1a2 	rbit	r1, r2
 80035c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035ca:	6011      	str	r1, [r2, #0]
  return result;
 80035cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	fab2 f282 	clz	r2, r2
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f002 021f 	and.w	r2, r2, #31
 80035e6:	2101      	movs	r1, #1
 80035e8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d084      	beq.n	80034fc <HAL_RCC_OscConfig+0x9c8>
 80035f2:	e07f      	b.n	80036f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe f81a 	bl	800162c <HAL_GetTick>
 80035f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fc:	e00b      	b.n	8003616 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fe f815 	bl	800162c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e2c4      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800361e:	2202      	movs	r2, #2
 8003620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003642:	2202      	movs	r2, #2
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	fa93 f2a3 	rbit	r2, r3
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800365c:	601a      	str	r2, [r3, #0]
  return result;
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003666:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d102      	bne.n	8003682 <HAL_RCC_OscConfig+0xb4e>
 800367c:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	e013      	b.n	80036aa <HAL_RCC_OscConfig+0xb76>
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800368a:	2202      	movs	r2, #2
 800368c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036b2:	2102      	movs	r1, #2
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	fa92 f1a2 	rbit	r1, r2
 80036c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036cc:	6011      	str	r1, [r2, #0]
  return result;
 80036ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d184      	bne.n	80035fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8242 	beq.w	8003b9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371a:	4b1c      	ldr	r3, [pc, #112]	; (800378c <HAL_RCC_OscConfig+0xc58>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b08      	cmp	r3, #8
 8003724:	f000 8213 	beq.w	8003b4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b02      	cmp	r3, #2
 8003736:	f040 8162 	bne.w	80039fe <HAL_RCC_OscConfig+0xeca>
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003742:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	fa93 f2a3 	rbit	r2, r3
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800375e:	601a      	str	r2, [r3, #0]
  return result;
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003768:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003774:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	461a      	mov	r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fd ff54 	bl	800162c <HAL_GetTick>
 8003784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003788:	e00c      	b.n	80037a4 <HAL_RCC_OscConfig+0xc70>
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd ff4c 	bl	800162c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1fd      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037c8:	601a      	str	r2, [r3, #0]
  return result;
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <HAL_RCC_OscConfig+0xcba>
 80037e8:	4bb0      	ldr	r3, [pc, #704]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	e027      	b.n	800383e <HAL_RCC_OscConfig+0xd0a>
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800381c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f2a3 	rbit	r2, r3
 8003830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003834:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003842:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003846:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800384a:	6011      	str	r1, [r2, #0]
 800384c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003850:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	fa92 f1a2 	rbit	r1, r2
 800385a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003862:	6011      	str	r1, [r2, #0]
  return result;
 8003864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003868:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d182      	bne.n	8003790 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	430b      	orrs	r3, r1
 80038ac:	497f      	ldr	r1, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	fa93 f2a3 	rbit	r2, r3
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038d6:	601a      	str	r2, [r3, #0]
  return result;
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	461a      	mov	r2, r3
 80038f4:	2301      	movs	r3, #1
 80038f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fe98 	bl	800162c <HAL_GetTick>
 80038fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003900:	e009      	b.n	8003916 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003902:	f7fd fe93 	bl	800162c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e144      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800391e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003928:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f2a3 	rbit	r2, r3
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800393a:	601a      	str	r2, [r3, #0]
  return result;
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003944:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_RCC_OscConfig+0xe2c>
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e027      	b.n	80039b0 <HAL_RCC_OscConfig+0xe7c>
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800396c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800398e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	fa92 f1a2 	rbit	r1, r2
 80039cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039d4:	6011      	str	r1, [r2, #0]
  return result;
 80039d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d082      	beq.n	8003902 <HAL_RCC_OscConfig+0xdce>
 80039fc:	e0cf      	b.n	8003b9e <HAL_RCC_OscConfig+0x106a>
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	fa93 f2a3 	rbit	r2, r3
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a22:	601a      	str	r2, [r3, #0]
  return result;
 8003a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2300      	movs	r3, #0
 8003a42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd fdf2 	bl	800162c <HAL_GetTick>
 8003a48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	e009      	b.n	8003a62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fd fded 	bl	800162c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e09e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
 8003a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	fa93 f2a3 	rbit	r2, r3
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a86:	601a      	str	r2, [r3, #0]
  return result;
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d104      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xf7c>
 8003aa6:	4b01      	ldr	r3, [pc, #4]	; (8003aac <HAL_RCC_OscConfig+0xf78>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e029      	b.n	8003b00 <HAL_RCC_OscConfig+0xfcc>
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x1078>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	fa92 f1a2 	rbit	r1, r2
 8003b1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b24:	6011      	str	r1, [r2, #0]
  return result;
 8003b26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f042 0220 	orr.w	r2, r2, #32
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f002 021f 	and.w	r2, r2, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d180      	bne.n	8003a4e <HAL_RCC_OscConfig+0xf1a>
 8003b4c:	e027      	b.n	8003b9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e01e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_OscConfig+0x1078>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10b      	bne.n	8003b9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000

08003bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b09e      	sub	sp, #120	; 0x78
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e162      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b90      	ldr	r3, [pc, #576]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	498b      	ldr	r1, [pc, #556]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e14a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	497f      	ldr	r1, [pc, #508]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80dc 	beq.w	8003ddc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d13c      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xf6>
 8003c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3c:	fab3 f383 	clz	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d102      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xa6>
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e00f      	b.n	8003c76 <HAL_RCC_ClockConfig+0xc6>
 8003c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	667b      	str	r3, [r7, #100]	; 0x64
 8003c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c72:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c7e:	fa92 f2a2 	rbit	r2, r2
 8003c82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c86:	fab2 f282 	clz	r2, r2
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	f002 021f 	and.w	r2, r2, #31
 8003c96:	2101      	movs	r1, #1
 8003c98:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d17b      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0f3      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d13c      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x178>
 8003cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d102      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x128>
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
 8003cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cea:	643b      	str	r3, [r7, #64]	; 0x40
 8003cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d00:	fa92 f2a2 	rbit	r2, r2
 8003d04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d08:	fab2 f282 	clz	r2, r2
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	f042 0220 	orr.w	r2, r2, #32
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	f002 021f 	and.w	r2, r2, #31
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d13a      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b2      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x1a0>
 8003d4a:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	e00d      	b.n	8003d6c <HAL_RCC_ClockConfig+0x1bc>
 8003d50:	2302      	movs	r3, #2
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	61ba      	str	r2, [r7, #24]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	fa92 f2a2 	rbit	r2, r2
 8003d76:	617a      	str	r2, [r7, #20]
  return result;
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	fab2 f282 	clz	r2, r2
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	f042 0220 	orr.w	r2, r2, #32
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	f002 021f 	and.w	r2, r2, #31
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e079      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f023 0203 	bic.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	491a      	ldr	r1, [pc, #104]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dac:	f7fd fc3e 	bl	800162c <HAL_GetTick>
 8003db0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7fd fc3a 	bl	800162c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e061      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 020c 	and.w	r2, r3, #12
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1eb      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d214      	bcs.n	8003e14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 0207 	bic.w	r2, r3, #7
 8003df2:	4906      	ldr	r1, [pc, #24]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <HAL_RCC_ClockConfig+0x25c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e040      	b.n	8003e8e <HAL_RCC_ClockConfig+0x2de>
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <HAL_RCC_ClockConfig+0x2e8>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	491a      	ldr	r1, [pc, #104]	; (8003e98 <HAL_RCC_ClockConfig+0x2e8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_RCC_ClockConfig+0x2e8>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4912      	ldr	r1, [pc, #72]	; (8003e98 <HAL_RCC_ClockConfig+0x2e8>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e52:	f000 f829 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e56:	4601      	mov	r1, r0
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e60:	22f0      	movs	r2, #240	; 0xf0
 8003e62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	fa92 f2a2 	rbit	r2, r2
 8003e6a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	fab2 f282 	clz	r2, r2
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	40d3      	lsrs	r3, r2
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x2ec>)
 8003e78:	5cd3      	ldrb	r3, [r2, r3]
 8003e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e7e:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <HAL_RCC_ClockConfig+0x2f0>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_ClockConfig+0x2f4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fb8c 	bl	80015a4 <HAL_InitTick>
  
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3778      	adds	r7, #120	; 0x78
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08009238 	.word	0x08009238
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	20000004 	.word	0x20000004

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b08b      	sub	sp, #44	; 0x2c
 8003eac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d002      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d003      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x36>
 8003ed6:	e03c      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003eda:	623b      	str	r3, [r7, #32]
      break;
 8003edc:	e03c      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ee4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ee8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	fa92 f2a2 	rbit	r2, r2
 8003ef0:	607a      	str	r2, [r7, #4]
  return result;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	fab2 f282 	clz	r2, r2
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	40d3      	lsrs	r3, r2
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f02:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	fa92 f2a2 	rbit	r2, r2
 8003f14:	60fa      	str	r2, [r7, #12]
  return result;
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	fab2 f282 	clz	r2, r2
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	40d3      	lsrs	r3, r2
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f30:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e004      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	623b      	str	r3, [r7, #32]
      break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f54:	623b      	str	r3, [r7, #32]
      break;
 8003f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	372c      	adds	r7, #44	; 0x2c
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	08009250 	.word	0x08009250
 8003f74:	08009260 	.word	0x08009260
 8003f78:	003d0900 	.word	0x003d0900

08003f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f82:	681b      	ldr	r3, [r3, #0]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000000 	.word	0x20000000

08003f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f9a:	f7ff ffef 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fa8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	fa92 f2a2 	rbit	r2, r2
 8003fb4:	603a      	str	r2, [r7, #0]
  return result;
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	40d3      	lsrs	r3, r2
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08009248 	.word	0x08009248

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fde:	f7ff ffcd 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	fa92 f2a2 	rbit	r2, r2
 8003ff8:	603a      	str	r2, [r7, #0]
  return result;
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	fab2 f282 	clz	r2, r2
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	40d3      	lsrs	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	08009248 	.word	0x08009248

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b092      	sub	sp, #72	; 0x48
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800402c:	2300      	movs	r3, #0
 800402e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80d4 	beq.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004040:	4b4e      	ldr	r3, [pc, #312]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10e      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4a4a      	ldr	r2, [pc, #296]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	61d3      	str	r3, [r2, #28]
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b45      	ldr	r3, [pc, #276]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d118      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	4b42      	ldr	r3, [pc, #264]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a41      	ldr	r2, [pc, #260]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7fd fad3 	bl	800162c <HAL_GetTick>
 8004086:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fd facf 	bl	800162c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b64      	cmp	r3, #100	; 0x64
 8004096:	d901      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e14b      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	4b38      	ldr	r3, [pc, #224]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8084 	beq.w	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d07c      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	461a      	mov	r2, r3
 80040f2:	2301      	movs	r3, #1
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	461a      	mov	r2, r3
 8004116:	2300      	movs	r3, #0
 8004118:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04b      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fd fa7f 	bl	800162c <HAL_GetTick>
 800412e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fd fa7b 	bl	800162c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0f5      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004148:	2302      	movs	r3, #2
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
 8004154:	2302      	movs	r3, #2
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	61fb      	str	r3, [r7, #28]
  return result;
 8004160:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d108      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004176:	4b01      	ldr	r3, [pc, #4]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	e00d      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
 8004184:	10908100 	.word	0x10908100
 8004188:	2302      	movs	r3, #2
 800418a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	4b69      	ldr	r3, [pc, #420]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2202      	movs	r2, #2
 800419a:	613a      	str	r2, [r7, #16]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	fa92 f2a2 	rbit	r2, r2
 80041a2:	60fa      	str	r2, [r7, #12]
  return result;
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	fab2 f282 	clz	r2, r2
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	f002 021f 	and.w	r2, r2, #31
 80041b6:	2101      	movs	r1, #1
 80041b8:	fa01 f202 	lsl.w	r2, r1, r2
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0b7      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041c2:	4b5e      	ldr	r3, [pc, #376]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	495b      	ldr	r1, [pc, #364]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b57      	ldr	r3, [pc, #348]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4a56      	ldr	r2, [pc, #344]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f4:	4b51      	ldr	r3, [pc, #324]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	f023 0203 	bic.w	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	494e      	ldr	r1, [pc, #312]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004202:	4313      	orrs	r3, r2
 8004204:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004212:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f023 0210 	bic.w	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4947      	ldr	r1, [pc, #284]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004220:	4313      	orrs	r3, r2
 8004222:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004230:	4b42      	ldr	r3, [pc, #264]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	493f      	ldr	r1, [pc, #252]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f023 0220 	bic.w	r2, r3, #32
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	4938      	ldr	r1, [pc, #224]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800425c:	4313      	orrs	r3, r2
 800425e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800426c:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	4930      	ldr	r1, [pc, #192]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800427a:	4313      	orrs	r3, r2
 800427c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800428a:	4b2c      	ldr	r3, [pc, #176]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4929      	ldr	r1, [pc, #164]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	4921      	ldr	r1, [pc, #132]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042c6:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	491a      	ldr	r1, [pc, #104]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	4912      	ldr	r1, [pc, #72]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	490b      	ldr	r1, [pc, #44]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004310:	4313      	orrs	r3, r2
 8004312:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800432e:	4313      	orrs	r3, r2
 8004330:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3748      	adds	r7, #72	; 0x48
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000

08004340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e040      	b.n	80043d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc ff90 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2224      	movs	r2, #36	; 0x24
 800436c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f82c 	bl	80043dc <UART_SetConfig>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e022      	b.n	80043d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f956 	bl	8004648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f9dd 	bl	800478c <UART_CheckIdleState>
 80043d2:	4603      	mov	r3, r0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b8a      	ldr	r3, [pc, #552]	; (8004630 <UART_SetConfig+0x254>)
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	430b      	orrs	r3, r1
 8004412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	430a      	orrs	r2, r1
 800444c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a78      	ldr	r2, [pc, #480]	; (8004634 <UART_SetConfig+0x258>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d120      	bne.n	800449a <UART_SetConfig+0xbe>
 8004458:	4b77      	ldr	r3, [pc, #476]	; (8004638 <UART_SetConfig+0x25c>)
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d817      	bhi.n	8004494 <UART_SetConfig+0xb8>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x90>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	08004489 	.word	0x08004489
 8004474:	0800448f 	.word	0x0800448f
 8004478:	08004483 	.word	0x08004483
 800447c:	2300      	movs	r3, #0
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e01d      	b.n	80044be <UART_SetConfig+0xe2>
 8004482:	2302      	movs	r3, #2
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e01a      	b.n	80044be <UART_SetConfig+0xe2>
 8004488:	2304      	movs	r3, #4
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e017      	b.n	80044be <UART_SetConfig+0xe2>
 800448e:	2308      	movs	r3, #8
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e014      	b.n	80044be <UART_SetConfig+0xe2>
 8004494:	2310      	movs	r3, #16
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e011      	b.n	80044be <UART_SetConfig+0xe2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a67      	ldr	r2, [pc, #412]	; (800463c <UART_SetConfig+0x260>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d102      	bne.n	80044aa <UART_SetConfig+0xce>
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e009      	b.n	80044be <UART_SetConfig+0xe2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a64      	ldr	r2, [pc, #400]	; (8004640 <UART_SetConfig+0x264>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d102      	bne.n	80044ba <UART_SetConfig+0xde>
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e001      	b.n	80044be <UART_SetConfig+0xe2>
 80044ba:	2310      	movs	r3, #16
 80044bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c6:	d15a      	bne.n	800457e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d827      	bhi.n	800451e <UART_SetConfig+0x142>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0xf8>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004509 	.word	0x08004509
 80044e0:	0800451f 	.word	0x0800451f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7ff fd4c 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61b8      	str	r0, [r7, #24]
        break;
 80044fe:	e013      	b.n	8004528 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7ff fd6a 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 8004504:	61b8      	str	r0, [r7, #24]
        break;
 8004506:	e00f      	b.n	8004528 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b4e      	ldr	r3, [pc, #312]	; (8004644 <UART_SetConfig+0x268>)
 800450a:	61bb      	str	r3, [r7, #24]
        break;
 800450c:	e00c      	b.n	8004528 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7ff fccb 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8004512:	61b8      	str	r0, [r7, #24]
        break;
 8004514:	e008      	b.n	8004528 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	61bb      	str	r3, [r7, #24]
        break;
 800451c:	e004      	b.n	8004528 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	77bb      	strb	r3, [r7, #30]
        break;
 8004526:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d074      	beq.n	8004618 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	005a      	lsls	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d916      	bls.n	8004578 <UART_SetConfig+0x19c>
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d212      	bcs.n	8004578 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f023 030f 	bic.w	r3, r3, #15
 800455a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	b29b      	uxth	r3, r3
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	b29a      	uxth	r2, r3
 8004568:	89fb      	ldrh	r3, [r7, #14]
 800456a:	4313      	orrs	r3, r2
 800456c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	89fa      	ldrh	r2, [r7, #14]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	e04f      	b.n	8004618 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	77bb      	strb	r3, [r7, #30]
 800457c:	e04c      	b.n	8004618 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800457e:	7ffb      	ldrb	r3, [r7, #31]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d828      	bhi.n	80045d6 <UART_SetConfig+0x1fa>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <UART_SetConfig+0x1b0>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b9 	.word	0x080045b9
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c7 	.word	0x080045c7
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045d7 	.word	0x080045d7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7ff fcf0 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 80045b4:	61b8      	str	r0, [r7, #24]
        break;
 80045b6:	e013      	b.n	80045e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7ff fd0e 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 80045bc:	61b8      	str	r0, [r7, #24]
        break;
 80045be:	e00f      	b.n	80045e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b20      	ldr	r3, [pc, #128]	; (8004644 <UART_SetConfig+0x268>)
 80045c2:	61bb      	str	r3, [r7, #24]
        break;
 80045c4:	e00c      	b.n	80045e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7ff fc6f 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 80045ca:	61b8      	str	r0, [r7, #24]
        break;
 80045cc:	e008      	b.n	80045e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	61bb      	str	r3, [r7, #24]
        break;
 80045d4:	e004      	b.n	80045e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	77bb      	strb	r3, [r7, #30]
        break;
 80045de:	bf00      	nop
    }

    if (pclk != 0U)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d018      	beq.n	8004618 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085a      	lsrs	r2, r3, #1
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b0f      	cmp	r3, #15
 80045fe:	d909      	bls.n	8004614 <UART_SetConfig+0x238>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004606:	d205      	bcs.n	8004614 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	e001      	b.n	8004618 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004624:	7fbb      	ldrb	r3, [r7, #30]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	efff69f3 	.word	0xefff69f3
 8004634:	40013800 	.word	0x40013800
 8004638:	40021000 	.word	0x40021000
 800463c:	40004400 	.word	0x40004400
 8004640:	40004800 	.word	0x40004800
 8004644:	007a1200 	.word	0x007a1200

08004648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01a      	beq.n	800475e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004746:	d10a      	bne.n	800475e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b098      	sub	sp, #96	; 0x60
 8004790:	af02      	add	r7, sp, #8
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800479c:	f7fc ff46 	bl	800162c <HAL_GetTick>
 80047a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d12e      	bne.n	800480e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b8:	2200      	movs	r2, #0
 80047ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f88c 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d021      	beq.n	800480e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047de:	653b      	str	r3, [r7, #80]	; 0x50
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e6      	bne.n	80047ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e062      	b.n	80048d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b04      	cmp	r3, #4
 800481a:	d149      	bne.n	80048b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800481c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004824:	2200      	movs	r2, #0
 8004826:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f856 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03c      	beq.n	80048b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	623b      	str	r3, [r7, #32]
   return(result);
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
 8004856:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e6      	bne.n	8004836 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	60fb      	str	r3, [r7, #12]
   return(result);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004888:	61fa      	str	r2, [r7, #28]
 800488a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	69b9      	ldr	r1, [r7, #24]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	617b      	str	r3, [r7, #20]
   return(result);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e011      	b.n	80048d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3758      	adds	r7, #88	; 0x58
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	e049      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d045      	beq.n	8004982 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fc fe99 	bl	800162c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <UART_WaitOnFlagUntilTimeout+0x30>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e048      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d031      	beq.n	8004982 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d110      	bne.n	800494e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f838 	bl	80049aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2208      	movs	r2, #8
 800493e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e029      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495c:	d111      	bne.n	8004982 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f81e 	bl	80049aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e00f      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	429a      	cmp	r2, r3
 800499e:	d0a6      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b095      	sub	sp, #84	; 0x54
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d0:	643b      	str	r3, [r7, #64]	; 0x40
 80049d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e6      	bne.n	80049b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e5      	bne.n	80049e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d118      	bne.n	8004a52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 0310 	bic.w	r3, r3, #16
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e6      	bne.n	8004a20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a66:	bf00      	nop
 8004a68:	3754      	adds	r7, #84	; 0x54
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <__cvt>:
 8004a72:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a76:	ec55 4b10 	vmov	r4, r5, d0
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	460e      	mov	r6, r1
 8004a7e:	4619      	mov	r1, r3
 8004a80:	462b      	mov	r3, r5
 8004a82:	bfbb      	ittet	lt
 8004a84:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a88:	461d      	movlt	r5, r3
 8004a8a:	2300      	movge	r3, #0
 8004a8c:	232d      	movlt	r3, #45	; 0x2d
 8004a8e:	700b      	strb	r3, [r1, #0]
 8004a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a96:	4691      	mov	r9, r2
 8004a98:	f023 0820 	bic.w	r8, r3, #32
 8004a9c:	bfbc      	itt	lt
 8004a9e:	4622      	movlt	r2, r4
 8004aa0:	4614      	movlt	r4, r2
 8004aa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aa6:	d005      	beq.n	8004ab4 <__cvt+0x42>
 8004aa8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004aac:	d100      	bne.n	8004ab0 <__cvt+0x3e>
 8004aae:	3601      	adds	r6, #1
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	e000      	b.n	8004ab6 <__cvt+0x44>
 8004ab4:	2103      	movs	r1, #3
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	ab02      	add	r3, sp, #8
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	ec45 4b10 	vmov	d0, r4, r5
 8004ac2:	4653      	mov	r3, sl
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	f001 f87f 	bl	8005bc8 <_dtoa_r>
 8004aca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ace:	4607      	mov	r7, r0
 8004ad0:	d102      	bne.n	8004ad8 <__cvt+0x66>
 8004ad2:	f019 0f01 	tst.w	r9, #1
 8004ad6:	d022      	beq.n	8004b1e <__cvt+0xac>
 8004ad8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004adc:	eb07 0906 	add.w	r9, r7, r6
 8004ae0:	d110      	bne.n	8004b04 <__cvt+0x92>
 8004ae2:	783b      	ldrb	r3, [r7, #0]
 8004ae4:	2b30      	cmp	r3, #48	; 0x30
 8004ae6:	d10a      	bne.n	8004afe <__cvt+0x8c>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2300      	movs	r3, #0
 8004aec:	4620      	mov	r0, r4
 8004aee:	4629      	mov	r1, r5
 8004af0:	f7fb ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8004af4:	b918      	cbnz	r0, 8004afe <__cvt+0x8c>
 8004af6:	f1c6 0601 	rsb	r6, r6, #1
 8004afa:	f8ca 6000 	str.w	r6, [sl]
 8004afe:	f8da 3000 	ldr.w	r3, [sl]
 8004b02:	4499      	add	r9, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	2300      	movs	r3, #0
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	f7fb ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b10:	b108      	cbz	r0, 8004b16 <__cvt+0xa4>
 8004b12:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b16:	2230      	movs	r2, #48	; 0x30
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	454b      	cmp	r3, r9
 8004b1c:	d307      	bcc.n	8004b2e <__cvt+0xbc>
 8004b1e:	9b03      	ldr	r3, [sp, #12]
 8004b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b22:	1bdb      	subs	r3, r3, r7
 8004b24:	4638      	mov	r0, r7
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	b004      	add	sp, #16
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	9103      	str	r1, [sp, #12]
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e7f0      	b.n	8004b18 <__cvt+0xa6>

08004b36 <__exponent>:
 8004b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2900      	cmp	r1, #0
 8004b3c:	bfb8      	it	lt
 8004b3e:	4249      	neglt	r1, r1
 8004b40:	f803 2b02 	strb.w	r2, [r3], #2
 8004b44:	bfb4      	ite	lt
 8004b46:	222d      	movlt	r2, #45	; 0x2d
 8004b48:	222b      	movge	r2, #43	; 0x2b
 8004b4a:	2909      	cmp	r1, #9
 8004b4c:	7042      	strb	r2, [r0, #1]
 8004b4e:	dd2a      	ble.n	8004ba6 <__exponent+0x70>
 8004b50:	f10d 0207 	add.w	r2, sp, #7
 8004b54:	4617      	mov	r7, r2
 8004b56:	260a      	movs	r6, #10
 8004b58:	4694      	mov	ip, r2
 8004b5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b5e:	fb06 1415 	mls	r4, r6, r5, r1
 8004b62:	3430      	adds	r4, #48	; 0x30
 8004b64:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b68:	460c      	mov	r4, r1
 8004b6a:	2c63      	cmp	r4, #99	; 0x63
 8004b6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004b70:	4629      	mov	r1, r5
 8004b72:	dcf1      	bgt.n	8004b58 <__exponent+0x22>
 8004b74:	3130      	adds	r1, #48	; 0x30
 8004b76:	f1ac 0402 	sub.w	r4, ip, #2
 8004b7a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b7e:	1c41      	adds	r1, r0, #1
 8004b80:	4622      	mov	r2, r4
 8004b82:	42ba      	cmp	r2, r7
 8004b84:	d30a      	bcc.n	8004b9c <__exponent+0x66>
 8004b86:	f10d 0209 	add.w	r2, sp, #9
 8004b8a:	eba2 020c 	sub.w	r2, r2, ip
 8004b8e:	42bc      	cmp	r4, r7
 8004b90:	bf88      	it	hi
 8004b92:	2200      	movhi	r2, #0
 8004b94:	4413      	add	r3, r2
 8004b96:	1a18      	subs	r0, r3, r0
 8004b98:	b003      	add	sp, #12
 8004b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ba0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ba4:	e7ed      	b.n	8004b82 <__exponent+0x4c>
 8004ba6:	2330      	movs	r3, #48	; 0x30
 8004ba8:	3130      	adds	r1, #48	; 0x30
 8004baa:	7083      	strb	r3, [r0, #2]
 8004bac:	70c1      	strb	r1, [r0, #3]
 8004bae:	1d03      	adds	r3, r0, #4
 8004bb0:	e7f1      	b.n	8004b96 <__exponent+0x60>
	...

08004bb4 <_printf_float>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	ed2d 8b02 	vpush	{d8}
 8004bbc:	b08d      	sub	sp, #52	; 0x34
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	4605      	mov	r5, r0
 8004bca:	f000 fef7 	bl	80059bc <_localeconv_r>
 8004bce:	f8d0 a000 	ldr.w	sl, [r0]
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	f7fb fb4c 	bl	8000270 <strlen>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	930a      	str	r3, [sp, #40]	; 0x28
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	9305      	str	r3, [sp, #20]
 8004be0:	f8d8 3000 	ldr.w	r3, [r8]
 8004be4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004be8:	3307      	adds	r3, #7
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	f103 0208 	add.w	r2, r3, #8
 8004bf2:	f8c8 2000 	str.w	r2, [r8]
 8004bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bfe:	9307      	str	r3, [sp, #28]
 8004c00:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c04:	ee08 0a10 	vmov	s16, r0
 8004c08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c10:	4b9e      	ldr	r3, [pc, #632]	; (8004e8c <_printf_float+0x2d8>)
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295
 8004c16:	f7fb ff89 	bl	8000b2c <__aeabi_dcmpun>
 8004c1a:	bb88      	cbnz	r0, 8004c80 <_printf_float+0xcc>
 8004c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c20:	4b9a      	ldr	r3, [pc, #616]	; (8004e8c <_printf_float+0x2d8>)
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295
 8004c26:	f7fb ff63 	bl	8000af0 <__aeabi_dcmple>
 8004c2a:	bb48      	cbnz	r0, 8004c80 <_printf_float+0xcc>
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4640      	mov	r0, r8
 8004c32:	4649      	mov	r1, r9
 8004c34:	f7fb ff52 	bl	8000adc <__aeabi_dcmplt>
 8004c38:	b110      	cbz	r0, 8004c40 <_printf_float+0x8c>
 8004c3a:	232d      	movs	r3, #45	; 0x2d
 8004c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c40:	4a93      	ldr	r2, [pc, #588]	; (8004e90 <_printf_float+0x2dc>)
 8004c42:	4b94      	ldr	r3, [pc, #592]	; (8004e94 <_printf_float+0x2e0>)
 8004c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c48:	bf94      	ite	ls
 8004c4a:	4690      	movls	r8, r2
 8004c4c:	4698      	movhi	r8, r3
 8004c4e:	2303      	movs	r3, #3
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	9b05      	ldr	r3, [sp, #20]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	f04f 0900 	mov.w	r9, #0
 8004c5e:	9700      	str	r7, [sp, #0]
 8004c60:	4633      	mov	r3, r6
 8004c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c64:	4621      	mov	r1, r4
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 f9da 	bl	8005020 <_printf_common>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f040 8090 	bne.w	8004d92 <_printf_float+0x1de>
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
 8004c76:	b00d      	add	sp, #52	; 0x34
 8004c78:	ecbd 8b02 	vpop	{d8}
 8004c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c80:	4642      	mov	r2, r8
 8004c82:	464b      	mov	r3, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb ff50 	bl	8000b2c <__aeabi_dcmpun>
 8004c8c:	b140      	cbz	r0, 8004ca0 <_printf_float+0xec>
 8004c8e:	464b      	mov	r3, r9
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bfbc      	itt	lt
 8004c94:	232d      	movlt	r3, #45	; 0x2d
 8004c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c9a:	4a7f      	ldr	r2, [pc, #508]	; (8004e98 <_printf_float+0x2e4>)
 8004c9c:	4b7f      	ldr	r3, [pc, #508]	; (8004e9c <_printf_float+0x2e8>)
 8004c9e:	e7d1      	b.n	8004c44 <_printf_float+0x90>
 8004ca0:	6863      	ldr	r3, [r4, #4]
 8004ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ca6:	9206      	str	r2, [sp, #24]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	d13f      	bne.n	8004d2c <_printf_float+0x178>
 8004cac:	2306      	movs	r3, #6
 8004cae:	6063      	str	r3, [r4, #4]
 8004cb0:	9b05      	ldr	r3, [sp, #20]
 8004cb2:	6861      	ldr	r1, [r4, #4]
 8004cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9303      	str	r3, [sp, #12]
 8004cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8004cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cc2:	ab09      	add	r3, sp, #36	; 0x24
 8004cc4:	ec49 8b10 	vmov	d0, r8, r9
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6022      	str	r2, [r4, #0]
 8004ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f7ff fece 	bl	8004a72 <__cvt>
 8004cd6:	9b06      	ldr	r3, [sp, #24]
 8004cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cda:	2b47      	cmp	r3, #71	; 0x47
 8004cdc:	4680      	mov	r8, r0
 8004cde:	d108      	bne.n	8004cf2 <_printf_float+0x13e>
 8004ce0:	1cc8      	adds	r0, r1, #3
 8004ce2:	db02      	blt.n	8004cea <_printf_float+0x136>
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	dd41      	ble.n	8004d6e <_printf_float+0x1ba>
 8004cea:	f1ab 0302 	sub.w	r3, fp, #2
 8004cee:	fa5f fb83 	uxtb.w	fp, r3
 8004cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cf6:	d820      	bhi.n	8004d3a <_printf_float+0x186>
 8004cf8:	3901      	subs	r1, #1
 8004cfa:	465a      	mov	r2, fp
 8004cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d00:	9109      	str	r1, [sp, #36]	; 0x24
 8004d02:	f7ff ff18 	bl	8004b36 <__exponent>
 8004d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d08:	1813      	adds	r3, r2, r0
 8004d0a:	2a01      	cmp	r2, #1
 8004d0c:	4681      	mov	r9, r0
 8004d0e:	6123      	str	r3, [r4, #16]
 8004d10:	dc02      	bgt.n	8004d18 <_printf_float+0x164>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	07d2      	lsls	r2, r2, #31
 8004d16:	d501      	bpl.n	8004d1c <_printf_float+0x168>
 8004d18:	3301      	adds	r3, #1
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d09c      	beq.n	8004c5e <_printf_float+0xaa>
 8004d24:	232d      	movs	r3, #45	; 0x2d
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2a:	e798      	b.n	8004c5e <_printf_float+0xaa>
 8004d2c:	9a06      	ldr	r2, [sp, #24]
 8004d2e:	2a47      	cmp	r2, #71	; 0x47
 8004d30:	d1be      	bne.n	8004cb0 <_printf_float+0xfc>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1bc      	bne.n	8004cb0 <_printf_float+0xfc>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e7b9      	b.n	8004cae <_printf_float+0xfa>
 8004d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d3e:	d118      	bne.n	8004d72 <_printf_float+0x1be>
 8004d40:	2900      	cmp	r1, #0
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	dd0b      	ble.n	8004d5e <_printf_float+0x1aa>
 8004d46:	6121      	str	r1, [r4, #16]
 8004d48:	b913      	cbnz	r3, 8004d50 <_printf_float+0x19c>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	07d0      	lsls	r0, r2, #31
 8004d4e:	d502      	bpl.n	8004d56 <_printf_float+0x1a2>
 8004d50:	3301      	adds	r3, #1
 8004d52:	440b      	add	r3, r1
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d58:	f04f 0900 	mov.w	r9, #0
 8004d5c:	e7de      	b.n	8004d1c <_printf_float+0x168>
 8004d5e:	b913      	cbnz	r3, 8004d66 <_printf_float+0x1b2>
 8004d60:	6822      	ldr	r2, [r4, #0]
 8004d62:	07d2      	lsls	r2, r2, #31
 8004d64:	d501      	bpl.n	8004d6a <_printf_float+0x1b6>
 8004d66:	3302      	adds	r3, #2
 8004d68:	e7f4      	b.n	8004d54 <_printf_float+0x1a0>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e7f2      	b.n	8004d54 <_printf_float+0x1a0>
 8004d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d74:	4299      	cmp	r1, r3
 8004d76:	db05      	blt.n	8004d84 <_printf_float+0x1d0>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	6121      	str	r1, [r4, #16]
 8004d7c:	07d8      	lsls	r0, r3, #31
 8004d7e:	d5ea      	bpl.n	8004d56 <_printf_float+0x1a2>
 8004d80:	1c4b      	adds	r3, r1, #1
 8004d82:	e7e7      	b.n	8004d54 <_printf_float+0x1a0>
 8004d84:	2900      	cmp	r1, #0
 8004d86:	bfd4      	ite	le
 8004d88:	f1c1 0202 	rsble	r2, r1, #2
 8004d8c:	2201      	movgt	r2, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	e7e0      	b.n	8004d54 <_printf_float+0x1a0>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	055a      	lsls	r2, r3, #21
 8004d96:	d407      	bmi.n	8004da8 <_printf_float+0x1f4>
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	4642      	mov	r2, r8
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	d12c      	bne.n	8004e00 <_printf_float+0x24c>
 8004da6:	e764      	b.n	8004c72 <_printf_float+0xbe>
 8004da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dac:	f240 80e0 	bls.w	8004f70 <_printf_float+0x3bc>
 8004db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004db4:	2200      	movs	r2, #0
 8004db6:	2300      	movs	r3, #0
 8004db8:	f7fb fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d034      	beq.n	8004e2a <_printf_float+0x276>
 8004dc0:	4a37      	ldr	r2, [pc, #220]	; (8004ea0 <_printf_float+0x2ec>)
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f af51 	beq.w	8004c72 <_printf_float+0xbe>
 8004dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	db02      	blt.n	8004dde <_printf_float+0x22a>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	07d8      	lsls	r0, r3, #31
 8004ddc:	d510      	bpl.n	8004e00 <_printf_float+0x24c>
 8004dde:	ee18 3a10 	vmov	r3, s16
 8004de2:	4652      	mov	r2, sl
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f af41 	beq.w	8004c72 <_printf_float+0xbe>
 8004df0:	f04f 0800 	mov.w	r8, #0
 8004df4:	f104 091a 	add.w	r9, r4, #26
 8004df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4543      	cmp	r3, r8
 8004dfe:	dc09      	bgt.n	8004e14 <_printf_float+0x260>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	079b      	lsls	r3, r3, #30
 8004e04:	f100 8107 	bmi.w	8005016 <_printf_float+0x462>
 8004e08:	68e0      	ldr	r0, [r4, #12]
 8004e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e0c:	4298      	cmp	r0, r3
 8004e0e:	bfb8      	it	lt
 8004e10:	4618      	movlt	r0, r3
 8004e12:	e730      	b.n	8004c76 <_printf_float+0xc2>
 8004e14:	2301      	movs	r3, #1
 8004e16:	464a      	mov	r2, r9
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f af27 	beq.w	8004c72 <_printf_float+0xbe>
 8004e24:	f108 0801 	add.w	r8, r8, #1
 8004e28:	e7e6      	b.n	8004df8 <_printf_float+0x244>
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dc39      	bgt.n	8004ea4 <_printf_float+0x2f0>
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <_printf_float+0x2ec>)
 8004e32:	2301      	movs	r3, #1
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f af19 	beq.w	8004c72 <_printf_float+0xbe>
 8004e40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d102      	bne.n	8004e4e <_printf_float+0x29a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07d9      	lsls	r1, r3, #31
 8004e4c:	d5d8      	bpl.n	8004e00 <_printf_float+0x24c>
 8004e4e:	ee18 3a10 	vmov	r3, s16
 8004e52:	4652      	mov	r2, sl
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	47b8      	blx	r7
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	f43f af09 	beq.w	8004c72 <_printf_float+0xbe>
 8004e60:	f04f 0900 	mov.w	r9, #0
 8004e64:	f104 0a1a 	add.w	sl, r4, #26
 8004e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e6a:	425b      	negs	r3, r3
 8004e6c:	454b      	cmp	r3, r9
 8004e6e:	dc01      	bgt.n	8004e74 <_printf_float+0x2c0>
 8004e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e72:	e792      	b.n	8004d9a <_printf_float+0x1e6>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4652      	mov	r2, sl
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f43f aef7 	beq.w	8004c72 <_printf_float+0xbe>
 8004e84:	f109 0901 	add.w	r9, r9, #1
 8004e88:	e7ee      	b.n	8004e68 <_printf_float+0x2b4>
 8004e8a:	bf00      	nop
 8004e8c:	7fefffff 	.word	0x7fefffff
 8004e90:	08009270 	.word	0x08009270
 8004e94:	08009274 	.word	0x08009274
 8004e98:	08009278 	.word	0x08009278
 8004e9c:	0800927c 	.word	0x0800927c
 8004ea0:	08009280 	.word	0x08009280
 8004ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	bfa8      	it	ge
 8004eac:	461a      	movge	r2, r3
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	4691      	mov	r9, r2
 8004eb2:	dc37      	bgt.n	8004f24 <_printf_float+0x370>
 8004eb4:	f04f 0b00 	mov.w	fp, #0
 8004eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ebc:	f104 021a 	add.w	r2, r4, #26
 8004ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	eba3 0309 	sub.w	r3, r3, r9
 8004ec8:	455b      	cmp	r3, fp
 8004eca:	dc33      	bgt.n	8004f34 <_printf_float+0x380>
 8004ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	db3b      	blt.n	8004f4c <_printf_float+0x398>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	07da      	lsls	r2, r3, #31
 8004ed8:	d438      	bmi.n	8004f4c <_printf_float+0x398>
 8004eda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004ede:	eba2 0903 	sub.w	r9, r2, r3
 8004ee2:	9b05      	ldr	r3, [sp, #20]
 8004ee4:	1ad2      	subs	r2, r2, r3
 8004ee6:	4591      	cmp	r9, r2
 8004ee8:	bfa8      	it	ge
 8004eea:	4691      	movge	r9, r2
 8004eec:	f1b9 0f00 	cmp.w	r9, #0
 8004ef0:	dc35      	bgt.n	8004f5e <_printf_float+0x3aa>
 8004ef2:	f04f 0800 	mov.w	r8, #0
 8004ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004efa:	f104 0a1a 	add.w	sl, r4, #26
 8004efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	eba3 0309 	sub.w	r3, r3, r9
 8004f08:	4543      	cmp	r3, r8
 8004f0a:	f77f af79 	ble.w	8004e00 <_printf_float+0x24c>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4652      	mov	r2, sl
 8004f12:	4631      	mov	r1, r6
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b8      	blx	r7
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f43f aeaa 	beq.w	8004c72 <_printf_float+0xbe>
 8004f1e:	f108 0801 	add.w	r8, r8, #1
 8004f22:	e7ec      	b.n	8004efe <_printf_float+0x34a>
 8004f24:	4613      	mov	r3, r2
 8004f26:	4631      	mov	r1, r6
 8004f28:	4642      	mov	r2, r8
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d1c0      	bne.n	8004eb4 <_printf_float+0x300>
 8004f32:	e69e      	b.n	8004c72 <_printf_float+0xbe>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	9205      	str	r2, [sp, #20]
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	f43f ae97 	beq.w	8004c72 <_printf_float+0xbe>
 8004f44:	9a05      	ldr	r2, [sp, #20]
 8004f46:	f10b 0b01 	add.w	fp, fp, #1
 8004f4a:	e7b9      	b.n	8004ec0 <_printf_float+0x30c>
 8004f4c:	ee18 3a10 	vmov	r3, s16
 8004f50:	4652      	mov	r2, sl
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d1be      	bne.n	8004eda <_printf_float+0x326>
 8004f5c:	e689      	b.n	8004c72 <_printf_float+0xbe>
 8004f5e:	9a05      	ldr	r2, [sp, #20]
 8004f60:	464b      	mov	r3, r9
 8004f62:	4442      	add	r2, r8
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d1c1      	bne.n	8004ef2 <_printf_float+0x33e>
 8004f6e:	e680      	b.n	8004c72 <_printf_float+0xbe>
 8004f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	dc01      	bgt.n	8004f7a <_printf_float+0x3c6>
 8004f76:	07db      	lsls	r3, r3, #31
 8004f78:	d53a      	bpl.n	8004ff0 <_printf_float+0x43c>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f ae74 	beq.w	8004c72 <_printf_float+0xbe>
 8004f8a:	ee18 3a10 	vmov	r3, s16
 8004f8e:	4652      	mov	r2, sl
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	f43f ae6b 	beq.w	8004c72 <_printf_float+0xbe>
 8004f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004fa8:	f7fb fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fac:	b9d8      	cbnz	r0, 8004fe6 <_printf_float+0x432>
 8004fae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004fb2:	f108 0201 	add.w	r2, r8, #1
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d10e      	bne.n	8004fde <_printf_float+0x42a>
 8004fc0:	e657      	b.n	8004c72 <_printf_float+0xbe>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f43f ae50 	beq.w	8004c72 <_printf_float+0xbe>
 8004fd2:	f108 0801 	add.w	r8, r8, #1
 8004fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	4543      	cmp	r3, r8
 8004fdc:	dcf1      	bgt.n	8004fc2 <_printf_float+0x40e>
 8004fde:	464b      	mov	r3, r9
 8004fe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fe4:	e6da      	b.n	8004d9c <_printf_float+0x1e8>
 8004fe6:	f04f 0800 	mov.w	r8, #0
 8004fea:	f104 0a1a 	add.w	sl, r4, #26
 8004fee:	e7f2      	b.n	8004fd6 <_printf_float+0x422>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	e7df      	b.n	8004fb6 <_printf_float+0x402>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	464a      	mov	r2, r9
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	f43f ae36 	beq.w	8004c72 <_printf_float+0xbe>
 8005006:	f108 0801 	add.w	r8, r8, #1
 800500a:	68e3      	ldr	r3, [r4, #12]
 800500c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800500e:	1a5b      	subs	r3, r3, r1
 8005010:	4543      	cmp	r3, r8
 8005012:	dcf0      	bgt.n	8004ff6 <_printf_float+0x442>
 8005014:	e6f8      	b.n	8004e08 <_printf_float+0x254>
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	f104 0919 	add.w	r9, r4, #25
 800501e:	e7f4      	b.n	800500a <_printf_float+0x456>

08005020 <_printf_common>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	4616      	mov	r6, r2
 8005026:	4699      	mov	r9, r3
 8005028:	688a      	ldr	r2, [r1, #8]
 800502a:	690b      	ldr	r3, [r1, #16]
 800502c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005030:	4293      	cmp	r3, r2
 8005032:	bfb8      	it	lt
 8005034:	4613      	movlt	r3, r2
 8005036:	6033      	str	r3, [r6, #0]
 8005038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800503c:	4607      	mov	r7, r0
 800503e:	460c      	mov	r4, r1
 8005040:	b10a      	cbz	r2, 8005046 <_printf_common+0x26>
 8005042:	3301      	adds	r3, #1
 8005044:	6033      	str	r3, [r6, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	0699      	lsls	r1, r3, #26
 800504a:	bf42      	ittt	mi
 800504c:	6833      	ldrmi	r3, [r6, #0]
 800504e:	3302      	addmi	r3, #2
 8005050:	6033      	strmi	r3, [r6, #0]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	f015 0506 	ands.w	r5, r5, #6
 8005058:	d106      	bne.n	8005068 <_printf_common+0x48>
 800505a:	f104 0a19 	add.w	sl, r4, #25
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	6832      	ldr	r2, [r6, #0]
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	42ab      	cmp	r3, r5
 8005066:	dc26      	bgt.n	80050b6 <_printf_common+0x96>
 8005068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800506c:	1e13      	subs	r3, r2, #0
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	bf18      	it	ne
 8005072:	2301      	movne	r3, #1
 8005074:	0692      	lsls	r2, r2, #26
 8005076:	d42b      	bmi.n	80050d0 <_printf_common+0xb0>
 8005078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507c:	4649      	mov	r1, r9
 800507e:	4638      	mov	r0, r7
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d01e      	beq.n	80050c4 <_printf_common+0xa4>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	6922      	ldr	r2, [r4, #16]
 800508a:	f003 0306 	and.w	r3, r3, #6
 800508e:	2b04      	cmp	r3, #4
 8005090:	bf02      	ittt	eq
 8005092:	68e5      	ldreq	r5, [r4, #12]
 8005094:	6833      	ldreq	r3, [r6, #0]
 8005096:	1aed      	subeq	r5, r5, r3
 8005098:	68a3      	ldr	r3, [r4, #8]
 800509a:	bf0c      	ite	eq
 800509c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a0:	2500      	movne	r5, #0
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bfc4      	itt	gt
 80050a6:	1a9b      	subgt	r3, r3, r2
 80050a8:	18ed      	addgt	r5, r5, r3
 80050aa:	2600      	movs	r6, #0
 80050ac:	341a      	adds	r4, #26
 80050ae:	42b5      	cmp	r5, r6
 80050b0:	d11a      	bne.n	80050e8 <_printf_common+0xc8>
 80050b2:	2000      	movs	r0, #0
 80050b4:	e008      	b.n	80050c8 <_printf_common+0xa8>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4652      	mov	r2, sl
 80050ba:	4649      	mov	r1, r9
 80050bc:	4638      	mov	r0, r7
 80050be:	47c0      	blx	r8
 80050c0:	3001      	adds	r0, #1
 80050c2:	d103      	bne.n	80050cc <_printf_common+0xac>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	3501      	adds	r5, #1
 80050ce:	e7c6      	b.n	800505e <_printf_common+0x3e>
 80050d0:	18e1      	adds	r1, r4, r3
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	2030      	movs	r0, #48	; 0x30
 80050d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050da:	4422      	add	r2, r4
 80050dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050e4:	3302      	adds	r3, #2
 80050e6:	e7c7      	b.n	8005078 <_printf_common+0x58>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4622      	mov	r2, r4
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d0e6      	beq.n	80050c4 <_printf_common+0xa4>
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7d9      	b.n	80050ae <_printf_common+0x8e>
	...

080050fc <_printf_i>:
 80050fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	7e0f      	ldrb	r7, [r1, #24]
 8005102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005104:	2f78      	cmp	r7, #120	; 0x78
 8005106:	4691      	mov	r9, r2
 8005108:	4680      	mov	r8, r0
 800510a:	460c      	mov	r4, r1
 800510c:	469a      	mov	sl, r3
 800510e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005112:	d807      	bhi.n	8005124 <_printf_i+0x28>
 8005114:	2f62      	cmp	r7, #98	; 0x62
 8005116:	d80a      	bhi.n	800512e <_printf_i+0x32>
 8005118:	2f00      	cmp	r7, #0
 800511a:	f000 80d4 	beq.w	80052c6 <_printf_i+0x1ca>
 800511e:	2f58      	cmp	r7, #88	; 0x58
 8005120:	f000 80c0 	beq.w	80052a4 <_printf_i+0x1a8>
 8005124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800512c:	e03a      	b.n	80051a4 <_printf_i+0xa8>
 800512e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005132:	2b15      	cmp	r3, #21
 8005134:	d8f6      	bhi.n	8005124 <_printf_i+0x28>
 8005136:	a101      	add	r1, pc, #4	; (adr r1, 800513c <_printf_i+0x40>)
 8005138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800513c:	08005195 	.word	0x08005195
 8005140:	080051a9 	.word	0x080051a9
 8005144:	08005125 	.word	0x08005125
 8005148:	08005125 	.word	0x08005125
 800514c:	08005125 	.word	0x08005125
 8005150:	08005125 	.word	0x08005125
 8005154:	080051a9 	.word	0x080051a9
 8005158:	08005125 	.word	0x08005125
 800515c:	08005125 	.word	0x08005125
 8005160:	08005125 	.word	0x08005125
 8005164:	08005125 	.word	0x08005125
 8005168:	080052ad 	.word	0x080052ad
 800516c:	080051d5 	.word	0x080051d5
 8005170:	08005267 	.word	0x08005267
 8005174:	08005125 	.word	0x08005125
 8005178:	08005125 	.word	0x08005125
 800517c:	080052cf 	.word	0x080052cf
 8005180:	08005125 	.word	0x08005125
 8005184:	080051d5 	.word	0x080051d5
 8005188:	08005125 	.word	0x08005125
 800518c:	08005125 	.word	0x08005125
 8005190:	0800526f 	.word	0x0800526f
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	602a      	str	r2, [r5, #0]
 800519c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a4:	2301      	movs	r3, #1
 80051a6:	e09f      	b.n	80052e8 <_printf_i+0x1ec>
 80051a8:	6820      	ldr	r0, [r4, #0]
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	0607      	lsls	r7, r0, #24
 80051ae:	f103 0104 	add.w	r1, r3, #4
 80051b2:	6029      	str	r1, [r5, #0]
 80051b4:	d501      	bpl.n	80051ba <_printf_i+0xbe>
 80051b6:	681e      	ldr	r6, [r3, #0]
 80051b8:	e003      	b.n	80051c2 <_printf_i+0xc6>
 80051ba:	0646      	lsls	r6, r0, #25
 80051bc:	d5fb      	bpl.n	80051b6 <_printf_i+0xba>
 80051be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	da03      	bge.n	80051ce <_printf_i+0xd2>
 80051c6:	232d      	movs	r3, #45	; 0x2d
 80051c8:	4276      	negs	r6, r6
 80051ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ce:	485a      	ldr	r0, [pc, #360]	; (8005338 <_printf_i+0x23c>)
 80051d0:	230a      	movs	r3, #10
 80051d2:	e012      	b.n	80051fa <_printf_i+0xfe>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	1d19      	adds	r1, r3, #4
 80051da:	6029      	str	r1, [r5, #0]
 80051dc:	0605      	lsls	r5, r0, #24
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0xe8>
 80051e0:	681e      	ldr	r6, [r3, #0]
 80051e2:	e002      	b.n	80051ea <_printf_i+0xee>
 80051e4:	0641      	lsls	r1, r0, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0xe4>
 80051e8:	881e      	ldrh	r6, [r3, #0]
 80051ea:	4853      	ldr	r0, [pc, #332]	; (8005338 <_printf_i+0x23c>)
 80051ec:	2f6f      	cmp	r7, #111	; 0x6f
 80051ee:	bf0c      	ite	eq
 80051f0:	2308      	moveq	r3, #8
 80051f2:	230a      	movne	r3, #10
 80051f4:	2100      	movs	r1, #0
 80051f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051fa:	6865      	ldr	r5, [r4, #4]
 80051fc:	60a5      	str	r5, [r4, #8]
 80051fe:	2d00      	cmp	r5, #0
 8005200:	bfa2      	ittt	ge
 8005202:	6821      	ldrge	r1, [r4, #0]
 8005204:	f021 0104 	bicge.w	r1, r1, #4
 8005208:	6021      	strge	r1, [r4, #0]
 800520a:	b90e      	cbnz	r6, 8005210 <_printf_i+0x114>
 800520c:	2d00      	cmp	r5, #0
 800520e:	d04b      	beq.n	80052a8 <_printf_i+0x1ac>
 8005210:	4615      	mov	r5, r2
 8005212:	fbb6 f1f3 	udiv	r1, r6, r3
 8005216:	fb03 6711 	mls	r7, r3, r1, r6
 800521a:	5dc7      	ldrb	r7, [r0, r7]
 800521c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005220:	4637      	mov	r7, r6
 8005222:	42bb      	cmp	r3, r7
 8005224:	460e      	mov	r6, r1
 8005226:	d9f4      	bls.n	8005212 <_printf_i+0x116>
 8005228:	2b08      	cmp	r3, #8
 800522a:	d10b      	bne.n	8005244 <_printf_i+0x148>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	07de      	lsls	r6, r3, #31
 8005230:	d508      	bpl.n	8005244 <_printf_i+0x148>
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	6861      	ldr	r1, [r4, #4]
 8005236:	4299      	cmp	r1, r3
 8005238:	bfde      	ittt	le
 800523a:	2330      	movle	r3, #48	; 0x30
 800523c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005240:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005244:	1b52      	subs	r2, r2, r5
 8005246:	6122      	str	r2, [r4, #16]
 8005248:	f8cd a000 	str.w	sl, [sp]
 800524c:	464b      	mov	r3, r9
 800524e:	aa03      	add	r2, sp, #12
 8005250:	4621      	mov	r1, r4
 8005252:	4640      	mov	r0, r8
 8005254:	f7ff fee4 	bl	8005020 <_printf_common>
 8005258:	3001      	adds	r0, #1
 800525a:	d14a      	bne.n	80052f2 <_printf_i+0x1f6>
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	b004      	add	sp, #16
 8005262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	f043 0320 	orr.w	r3, r3, #32
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	4833      	ldr	r0, [pc, #204]	; (800533c <_printf_i+0x240>)
 8005270:	2778      	movs	r7, #120	; 0x78
 8005272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	6829      	ldr	r1, [r5, #0]
 800527a:	061f      	lsls	r7, r3, #24
 800527c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005280:	d402      	bmi.n	8005288 <_printf_i+0x18c>
 8005282:	065f      	lsls	r7, r3, #25
 8005284:	bf48      	it	mi
 8005286:	b2b6      	uxthmi	r6, r6
 8005288:	07df      	lsls	r7, r3, #31
 800528a:	bf48      	it	mi
 800528c:	f043 0320 	orrmi.w	r3, r3, #32
 8005290:	6029      	str	r1, [r5, #0]
 8005292:	bf48      	it	mi
 8005294:	6023      	strmi	r3, [r4, #0]
 8005296:	b91e      	cbnz	r6, 80052a0 <_printf_i+0x1a4>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	f023 0320 	bic.w	r3, r3, #32
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	2310      	movs	r3, #16
 80052a2:	e7a7      	b.n	80051f4 <_printf_i+0xf8>
 80052a4:	4824      	ldr	r0, [pc, #144]	; (8005338 <_printf_i+0x23c>)
 80052a6:	e7e4      	b.n	8005272 <_printf_i+0x176>
 80052a8:	4615      	mov	r5, r2
 80052aa:	e7bd      	b.n	8005228 <_printf_i+0x12c>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	6826      	ldr	r6, [r4, #0]
 80052b0:	6961      	ldr	r1, [r4, #20]
 80052b2:	1d18      	adds	r0, r3, #4
 80052b4:	6028      	str	r0, [r5, #0]
 80052b6:	0635      	lsls	r5, r6, #24
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0x1c4>
 80052bc:	6019      	str	r1, [r3, #0]
 80052be:	e002      	b.n	80052c6 <_printf_i+0x1ca>
 80052c0:	0670      	lsls	r0, r6, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0x1c0>
 80052c4:	8019      	strh	r1, [r3, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	4615      	mov	r5, r2
 80052cc:	e7bc      	b.n	8005248 <_printf_i+0x14c>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	681d      	ldr	r5, [r3, #0]
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	2100      	movs	r1, #0
 80052da:	4628      	mov	r0, r5
 80052dc:	f7fa ff78 	bl	80001d0 <memchr>
 80052e0:	b108      	cbz	r0, 80052e6 <_printf_i+0x1ea>
 80052e2:	1b40      	subs	r0, r0, r5
 80052e4:	6060      	str	r0, [r4, #4]
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	2300      	movs	r3, #0
 80052ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f0:	e7aa      	b.n	8005248 <_printf_i+0x14c>
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	462a      	mov	r2, r5
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d0ad      	beq.n	800525c <_printf_i+0x160>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	079b      	lsls	r3, r3, #30
 8005304:	d413      	bmi.n	800532e <_printf_i+0x232>
 8005306:	68e0      	ldr	r0, [r4, #12]
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	4298      	cmp	r0, r3
 800530c:	bfb8      	it	lt
 800530e:	4618      	movlt	r0, r3
 8005310:	e7a6      	b.n	8005260 <_printf_i+0x164>
 8005312:	2301      	movs	r3, #1
 8005314:	4632      	mov	r2, r6
 8005316:	4649      	mov	r1, r9
 8005318:	4640      	mov	r0, r8
 800531a:	47d0      	blx	sl
 800531c:	3001      	adds	r0, #1
 800531e:	d09d      	beq.n	800525c <_printf_i+0x160>
 8005320:	3501      	adds	r5, #1
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	9903      	ldr	r1, [sp, #12]
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	42ab      	cmp	r3, r5
 800532a:	dcf2      	bgt.n	8005312 <_printf_i+0x216>
 800532c:	e7eb      	b.n	8005306 <_printf_i+0x20a>
 800532e:	2500      	movs	r5, #0
 8005330:	f104 0619 	add.w	r6, r4, #25
 8005334:	e7f5      	b.n	8005322 <_printf_i+0x226>
 8005336:	bf00      	nop
 8005338:	08009282 	.word	0x08009282
 800533c:	08009293 	.word	0x08009293

08005340 <_scanf_float>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	b087      	sub	sp, #28
 8005346:	4617      	mov	r7, r2
 8005348:	9303      	str	r3, [sp, #12]
 800534a:	688b      	ldr	r3, [r1, #8]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005352:	bf83      	ittte	hi
 8005354:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005358:	195b      	addhi	r3, r3, r5
 800535a:	9302      	strhi	r3, [sp, #8]
 800535c:	2300      	movls	r3, #0
 800535e:	bf86      	itte	hi
 8005360:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005364:	608b      	strhi	r3, [r1, #8]
 8005366:	9302      	strls	r3, [sp, #8]
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	468b      	mov	fp, r1
 800536c:	2500      	movs	r5, #0
 800536e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005372:	f84b 3b1c 	str.w	r3, [fp], #28
 8005376:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800537a:	4680      	mov	r8, r0
 800537c:	460c      	mov	r4, r1
 800537e:	465e      	mov	r6, fp
 8005380:	46aa      	mov	sl, r5
 8005382:	46a9      	mov	r9, r5
 8005384:	9501      	str	r5, [sp, #4]
 8005386:	68a2      	ldr	r2, [r4, #8]
 8005388:	b152      	cbz	r2, 80053a0 <_scanf_float+0x60>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b4e      	cmp	r3, #78	; 0x4e
 8005390:	d864      	bhi.n	800545c <_scanf_float+0x11c>
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d83c      	bhi.n	8005410 <_scanf_float+0xd0>
 8005396:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800539a:	b2c8      	uxtb	r0, r1
 800539c:	280e      	cmp	r0, #14
 800539e:	d93a      	bls.n	8005416 <_scanf_float+0xd6>
 80053a0:	f1b9 0f00 	cmp.w	r9, #0
 80053a4:	d003      	beq.n	80053ae <_scanf_float+0x6e>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053b2:	f1ba 0f01 	cmp.w	sl, #1
 80053b6:	f200 8113 	bhi.w	80055e0 <_scanf_float+0x2a0>
 80053ba:	455e      	cmp	r6, fp
 80053bc:	f200 8105 	bhi.w	80055ca <_scanf_float+0x28a>
 80053c0:	2501      	movs	r5, #1
 80053c2:	4628      	mov	r0, r5
 80053c4:	b007      	add	sp, #28
 80053c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80053ce:	2a0d      	cmp	r2, #13
 80053d0:	d8e6      	bhi.n	80053a0 <_scanf_float+0x60>
 80053d2:	a101      	add	r1, pc, #4	; (adr r1, 80053d8 <_scanf_float+0x98>)
 80053d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053d8:	08005517 	.word	0x08005517
 80053dc:	080053a1 	.word	0x080053a1
 80053e0:	080053a1 	.word	0x080053a1
 80053e4:	080053a1 	.word	0x080053a1
 80053e8:	08005577 	.word	0x08005577
 80053ec:	0800554f 	.word	0x0800554f
 80053f0:	080053a1 	.word	0x080053a1
 80053f4:	080053a1 	.word	0x080053a1
 80053f8:	08005525 	.word	0x08005525
 80053fc:	080053a1 	.word	0x080053a1
 8005400:	080053a1 	.word	0x080053a1
 8005404:	080053a1 	.word	0x080053a1
 8005408:	080053a1 	.word	0x080053a1
 800540c:	080054dd 	.word	0x080054dd
 8005410:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005414:	e7db      	b.n	80053ce <_scanf_float+0x8e>
 8005416:	290e      	cmp	r1, #14
 8005418:	d8c2      	bhi.n	80053a0 <_scanf_float+0x60>
 800541a:	a001      	add	r0, pc, #4	; (adr r0, 8005420 <_scanf_float+0xe0>)
 800541c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005420:	080054cf 	.word	0x080054cf
 8005424:	080053a1 	.word	0x080053a1
 8005428:	080054cf 	.word	0x080054cf
 800542c:	08005563 	.word	0x08005563
 8005430:	080053a1 	.word	0x080053a1
 8005434:	0800547d 	.word	0x0800547d
 8005438:	080054b9 	.word	0x080054b9
 800543c:	080054b9 	.word	0x080054b9
 8005440:	080054b9 	.word	0x080054b9
 8005444:	080054b9 	.word	0x080054b9
 8005448:	080054b9 	.word	0x080054b9
 800544c:	080054b9 	.word	0x080054b9
 8005450:	080054b9 	.word	0x080054b9
 8005454:	080054b9 	.word	0x080054b9
 8005458:	080054b9 	.word	0x080054b9
 800545c:	2b6e      	cmp	r3, #110	; 0x6e
 800545e:	d809      	bhi.n	8005474 <_scanf_float+0x134>
 8005460:	2b60      	cmp	r3, #96	; 0x60
 8005462:	d8b2      	bhi.n	80053ca <_scanf_float+0x8a>
 8005464:	2b54      	cmp	r3, #84	; 0x54
 8005466:	d077      	beq.n	8005558 <_scanf_float+0x218>
 8005468:	2b59      	cmp	r3, #89	; 0x59
 800546a:	d199      	bne.n	80053a0 <_scanf_float+0x60>
 800546c:	2d07      	cmp	r5, #7
 800546e:	d197      	bne.n	80053a0 <_scanf_float+0x60>
 8005470:	2508      	movs	r5, #8
 8005472:	e029      	b.n	80054c8 <_scanf_float+0x188>
 8005474:	2b74      	cmp	r3, #116	; 0x74
 8005476:	d06f      	beq.n	8005558 <_scanf_float+0x218>
 8005478:	2b79      	cmp	r3, #121	; 0x79
 800547a:	e7f6      	b.n	800546a <_scanf_float+0x12a>
 800547c:	6821      	ldr	r1, [r4, #0]
 800547e:	05c8      	lsls	r0, r1, #23
 8005480:	d51a      	bpl.n	80054b8 <_scanf_float+0x178>
 8005482:	9b02      	ldr	r3, [sp, #8]
 8005484:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005488:	6021      	str	r1, [r4, #0]
 800548a:	f109 0901 	add.w	r9, r9, #1
 800548e:	b11b      	cbz	r3, 8005498 <_scanf_float+0x158>
 8005490:	3b01      	subs	r3, #1
 8005492:	3201      	adds	r2, #1
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	60a2      	str	r2, [r4, #8]
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	3b01      	subs	r3, #1
 800549c:	60a3      	str	r3, [r4, #8]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	3301      	adds	r3, #1
 80054a2:	6123      	str	r3, [r4, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	f340 8084 	ble.w	80055b8 <_scanf_float+0x278>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	e766      	b.n	8005386 <_scanf_float+0x46>
 80054b8:	eb1a 0f05 	cmn.w	sl, r5
 80054bc:	f47f af70 	bne.w	80053a0 <_scanf_float+0x60>
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80054c6:	6022      	str	r2, [r4, #0]
 80054c8:	f806 3b01 	strb.w	r3, [r6], #1
 80054cc:	e7e4      	b.n	8005498 <_scanf_float+0x158>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	0610      	lsls	r0, r2, #24
 80054d2:	f57f af65 	bpl.w	80053a0 <_scanf_float+0x60>
 80054d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054da:	e7f4      	b.n	80054c6 <_scanf_float+0x186>
 80054dc:	f1ba 0f00 	cmp.w	sl, #0
 80054e0:	d10e      	bne.n	8005500 <_scanf_float+0x1c0>
 80054e2:	f1b9 0f00 	cmp.w	r9, #0
 80054e6:	d10e      	bne.n	8005506 <_scanf_float+0x1c6>
 80054e8:	6822      	ldr	r2, [r4, #0]
 80054ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80054ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80054f2:	d108      	bne.n	8005506 <_scanf_float+0x1c6>
 80054f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	f04f 0a01 	mov.w	sl, #1
 80054fe:	e7e3      	b.n	80054c8 <_scanf_float+0x188>
 8005500:	f1ba 0f02 	cmp.w	sl, #2
 8005504:	d055      	beq.n	80055b2 <_scanf_float+0x272>
 8005506:	2d01      	cmp	r5, #1
 8005508:	d002      	beq.n	8005510 <_scanf_float+0x1d0>
 800550a:	2d04      	cmp	r5, #4
 800550c:	f47f af48 	bne.w	80053a0 <_scanf_float+0x60>
 8005510:	3501      	adds	r5, #1
 8005512:	b2ed      	uxtb	r5, r5
 8005514:	e7d8      	b.n	80054c8 <_scanf_float+0x188>
 8005516:	f1ba 0f01 	cmp.w	sl, #1
 800551a:	f47f af41 	bne.w	80053a0 <_scanf_float+0x60>
 800551e:	f04f 0a02 	mov.w	sl, #2
 8005522:	e7d1      	b.n	80054c8 <_scanf_float+0x188>
 8005524:	b97d      	cbnz	r5, 8005546 <_scanf_float+0x206>
 8005526:	f1b9 0f00 	cmp.w	r9, #0
 800552a:	f47f af3c 	bne.w	80053a6 <_scanf_float+0x66>
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005534:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005538:	f47f af39 	bne.w	80053ae <_scanf_float+0x6e>
 800553c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005540:	6022      	str	r2, [r4, #0]
 8005542:	2501      	movs	r5, #1
 8005544:	e7c0      	b.n	80054c8 <_scanf_float+0x188>
 8005546:	2d03      	cmp	r5, #3
 8005548:	d0e2      	beq.n	8005510 <_scanf_float+0x1d0>
 800554a:	2d05      	cmp	r5, #5
 800554c:	e7de      	b.n	800550c <_scanf_float+0x1cc>
 800554e:	2d02      	cmp	r5, #2
 8005550:	f47f af26 	bne.w	80053a0 <_scanf_float+0x60>
 8005554:	2503      	movs	r5, #3
 8005556:	e7b7      	b.n	80054c8 <_scanf_float+0x188>
 8005558:	2d06      	cmp	r5, #6
 800555a:	f47f af21 	bne.w	80053a0 <_scanf_float+0x60>
 800555e:	2507      	movs	r5, #7
 8005560:	e7b2      	b.n	80054c8 <_scanf_float+0x188>
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	0591      	lsls	r1, r2, #22
 8005566:	f57f af1b 	bpl.w	80053a0 <_scanf_float+0x60>
 800556a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800556e:	6022      	str	r2, [r4, #0]
 8005570:	f8cd 9004 	str.w	r9, [sp, #4]
 8005574:	e7a8      	b.n	80054c8 <_scanf_float+0x188>
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800557c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005580:	d006      	beq.n	8005590 <_scanf_float+0x250>
 8005582:	0550      	lsls	r0, r2, #21
 8005584:	f57f af0c 	bpl.w	80053a0 <_scanf_float+0x60>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	f43f af0f 	beq.w	80053ae <_scanf_float+0x6e>
 8005590:	0591      	lsls	r1, r2, #22
 8005592:	bf58      	it	pl
 8005594:	9901      	ldrpl	r1, [sp, #4]
 8005596:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800559a:	bf58      	it	pl
 800559c:	eba9 0101 	subpl.w	r1, r9, r1
 80055a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80055a4:	bf58      	it	pl
 80055a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055aa:	6022      	str	r2, [r4, #0]
 80055ac:	f04f 0900 	mov.w	r9, #0
 80055b0:	e78a      	b.n	80054c8 <_scanf_float+0x188>
 80055b2:	f04f 0a03 	mov.w	sl, #3
 80055b6:	e787      	b.n	80054c8 <_scanf_float+0x188>
 80055b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80055bc:	4639      	mov	r1, r7
 80055be:	4640      	mov	r0, r8
 80055c0:	4798      	blx	r3
 80055c2:	2800      	cmp	r0, #0
 80055c4:	f43f aedf 	beq.w	8005386 <_scanf_float+0x46>
 80055c8:	e6ea      	b.n	80053a0 <_scanf_float+0x60>
 80055ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055d2:	463a      	mov	r2, r7
 80055d4:	4640      	mov	r0, r8
 80055d6:	4798      	blx	r3
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	3b01      	subs	r3, #1
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	e6ec      	b.n	80053ba <_scanf_float+0x7a>
 80055e0:	1e6b      	subs	r3, r5, #1
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d825      	bhi.n	8005632 <_scanf_float+0x2f2>
 80055e6:	2d02      	cmp	r5, #2
 80055e8:	d836      	bhi.n	8005658 <_scanf_float+0x318>
 80055ea:	455e      	cmp	r6, fp
 80055ec:	f67f aee8 	bls.w	80053c0 <_scanf_float+0x80>
 80055f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055f8:	463a      	mov	r2, r7
 80055fa:	4640      	mov	r0, r8
 80055fc:	4798      	blx	r3
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	3b01      	subs	r3, #1
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	e7f1      	b.n	80055ea <_scanf_float+0x2aa>
 8005606:	9802      	ldr	r0, [sp, #8]
 8005608:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800560c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005610:	9002      	str	r0, [sp, #8]
 8005612:	463a      	mov	r2, r7
 8005614:	4640      	mov	r0, r8
 8005616:	4798      	blx	r3
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	3b01      	subs	r3, #1
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005622:	fa5f fa8a 	uxtb.w	sl, sl
 8005626:	f1ba 0f02 	cmp.w	sl, #2
 800562a:	d1ec      	bne.n	8005606 <_scanf_float+0x2c6>
 800562c:	3d03      	subs	r5, #3
 800562e:	b2ed      	uxtb	r5, r5
 8005630:	1b76      	subs	r6, r6, r5
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	05da      	lsls	r2, r3, #23
 8005636:	d52f      	bpl.n	8005698 <_scanf_float+0x358>
 8005638:	055b      	lsls	r3, r3, #21
 800563a:	d510      	bpl.n	800565e <_scanf_float+0x31e>
 800563c:	455e      	cmp	r6, fp
 800563e:	f67f aebf 	bls.w	80053c0 <_scanf_float+0x80>
 8005642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800564a:	463a      	mov	r2, r7
 800564c:	4640      	mov	r0, r8
 800564e:	4798      	blx	r3
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	3b01      	subs	r3, #1
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	e7f1      	b.n	800563c <_scanf_float+0x2fc>
 8005658:	46aa      	mov	sl, r5
 800565a:	9602      	str	r6, [sp, #8]
 800565c:	e7df      	b.n	800561e <_scanf_float+0x2de>
 800565e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	2965      	cmp	r1, #101	; 0x65
 8005666:	f103 33ff 	add.w	r3, r3, #4294967295
 800566a:	f106 35ff 	add.w	r5, r6, #4294967295
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	d00c      	beq.n	800568c <_scanf_float+0x34c>
 8005672:	2945      	cmp	r1, #69	; 0x45
 8005674:	d00a      	beq.n	800568c <_scanf_float+0x34c>
 8005676:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800567a:	463a      	mov	r2, r7
 800567c:	4640      	mov	r0, r8
 800567e:	4798      	blx	r3
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005686:	3b01      	subs	r3, #1
 8005688:	1eb5      	subs	r5, r6, #2
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005690:	463a      	mov	r2, r7
 8005692:	4640      	mov	r0, r8
 8005694:	4798      	blx	r3
 8005696:	462e      	mov	r6, r5
 8005698:	6825      	ldr	r5, [r4, #0]
 800569a:	f015 0510 	ands.w	r5, r5, #16
 800569e:	d158      	bne.n	8005752 <_scanf_float+0x412>
 80056a0:	7035      	strb	r5, [r6, #0]
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d11c      	bne.n	80056e8 <_scanf_float+0x3a8>
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	454b      	cmp	r3, r9
 80056b2:	eba3 0209 	sub.w	r2, r3, r9
 80056b6:	d124      	bne.n	8005702 <_scanf_float+0x3c2>
 80056b8:	2200      	movs	r2, #0
 80056ba:	4659      	mov	r1, fp
 80056bc:	4640      	mov	r0, r8
 80056be:	f002 fc2f 	bl	8007f20 <_strtod_r>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	6821      	ldr	r1, [r4, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f011 0f02 	tst.w	r1, #2
 80056cc:	ec57 6b10 	vmov	r6, r7, d0
 80056d0:	f103 0204 	add.w	r2, r3, #4
 80056d4:	d020      	beq.n	8005718 <_scanf_float+0x3d8>
 80056d6:	9903      	ldr	r1, [sp, #12]
 80056d8:	600a      	str	r2, [r1, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	e9c3 6700 	strd	r6, r7, [r3]
 80056e0:	68e3      	ldr	r3, [r4, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60e3      	str	r3, [r4, #12]
 80056e6:	e66c      	b.n	80053c2 <_scanf_float+0x82>
 80056e8:	9b04      	ldr	r3, [sp, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0e4      	beq.n	80056b8 <_scanf_float+0x378>
 80056ee:	9905      	ldr	r1, [sp, #20]
 80056f0:	230a      	movs	r3, #10
 80056f2:	462a      	mov	r2, r5
 80056f4:	3101      	adds	r1, #1
 80056f6:	4640      	mov	r0, r8
 80056f8:	f002 fc9a 	bl	8008030 <_strtol_r>
 80056fc:	9b04      	ldr	r3, [sp, #16]
 80056fe:	9e05      	ldr	r6, [sp, #20]
 8005700:	1ac2      	subs	r2, r0, r3
 8005702:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005706:	429e      	cmp	r6, r3
 8005708:	bf28      	it	cs
 800570a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800570e:	4912      	ldr	r1, [pc, #72]	; (8005758 <_scanf_float+0x418>)
 8005710:	4630      	mov	r0, r6
 8005712:	f000 f8e7 	bl	80058e4 <siprintf>
 8005716:	e7cf      	b.n	80056b8 <_scanf_float+0x378>
 8005718:	f011 0f04 	tst.w	r1, #4
 800571c:	9903      	ldr	r1, [sp, #12]
 800571e:	600a      	str	r2, [r1, #0]
 8005720:	d1db      	bne.n	80056da <_scanf_float+0x39a>
 8005722:	f8d3 8000 	ldr.w	r8, [r3]
 8005726:	ee10 2a10 	vmov	r2, s0
 800572a:	ee10 0a10 	vmov	r0, s0
 800572e:	463b      	mov	r3, r7
 8005730:	4639      	mov	r1, r7
 8005732:	f7fb f9fb 	bl	8000b2c <__aeabi_dcmpun>
 8005736:	b128      	cbz	r0, 8005744 <_scanf_float+0x404>
 8005738:	4808      	ldr	r0, [pc, #32]	; (800575c <_scanf_float+0x41c>)
 800573a:	f000 f9b7 	bl	8005aac <nanf>
 800573e:	ed88 0a00 	vstr	s0, [r8]
 8005742:	e7cd      	b.n	80056e0 <_scanf_float+0x3a0>
 8005744:	4630      	mov	r0, r6
 8005746:	4639      	mov	r1, r7
 8005748:	f7fb fa4e 	bl	8000be8 <__aeabi_d2f>
 800574c:	f8c8 0000 	str.w	r0, [r8]
 8005750:	e7c6      	b.n	80056e0 <_scanf_float+0x3a0>
 8005752:	2500      	movs	r5, #0
 8005754:	e635      	b.n	80053c2 <_scanf_float+0x82>
 8005756:	bf00      	nop
 8005758:	080092a4 	.word	0x080092a4
 800575c:	08009635 	.word	0x08009635

08005760 <std>:
 8005760:	2300      	movs	r3, #0
 8005762:	b510      	push	{r4, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	e9c0 3300 	strd	r3, r3, [r0]
 800576a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800576e:	6083      	str	r3, [r0, #8]
 8005770:	8181      	strh	r1, [r0, #12]
 8005772:	6643      	str	r3, [r0, #100]	; 0x64
 8005774:	81c2      	strh	r2, [r0, #14]
 8005776:	6183      	str	r3, [r0, #24]
 8005778:	4619      	mov	r1, r3
 800577a:	2208      	movs	r2, #8
 800577c:	305c      	adds	r0, #92	; 0x5c
 800577e:	f000 f914 	bl	80059aa <memset>
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <std+0x58>)
 8005784:	6263      	str	r3, [r4, #36]	; 0x24
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <std+0x5c>)
 8005788:	62a3      	str	r3, [r4, #40]	; 0x28
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <std+0x60>)
 800578c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <std+0x64>)
 8005790:	6323      	str	r3, [r4, #48]	; 0x30
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <std+0x68>)
 8005794:	6224      	str	r4, [r4, #32]
 8005796:	429c      	cmp	r4, r3
 8005798:	d006      	beq.n	80057a8 <std+0x48>
 800579a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800579e:	4294      	cmp	r4, r2
 80057a0:	d002      	beq.n	80057a8 <std+0x48>
 80057a2:	33d0      	adds	r3, #208	; 0xd0
 80057a4:	429c      	cmp	r4, r3
 80057a6:	d105      	bne.n	80057b4 <std+0x54>
 80057a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b0:	f000 b978 	b.w	8005aa4 <__retarget_lock_init_recursive>
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	bf00      	nop
 80057b8:	08005925 	.word	0x08005925
 80057bc:	08005947 	.word	0x08005947
 80057c0:	0800597f 	.word	0x0800597f
 80057c4:	080059a3 	.word	0x080059a3
 80057c8:	2000031c 	.word	0x2000031c

080057cc <stdio_exit_handler>:
 80057cc:	4a02      	ldr	r2, [pc, #8]	; (80057d8 <stdio_exit_handler+0xc>)
 80057ce:	4903      	ldr	r1, [pc, #12]	; (80057dc <stdio_exit_handler+0x10>)
 80057d0:	4803      	ldr	r0, [pc, #12]	; (80057e0 <stdio_exit_handler+0x14>)
 80057d2:	f000 b869 	b.w	80058a8 <_fwalk_sglue>
 80057d6:	bf00      	nop
 80057d8:	2000000c 	.word	0x2000000c
 80057dc:	080083f1 	.word	0x080083f1
 80057e0:	20000018 	.word	0x20000018

080057e4 <cleanup_stdio>:
 80057e4:	6841      	ldr	r1, [r0, #4]
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <cleanup_stdio+0x34>)
 80057e8:	4299      	cmp	r1, r3
 80057ea:	b510      	push	{r4, lr}
 80057ec:	4604      	mov	r4, r0
 80057ee:	d001      	beq.n	80057f4 <cleanup_stdio+0x10>
 80057f0:	f002 fdfe 	bl	80083f0 <_fflush_r>
 80057f4:	68a1      	ldr	r1, [r4, #8]
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <cleanup_stdio+0x38>)
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d002      	beq.n	8005802 <cleanup_stdio+0x1e>
 80057fc:	4620      	mov	r0, r4
 80057fe:	f002 fdf7 	bl	80083f0 <_fflush_r>
 8005802:	68e1      	ldr	r1, [r4, #12]
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <cleanup_stdio+0x3c>)
 8005806:	4299      	cmp	r1, r3
 8005808:	d004      	beq.n	8005814 <cleanup_stdio+0x30>
 800580a:	4620      	mov	r0, r4
 800580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005810:	f002 bdee 	b.w	80083f0 <_fflush_r>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	bf00      	nop
 8005818:	2000031c 	.word	0x2000031c
 800581c:	20000384 	.word	0x20000384
 8005820:	200003ec 	.word	0x200003ec

08005824 <global_stdio_init.part.0>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <global_stdio_init.part.0+0x30>)
 8005828:	4c0b      	ldr	r4, [pc, #44]	; (8005858 <global_stdio_init.part.0+0x34>)
 800582a:	4a0c      	ldr	r2, [pc, #48]	; (800585c <global_stdio_init.part.0+0x38>)
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	4620      	mov	r0, r4
 8005830:	2200      	movs	r2, #0
 8005832:	2104      	movs	r1, #4
 8005834:	f7ff ff94 	bl	8005760 <std>
 8005838:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800583c:	2201      	movs	r2, #1
 800583e:	2109      	movs	r1, #9
 8005840:	f7ff ff8e 	bl	8005760 <std>
 8005844:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005848:	2202      	movs	r2, #2
 800584a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800584e:	2112      	movs	r1, #18
 8005850:	f7ff bf86 	b.w	8005760 <std>
 8005854:	20000454 	.word	0x20000454
 8005858:	2000031c 	.word	0x2000031c
 800585c:	080057cd 	.word	0x080057cd

08005860 <__sfp_lock_acquire>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__sfp_lock_acquire+0x8>)
 8005862:	f000 b920 	b.w	8005aa6 <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	2000045d 	.word	0x2000045d

0800586c <__sfp_lock_release>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__sfp_lock_release+0x8>)
 800586e:	f000 b91b 	b.w	8005aa8 <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	2000045d 	.word	0x2000045d

08005878 <__sinit>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	f7ff fff0 	bl	8005860 <__sfp_lock_acquire>
 8005880:	6a23      	ldr	r3, [r4, #32]
 8005882:	b11b      	cbz	r3, 800588c <__sinit+0x14>
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f7ff bff0 	b.w	800586c <__sfp_lock_release>
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <__sinit+0x28>)
 800588e:	6223      	str	r3, [r4, #32]
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__sinit+0x2c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f5      	bne.n	8005884 <__sinit+0xc>
 8005898:	f7ff ffc4 	bl	8005824 <global_stdio_init.part.0>
 800589c:	e7f2      	b.n	8005884 <__sinit+0xc>
 800589e:	bf00      	nop
 80058a0:	080057e5 	.word	0x080057e5
 80058a4:	20000454 	.word	0x20000454

080058a8 <_fwalk_sglue>:
 80058a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ac:	4607      	mov	r7, r0
 80058ae:	4688      	mov	r8, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	2600      	movs	r6, #0
 80058b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b8:	f1b9 0901 	subs.w	r9, r9, #1
 80058bc:	d505      	bpl.n	80058ca <_fwalk_sglue+0x22>
 80058be:	6824      	ldr	r4, [r4, #0]
 80058c0:	2c00      	cmp	r4, #0
 80058c2:	d1f7      	bne.n	80058b4 <_fwalk_sglue+0xc>
 80058c4:	4630      	mov	r0, r6
 80058c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ca:	89ab      	ldrh	r3, [r5, #12]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d907      	bls.n	80058e0 <_fwalk_sglue+0x38>
 80058d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d4:	3301      	adds	r3, #1
 80058d6:	d003      	beq.n	80058e0 <_fwalk_sglue+0x38>
 80058d8:	4629      	mov	r1, r5
 80058da:	4638      	mov	r0, r7
 80058dc:	47c0      	blx	r8
 80058de:	4306      	orrs	r6, r0
 80058e0:	3568      	adds	r5, #104	; 0x68
 80058e2:	e7e9      	b.n	80058b8 <_fwalk_sglue+0x10>

080058e4 <siprintf>:
 80058e4:	b40e      	push	{r1, r2, r3}
 80058e6:	b500      	push	{lr}
 80058e8:	b09c      	sub	sp, #112	; 0x70
 80058ea:	ab1d      	add	r3, sp, #116	; 0x74
 80058ec:	9002      	str	r0, [sp, #8]
 80058ee:	9006      	str	r0, [sp, #24]
 80058f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058f4:	4809      	ldr	r0, [pc, #36]	; (800591c <siprintf+0x38>)
 80058f6:	9107      	str	r1, [sp, #28]
 80058f8:	9104      	str	r1, [sp, #16]
 80058fa:	4909      	ldr	r1, [pc, #36]	; (8005920 <siprintf+0x3c>)
 80058fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005900:	9105      	str	r1, [sp, #20]
 8005902:	6800      	ldr	r0, [r0, #0]
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	a902      	add	r1, sp, #8
 8005908:	f002 fbee 	bl	80080e8 <_svfiprintf_r>
 800590c:	9b02      	ldr	r3, [sp, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	b01c      	add	sp, #112	; 0x70
 8005914:	f85d eb04 	ldr.w	lr, [sp], #4
 8005918:	b003      	add	sp, #12
 800591a:	4770      	bx	lr
 800591c:	20000064 	.word	0x20000064
 8005920:	ffff0208 	.word	0xffff0208

08005924 <__sread>:
 8005924:	b510      	push	{r4, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	f000 f86c 	bl	8005a08 <_read_r>
 8005930:	2800      	cmp	r0, #0
 8005932:	bfab      	itete	ge
 8005934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005936:	89a3      	ldrhlt	r3, [r4, #12]
 8005938:	181b      	addge	r3, r3, r0
 800593a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800593e:	bfac      	ite	ge
 8005940:	6563      	strge	r3, [r4, #84]	; 0x54
 8005942:	81a3      	strhlt	r3, [r4, #12]
 8005944:	bd10      	pop	{r4, pc}

08005946 <__swrite>:
 8005946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	461f      	mov	r7, r3
 800594c:	898b      	ldrh	r3, [r1, #12]
 800594e:	05db      	lsls	r3, r3, #23
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	4616      	mov	r6, r2
 8005956:	d505      	bpl.n	8005964 <__swrite+0x1e>
 8005958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595c:	2302      	movs	r3, #2
 800595e:	2200      	movs	r2, #0
 8005960:	f000 f840 	bl	80059e4 <_lseek_r>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800596a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	4632      	mov	r2, r6
 8005972:	463b      	mov	r3, r7
 8005974:	4628      	mov	r0, r5
 8005976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597a:	f000 b857 	b.w	8005a2c <_write_r>

0800597e <__sseek>:
 800597e:	b510      	push	{r4, lr}
 8005980:	460c      	mov	r4, r1
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 f82d 	bl	80059e4 <_lseek_r>
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	bf15      	itete	ne
 8005990:	6560      	strne	r0, [r4, #84]	; 0x54
 8005992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800599a:	81a3      	strheq	r3, [r4, #12]
 800599c:	bf18      	it	ne
 800599e:	81a3      	strhne	r3, [r4, #12]
 80059a0:	bd10      	pop	{r4, pc}

080059a2 <__sclose>:
 80059a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a6:	f000 b80d 	b.w	80059c4 <_close_r>

080059aa <memset>:
 80059aa:	4402      	add	r2, r0
 80059ac:	4603      	mov	r3, r0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d100      	bne.n	80059b4 <memset+0xa>
 80059b2:	4770      	bx	lr
 80059b4:	f803 1b01 	strb.w	r1, [r3], #1
 80059b8:	e7f9      	b.n	80059ae <memset+0x4>
	...

080059bc <_localeconv_r>:
 80059bc:	4800      	ldr	r0, [pc, #0]	; (80059c0 <_localeconv_r+0x4>)
 80059be:	4770      	bx	lr
 80059c0:	20000158 	.word	0x20000158

080059c4 <_close_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	; (80059e0 <_close_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fb fd2b 	bl	800142a <_close>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_close_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_close_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	20000458 	.word	0x20000458

080059e4 <_lseek_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d07      	ldr	r5, [pc, #28]	; (8005a04 <_lseek_r+0x20>)
 80059e8:	4604      	mov	r4, r0
 80059ea:	4608      	mov	r0, r1
 80059ec:	4611      	mov	r1, r2
 80059ee:	2200      	movs	r2, #0
 80059f0:	602a      	str	r2, [r5, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f7fb fd40 	bl	8001478 <_lseek>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d102      	bne.n	8005a02 <_lseek_r+0x1e>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	b103      	cbz	r3, 8005a02 <_lseek_r+0x1e>
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	20000458 	.word	0x20000458

08005a08 <_read_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d07      	ldr	r5, [pc, #28]	; (8005a28 <_read_r+0x20>)
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	4608      	mov	r0, r1
 8005a10:	4611      	mov	r1, r2
 8005a12:	2200      	movs	r2, #0
 8005a14:	602a      	str	r2, [r5, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f7fb fcce 	bl	80013b8 <_read>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_read_r+0x1e>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_read_r+0x1e>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20000458 	.word	0x20000458

08005a2c <_write_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d07      	ldr	r5, [pc, #28]	; (8005a4c <_write_r+0x20>)
 8005a30:	4604      	mov	r4, r0
 8005a32:	4608      	mov	r0, r1
 8005a34:	4611      	mov	r1, r2
 8005a36:	2200      	movs	r2, #0
 8005a38:	602a      	str	r2, [r5, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7fb fcd9 	bl	80013f2 <_write>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_write_r+0x1e>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_write_r+0x1e>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	20000458 	.word	0x20000458

08005a50 <__errno>:
 8005a50:	4b01      	ldr	r3, [pc, #4]	; (8005a58 <__errno+0x8>)
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000064 	.word	0x20000064

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <__libc_init_array+0x38>)
 8005a60:	4c0d      	ldr	r4, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	2600      	movs	r6, #0
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	4d0b      	ldr	r5, [pc, #44]	; (8005a9c <__libc_init_array+0x40>)
 8005a6e:	4c0c      	ldr	r4, [pc, #48]	; (8005aa0 <__libc_init_array+0x44>)
 8005a70:	f003 fbd6 	bl	8009220 <_init>
 8005a74:	1b64      	subs	r4, r4, r5
 8005a76:	10a4      	asrs	r4, r4, #2
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	08009698 	.word	0x08009698
 8005a98:	08009698 	.word	0x08009698
 8005a9c:	08009698 	.word	0x08009698
 8005aa0:	0800969c 	.word	0x0800969c

08005aa4 <__retarget_lock_init_recursive>:
 8005aa4:	4770      	bx	lr

08005aa6 <__retarget_lock_acquire_recursive>:
 8005aa6:	4770      	bx	lr

08005aa8 <__retarget_lock_release_recursive>:
 8005aa8:	4770      	bx	lr
	...

08005aac <nanf>:
 8005aac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ab4 <nanf+0x8>
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	7fc00000 	.word	0x7fc00000

08005ab8 <quorem>:
 8005ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	6903      	ldr	r3, [r0, #16]
 8005abe:	690c      	ldr	r4, [r1, #16]
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	db7e      	blt.n	8005bc4 <quorem+0x10c>
 8005ac6:	3c01      	subs	r4, #1
 8005ac8:	f101 0814 	add.w	r8, r1, #20
 8005acc:	f100 0514 	add.w	r5, r0, #20
 8005ad0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ae6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005aea:	fbb2 f6f3 	udiv	r6, r2, r3
 8005aee:	d331      	bcc.n	8005b54 <quorem+0x9c>
 8005af0:	f04f 0e00 	mov.w	lr, #0
 8005af4:	4640      	mov	r0, r8
 8005af6:	46ac      	mov	ip, r5
 8005af8:	46f2      	mov	sl, lr
 8005afa:	f850 2b04 	ldr.w	r2, [r0], #4
 8005afe:	b293      	uxth	r3, r2
 8005b00:	fb06 e303 	mla	r3, r6, r3, lr
 8005b04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b08:	0c1a      	lsrs	r2, r3, #16
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	ebaa 0303 	sub.w	r3, sl, r3
 8005b10:	f8dc a000 	ldr.w	sl, [ip]
 8005b14:	fa13 f38a 	uxtah	r3, r3, sl
 8005b18:	fb06 220e 	mla	r2, r6, lr, r2
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	9b00      	ldr	r3, [sp, #0]
 8005b20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b24:	b292      	uxth	r2, r2
 8005b26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005b32:	4581      	cmp	r9, r0
 8005b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b38:	f84c 3b04 	str.w	r3, [ip], #4
 8005b3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b40:	d2db      	bcs.n	8005afa <quorem+0x42>
 8005b42:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b46:	b92b      	cbnz	r3, 8005b54 <quorem+0x9c>
 8005b48:	9b01      	ldr	r3, [sp, #4]
 8005b4a:	3b04      	subs	r3, #4
 8005b4c:	429d      	cmp	r5, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	d32c      	bcc.n	8005bac <quorem+0xf4>
 8005b52:	613c      	str	r4, [r7, #16]
 8005b54:	4638      	mov	r0, r7
 8005b56:	f001 f9ef 	bl	8006f38 <__mcmp>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	db22      	blt.n	8005ba4 <quorem+0xec>
 8005b5e:	3601      	adds	r6, #1
 8005b60:	4629      	mov	r1, r5
 8005b62:	2000      	movs	r0, #0
 8005b64:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b68:	f8d1 c000 	ldr.w	ip, [r1]
 8005b6c:	b293      	uxth	r3, r2
 8005b6e:	1ac3      	subs	r3, r0, r3
 8005b70:	0c12      	lsrs	r2, r2, #16
 8005b72:	fa13 f38c 	uxtah	r3, r3, ip
 8005b76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b84:	45c1      	cmp	r9, r8
 8005b86:	f841 3b04 	str.w	r3, [r1], #4
 8005b8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b8e:	d2e9      	bcs.n	8005b64 <quorem+0xac>
 8005b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b98:	b922      	cbnz	r2, 8005ba4 <quorem+0xec>
 8005b9a:	3b04      	subs	r3, #4
 8005b9c:	429d      	cmp	r5, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	d30a      	bcc.n	8005bb8 <quorem+0x100>
 8005ba2:	613c      	str	r4, [r7, #16]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	b003      	add	sp, #12
 8005ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	3b04      	subs	r3, #4
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d1ce      	bne.n	8005b52 <quorem+0x9a>
 8005bb4:	3c01      	subs	r4, #1
 8005bb6:	e7c9      	b.n	8005b4c <quorem+0x94>
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	d1f0      	bne.n	8005ba2 <quorem+0xea>
 8005bc0:	3c01      	subs	r4, #1
 8005bc2:	e7eb      	b.n	8005b9c <quorem+0xe4>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e7ee      	b.n	8005ba6 <quorem+0xee>

08005bc8 <_dtoa_r>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	ed2d 8b04 	vpush	{d8-d9}
 8005bd0:	69c5      	ldr	r5, [r0, #28]
 8005bd2:	b093      	sub	sp, #76	; 0x4c
 8005bd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bd8:	ec57 6b10 	vmov	r6, r7, d0
 8005bdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005be0:	9107      	str	r1, [sp, #28]
 8005be2:	4604      	mov	r4, r0
 8005be4:	920a      	str	r2, [sp, #40]	; 0x28
 8005be6:	930d      	str	r3, [sp, #52]	; 0x34
 8005be8:	b975      	cbnz	r5, 8005c08 <_dtoa_r+0x40>
 8005bea:	2010      	movs	r0, #16
 8005bec:	f000 fe2a 	bl	8006844 <malloc>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	61e0      	str	r0, [r4, #28]
 8005bf4:	b920      	cbnz	r0, 8005c00 <_dtoa_r+0x38>
 8005bf6:	4bae      	ldr	r3, [pc, #696]	; (8005eb0 <_dtoa_r+0x2e8>)
 8005bf8:	21ef      	movs	r1, #239	; 0xef
 8005bfa:	48ae      	ldr	r0, [pc, #696]	; (8005eb4 <_dtoa_r+0x2ec>)
 8005bfc:	f002 fc74 	bl	80084e8 <__assert_func>
 8005c00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c04:	6005      	str	r5, [r0, #0]
 8005c06:	60c5      	str	r5, [r0, #12]
 8005c08:	69e3      	ldr	r3, [r4, #28]
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	b151      	cbz	r1, 8005c24 <_dtoa_r+0x5c>
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	604a      	str	r2, [r1, #4]
 8005c12:	2301      	movs	r3, #1
 8005c14:	4093      	lsls	r3, r2
 8005c16:	608b      	str	r3, [r1, #8]
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 ff07 	bl	8006a2c <_Bfree>
 8005c1e:	69e3      	ldr	r3, [r4, #28]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	1e3b      	subs	r3, r7, #0
 8005c26:	bfbb      	ittet	lt
 8005c28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	9303      	strlt	r3, [sp, #12]
 8005c2e:	2300      	movge	r3, #0
 8005c30:	2201      	movlt	r2, #1
 8005c32:	bfac      	ite	ge
 8005c34:	f8c8 3000 	strge.w	r3, [r8]
 8005c38:	f8c8 2000 	strlt.w	r2, [r8]
 8005c3c:	4b9e      	ldr	r3, [pc, #632]	; (8005eb8 <_dtoa_r+0x2f0>)
 8005c3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c42:	ea33 0308 	bics.w	r3, r3, r8
 8005c46:	d11b      	bne.n	8005c80 <_dtoa_r+0xb8>
 8005c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c54:	4333      	orrs	r3, r6
 8005c56:	f000 8593 	beq.w	8006780 <_dtoa_r+0xbb8>
 8005c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c5c:	b963      	cbnz	r3, 8005c78 <_dtoa_r+0xb0>
 8005c5e:	4b97      	ldr	r3, [pc, #604]	; (8005ebc <_dtoa_r+0x2f4>)
 8005c60:	e027      	b.n	8005cb2 <_dtoa_r+0xea>
 8005c62:	4b97      	ldr	r3, [pc, #604]	; (8005ec0 <_dtoa_r+0x2f8>)
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	9800      	ldr	r0, [sp, #0]
 8005c6e:	b013      	add	sp, #76	; 0x4c
 8005c70:	ecbd 8b04 	vpop	{d8-d9}
 8005c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c78:	4b90      	ldr	r3, [pc, #576]	; (8005ebc <_dtoa_r+0x2f4>)
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	3303      	adds	r3, #3
 8005c7e:	e7f3      	b.n	8005c68 <_dtoa_r+0xa0>
 8005c80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	ec51 0b17 	vmov	r0, r1, d7
 8005c8a:	eeb0 8a47 	vmov.f32	s16, s14
 8005c8e:	eef0 8a67 	vmov.f32	s17, s15
 8005c92:	2300      	movs	r3, #0
 8005c94:	f7fa ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c98:	4681      	mov	r9, r0
 8005c9a:	b160      	cbz	r0, 8005cb6 <_dtoa_r+0xee>
 8005c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8568 	beq.w	800677a <_dtoa_r+0xbb2>
 8005caa:	4b86      	ldr	r3, [pc, #536]	; (8005ec4 <_dtoa_r+0x2fc>)
 8005cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	e7da      	b.n	8005c6c <_dtoa_r+0xa4>
 8005cb6:	aa10      	add	r2, sp, #64	; 0x40
 8005cb8:	a911      	add	r1, sp, #68	; 0x44
 8005cba:	4620      	mov	r0, r4
 8005cbc:	eeb0 0a48 	vmov.f32	s0, s16
 8005cc0:	eef0 0a68 	vmov.f32	s1, s17
 8005cc4:	f001 fa4e 	bl	8007164 <__d2b>
 8005cc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ccc:	4682      	mov	sl, r0
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	d07f      	beq.n	8005dd2 <_dtoa_r+0x20a>
 8005cd2:	ee18 3a90 	vmov	r3, s17
 8005cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005cde:	ec51 0b18 	vmov	r0, r1, d8
 8005ce2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005cee:	4619      	mov	r1, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4b75      	ldr	r3, [pc, #468]	; (8005ec8 <_dtoa_r+0x300>)
 8005cf4:	f7fa fac8 	bl	8000288 <__aeabi_dsub>
 8005cf8:	a367      	add	r3, pc, #412	; (adr r3, 8005e98 <_dtoa_r+0x2d0>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fc7b 	bl	80005f8 <__aeabi_dmul>
 8005d02:	a367      	add	r3, pc, #412	; (adr r3, 8005ea0 <_dtoa_r+0x2d8>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f7fa fac0 	bl	800028c <__adddf3>
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	4628      	mov	r0, r5
 8005d10:	460f      	mov	r7, r1
 8005d12:	f7fa fc07 	bl	8000524 <__aeabi_i2d>
 8005d16:	a364      	add	r3, pc, #400	; (adr r3, 8005ea8 <_dtoa_r+0x2e0>)
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fc6c 	bl	80005f8 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa fab0 	bl	800028c <__adddf3>
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	460f      	mov	r7, r1
 8005d30:	f7fa ff12 	bl	8000b58 <__aeabi_d2iz>
 8005d34:	2200      	movs	r2, #0
 8005d36:	4683      	mov	fp, r0
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	f7fa fecd 	bl	8000adc <__aeabi_dcmplt>
 8005d42:	b148      	cbz	r0, 8005d58 <_dtoa_r+0x190>
 8005d44:	4658      	mov	r0, fp
 8005d46:	f7fa fbed 	bl	8000524 <__aeabi_i2d>
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	f7fa febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d52:	b908      	cbnz	r0, 8005d58 <_dtoa_r+0x190>
 8005d54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d58:	f1bb 0f16 	cmp.w	fp, #22
 8005d5c:	d857      	bhi.n	8005e0e <_dtoa_r+0x246>
 8005d5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ecc <_dtoa_r+0x304>)
 8005d60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	ec51 0b18 	vmov	r0, r1, d8
 8005d6c:	f7fa feb6 	bl	8000adc <__aeabi_dcmplt>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d04e      	beq.n	8005e12 <_dtoa_r+0x24a>
 8005d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d78:	2300      	movs	r3, #0
 8005d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d7e:	1b5b      	subs	r3, r3, r5
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	bf45      	ittet	mi
 8005d84:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d88:	9305      	strmi	r3, [sp, #20]
 8005d8a:	2300      	movpl	r3, #0
 8005d8c:	2300      	movmi	r3, #0
 8005d8e:	9206      	str	r2, [sp, #24]
 8005d90:	bf54      	ite	pl
 8005d92:	9305      	strpl	r3, [sp, #20]
 8005d94:	9306      	strmi	r3, [sp, #24]
 8005d96:	f1bb 0f00 	cmp.w	fp, #0
 8005d9a:	db3c      	blt.n	8005e16 <_dtoa_r+0x24e>
 8005d9c:	9b06      	ldr	r3, [sp, #24]
 8005d9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005da2:	445b      	add	r3, fp
 8005da4:	9306      	str	r3, [sp, #24]
 8005da6:	2300      	movs	r3, #0
 8005da8:	9308      	str	r3, [sp, #32]
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d868      	bhi.n	8005e82 <_dtoa_r+0x2ba>
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	bfc4      	itt	gt
 8005db4:	3b04      	subgt	r3, #4
 8005db6:	9307      	strgt	r3, [sp, #28]
 8005db8:	9b07      	ldr	r3, [sp, #28]
 8005dba:	f1a3 0302 	sub.w	r3, r3, #2
 8005dbe:	bfcc      	ite	gt
 8005dc0:	2500      	movgt	r5, #0
 8005dc2:	2501      	movle	r5, #1
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	f200 8085 	bhi.w	8005ed4 <_dtoa_r+0x30c>
 8005dca:	e8df f003 	tbb	[pc, r3]
 8005dce:	3b2e      	.short	0x3b2e
 8005dd0:	5839      	.short	0x5839
 8005dd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005dd6:	441d      	add	r5, r3
 8005dd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	bfc1      	itttt	gt
 8005de0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005de4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005de8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005dec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005df0:	bfd6      	itet	le
 8005df2:	f1c3 0320 	rsble	r3, r3, #32
 8005df6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005dfa:	fa06 f003 	lslle.w	r0, r6, r3
 8005dfe:	f7fa fb81 	bl	8000504 <__aeabi_ui2d>
 8005e02:	2201      	movs	r2, #1
 8005e04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005e08:	3d01      	subs	r5, #1
 8005e0a:	920e      	str	r2, [sp, #56]	; 0x38
 8005e0c:	e76f      	b.n	8005cee <_dtoa_r+0x126>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e7b3      	b.n	8005d7a <_dtoa_r+0x1b2>
 8005e12:	900c      	str	r0, [sp, #48]	; 0x30
 8005e14:	e7b2      	b.n	8005d7c <_dtoa_r+0x1b4>
 8005e16:	9b05      	ldr	r3, [sp, #20]
 8005e18:	eba3 030b 	sub.w	r3, r3, fp
 8005e1c:	9305      	str	r3, [sp, #20]
 8005e1e:	f1cb 0300 	rsb	r3, fp, #0
 8005e22:	9308      	str	r3, [sp, #32]
 8005e24:	2300      	movs	r3, #0
 8005e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e28:	e7bf      	b.n	8005daa <_dtoa_r+0x1e2>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	dc52      	bgt.n	8005eda <_dtoa_r+0x312>
 8005e34:	2301      	movs	r3, #1
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e3e:	e00b      	b.n	8005e58 <_dtoa_r+0x290>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7f3      	b.n	8005e2c <_dtoa_r+0x264>
 8005e44:	2300      	movs	r3, #0
 8005e46:	9309      	str	r3, [sp, #36]	; 0x24
 8005e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e4a:	445b      	add	r3, fp
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	bfb8      	it	lt
 8005e56:	2301      	movlt	r3, #1
 8005e58:	69e0      	ldr	r0, [r4, #28]
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	f102 0614 	add.w	r6, r2, #20
 8005e62:	429e      	cmp	r6, r3
 8005e64:	d93d      	bls.n	8005ee2 <_dtoa_r+0x31a>
 8005e66:	6041      	str	r1, [r0, #4]
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 fd9f 	bl	80069ac <_Balloc>
 8005e6e:	9000      	str	r0, [sp, #0]
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d139      	bne.n	8005ee8 <_dtoa_r+0x320>
 8005e74:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <_dtoa_r+0x308>)
 8005e76:	4602      	mov	r2, r0
 8005e78:	f240 11af 	movw	r1, #431	; 0x1af
 8005e7c:	e6bd      	b.n	8005bfa <_dtoa_r+0x32>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e7e1      	b.n	8005e46 <_dtoa_r+0x27e>
 8005e82:	2501      	movs	r5, #1
 8005e84:	2300      	movs	r3, #0
 8005e86:	9307      	str	r3, [sp, #28]
 8005e88:	9509      	str	r5, [sp, #36]	; 0x24
 8005e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	2200      	movs	r2, #0
 8005e94:	2312      	movs	r3, #18
 8005e96:	e7d1      	b.n	8005e3c <_dtoa_r+0x274>
 8005e98:	636f4361 	.word	0x636f4361
 8005e9c:	3fd287a7 	.word	0x3fd287a7
 8005ea0:	8b60c8b3 	.word	0x8b60c8b3
 8005ea4:	3fc68a28 	.word	0x3fc68a28
 8005ea8:	509f79fb 	.word	0x509f79fb
 8005eac:	3fd34413 	.word	0x3fd34413
 8005eb0:	080092b6 	.word	0x080092b6
 8005eb4:	080092cd 	.word	0x080092cd
 8005eb8:	7ff00000 	.word	0x7ff00000
 8005ebc:	080092b2 	.word	0x080092b2
 8005ec0:	080092a9 	.word	0x080092a9
 8005ec4:	08009281 	.word	0x08009281
 8005ec8:	3ff80000 	.word	0x3ff80000
 8005ecc:	080093b8 	.word	0x080093b8
 8005ed0:	08009325 	.word	0x08009325
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed8:	e7d7      	b.n	8005e8a <_dtoa_r+0x2c2>
 8005eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	9304      	str	r3, [sp, #16]
 8005ee0:	e7ba      	b.n	8005e58 <_dtoa_r+0x290>
 8005ee2:	3101      	adds	r1, #1
 8005ee4:	0052      	lsls	r2, r2, #1
 8005ee6:	e7ba      	b.n	8005e5e <_dtoa_r+0x296>
 8005ee8:	69e3      	ldr	r3, [r4, #28]
 8005eea:	9a00      	ldr	r2, [sp, #0]
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	2b0e      	cmp	r3, #14
 8005ef2:	f200 80a8 	bhi.w	8006046 <_dtoa_r+0x47e>
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	f000 80a5 	beq.w	8006046 <_dtoa_r+0x47e>
 8005efc:	f1bb 0f00 	cmp.w	fp, #0
 8005f00:	dd38      	ble.n	8005f74 <_dtoa_r+0x3ac>
 8005f02:	4bc0      	ldr	r3, [pc, #768]	; (8006204 <_dtoa_r+0x63c>)
 8005f04:	f00b 020f 	and.w	r2, fp, #15
 8005f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005f10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005f14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005f18:	d019      	beq.n	8005f4e <_dtoa_r+0x386>
 8005f1a:	4bbb      	ldr	r3, [pc, #748]	; (8006208 <_dtoa_r+0x640>)
 8005f1c:	ec51 0b18 	vmov	r0, r1, d8
 8005f20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f24:	f7fa fc92 	bl	800084c <__aeabi_ddiv>
 8005f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2c:	f008 080f 	and.w	r8, r8, #15
 8005f30:	2503      	movs	r5, #3
 8005f32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006208 <_dtoa_r+0x640>
 8005f36:	f1b8 0f00 	cmp.w	r8, #0
 8005f3a:	d10a      	bne.n	8005f52 <_dtoa_r+0x38a>
 8005f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f40:	4632      	mov	r2, r6
 8005f42:	463b      	mov	r3, r7
 8005f44:	f7fa fc82 	bl	800084c <__aeabi_ddiv>
 8005f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f4c:	e02b      	b.n	8005fa6 <_dtoa_r+0x3de>
 8005f4e:	2502      	movs	r5, #2
 8005f50:	e7ef      	b.n	8005f32 <_dtoa_r+0x36a>
 8005f52:	f018 0f01 	tst.w	r8, #1
 8005f56:	d008      	beq.n	8005f6a <_dtoa_r+0x3a2>
 8005f58:	4630      	mov	r0, r6
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f60:	f7fa fb4a 	bl	80005f8 <__aeabi_dmul>
 8005f64:	3501      	adds	r5, #1
 8005f66:	4606      	mov	r6, r0
 8005f68:	460f      	mov	r7, r1
 8005f6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f6e:	f109 0908 	add.w	r9, r9, #8
 8005f72:	e7e0      	b.n	8005f36 <_dtoa_r+0x36e>
 8005f74:	f000 809f 	beq.w	80060b6 <_dtoa_r+0x4ee>
 8005f78:	f1cb 0600 	rsb	r6, fp, #0
 8005f7c:	4ba1      	ldr	r3, [pc, #644]	; (8006204 <_dtoa_r+0x63c>)
 8005f7e:	4fa2      	ldr	r7, [pc, #648]	; (8006208 <_dtoa_r+0x640>)
 8005f80:	f006 020f 	and.w	r2, r6, #15
 8005f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	ec51 0b18 	vmov	r0, r1, d8
 8005f90:	f7fa fb32 	bl	80005f8 <__aeabi_dmul>
 8005f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f98:	1136      	asrs	r6, r6, #4
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2502      	movs	r5, #2
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	d17e      	bne.n	80060a0 <_dtoa_r+0x4d8>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d0      	bne.n	8005f48 <_dtoa_r+0x380>
 8005fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8084 	beq.w	80060ba <_dtoa_r+0x4f2>
 8005fb2:	4b96      	ldr	r3, [pc, #600]	; (800620c <_dtoa_r+0x644>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	4649      	mov	r1, r9
 8005fba:	f7fa fd8f 	bl	8000adc <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d07b      	beq.n	80060ba <_dtoa_r+0x4f2>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d078      	beq.n	80060ba <_dtoa_r+0x4f2>
 8005fc8:	9b01      	ldr	r3, [sp, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dd39      	ble.n	8006042 <_dtoa_r+0x47a>
 8005fce:	4b90      	ldr	r3, [pc, #576]	; (8006210 <_dtoa_r+0x648>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fde:	9e01      	ldr	r6, [sp, #4]
 8005fe0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7fa fa9a 	bl	8000524 <__aeabi_i2d>
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	f7fa fb00 	bl	80005f8 <__aeabi_dmul>
 8005ff8:	4b86      	ldr	r3, [pc, #536]	; (8006214 <_dtoa_r+0x64c>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f7fa f946 	bl	800028c <__adddf3>
 8006000:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	2e00      	cmp	r6, #0
 800600c:	d158      	bne.n	80060c0 <_dtoa_r+0x4f8>
 800600e:	4b82      	ldr	r3, [pc, #520]	; (8006218 <_dtoa_r+0x650>)
 8006010:	2200      	movs	r2, #0
 8006012:	4640      	mov	r0, r8
 8006014:	4649      	mov	r1, r9
 8006016:	f7fa f937 	bl	8000288 <__aeabi_dsub>
 800601a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	f7fa fd79 	bl	8000b18 <__aeabi_dcmpgt>
 8006026:	2800      	cmp	r0, #0
 8006028:	f040 8296 	bne.w	8006558 <_dtoa_r+0x990>
 800602c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006030:	4640      	mov	r0, r8
 8006032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006036:	4649      	mov	r1, r9
 8006038:	f7fa fd50 	bl	8000adc <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 8289 	bne.w	8006554 <_dtoa_r+0x98c>
 8006042:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006048:	2b00      	cmp	r3, #0
 800604a:	f2c0 814e 	blt.w	80062ea <_dtoa_r+0x722>
 800604e:	f1bb 0f0e 	cmp.w	fp, #14
 8006052:	f300 814a 	bgt.w	80062ea <_dtoa_r+0x722>
 8006056:	4b6b      	ldr	r3, [pc, #428]	; (8006204 <_dtoa_r+0x63c>)
 8006058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800605c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	f280 80dc 	bge.w	8006220 <_dtoa_r+0x658>
 8006068:	9b04      	ldr	r3, [sp, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f300 80d8 	bgt.w	8006220 <_dtoa_r+0x658>
 8006070:	f040 826f 	bne.w	8006552 <_dtoa_r+0x98a>
 8006074:	4b68      	ldr	r3, [pc, #416]	; (8006218 <_dtoa_r+0x650>)
 8006076:	2200      	movs	r2, #0
 8006078:	4640      	mov	r0, r8
 800607a:	4649      	mov	r1, r9
 800607c:	f7fa fabc 	bl	80005f8 <__aeabi_dmul>
 8006080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006084:	f7fa fd3e 	bl	8000b04 <__aeabi_dcmpge>
 8006088:	9e04      	ldr	r6, [sp, #16]
 800608a:	4637      	mov	r7, r6
 800608c:	2800      	cmp	r0, #0
 800608e:	f040 8245 	bne.w	800651c <_dtoa_r+0x954>
 8006092:	9d00      	ldr	r5, [sp, #0]
 8006094:	2331      	movs	r3, #49	; 0x31
 8006096:	f805 3b01 	strb.w	r3, [r5], #1
 800609a:	f10b 0b01 	add.w	fp, fp, #1
 800609e:	e241      	b.n	8006524 <_dtoa_r+0x95c>
 80060a0:	07f2      	lsls	r2, r6, #31
 80060a2:	d505      	bpl.n	80060b0 <_dtoa_r+0x4e8>
 80060a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a8:	f7fa faa6 	bl	80005f8 <__aeabi_dmul>
 80060ac:	3501      	adds	r5, #1
 80060ae:	2301      	movs	r3, #1
 80060b0:	1076      	asrs	r6, r6, #1
 80060b2:	3708      	adds	r7, #8
 80060b4:	e773      	b.n	8005f9e <_dtoa_r+0x3d6>
 80060b6:	2502      	movs	r5, #2
 80060b8:	e775      	b.n	8005fa6 <_dtoa_r+0x3de>
 80060ba:	9e04      	ldr	r6, [sp, #16]
 80060bc:	465f      	mov	r7, fp
 80060be:	e792      	b.n	8005fe6 <_dtoa_r+0x41e>
 80060c0:	9900      	ldr	r1, [sp, #0]
 80060c2:	4b50      	ldr	r3, [pc, #320]	; (8006204 <_dtoa_r+0x63c>)
 80060c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060c8:	4431      	add	r1, r6
 80060ca:	9102      	str	r1, [sp, #8]
 80060cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ce:	eeb0 9a47 	vmov.f32	s18, s14
 80060d2:	eef0 9a67 	vmov.f32	s19, s15
 80060d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060de:	2900      	cmp	r1, #0
 80060e0:	d044      	beq.n	800616c <_dtoa_r+0x5a4>
 80060e2:	494e      	ldr	r1, [pc, #312]	; (800621c <_dtoa_r+0x654>)
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7fa fbb1 	bl	800084c <__aeabi_ddiv>
 80060ea:	ec53 2b19 	vmov	r2, r3, d9
 80060ee:	f7fa f8cb 	bl	8000288 <__aeabi_dsub>
 80060f2:	9d00      	ldr	r5, [sp, #0]
 80060f4:	ec41 0b19 	vmov	d9, r0, r1
 80060f8:	4649      	mov	r1, r9
 80060fa:	4640      	mov	r0, r8
 80060fc:	f7fa fd2c 	bl	8000b58 <__aeabi_d2iz>
 8006100:	4606      	mov	r6, r0
 8006102:	f7fa fa0f 	bl	8000524 <__aeabi_i2d>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f7fa f8bb 	bl	8000288 <__aeabi_dsub>
 8006112:	3630      	adds	r6, #48	; 0x30
 8006114:	f805 6b01 	strb.w	r6, [r5], #1
 8006118:	ec53 2b19 	vmov	r2, r3, d9
 800611c:	4680      	mov	r8, r0
 800611e:	4689      	mov	r9, r1
 8006120:	f7fa fcdc 	bl	8000adc <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	d164      	bne.n	80061f2 <_dtoa_r+0x62a>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	4937      	ldr	r1, [pc, #220]	; (800620c <_dtoa_r+0x644>)
 800612e:	2000      	movs	r0, #0
 8006130:	f7fa f8aa 	bl	8000288 <__aeabi_dsub>
 8006134:	ec53 2b19 	vmov	r2, r3, d9
 8006138:	f7fa fcd0 	bl	8000adc <__aeabi_dcmplt>
 800613c:	2800      	cmp	r0, #0
 800613e:	f040 80b6 	bne.w	80062ae <_dtoa_r+0x6e6>
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	429d      	cmp	r5, r3
 8006146:	f43f af7c 	beq.w	8006042 <_dtoa_r+0x47a>
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <_dtoa_r+0x648>)
 800614c:	ec51 0b19 	vmov	r0, r1, d9
 8006150:	2200      	movs	r2, #0
 8006152:	f7fa fa51 	bl	80005f8 <__aeabi_dmul>
 8006156:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <_dtoa_r+0x648>)
 8006158:	ec41 0b19 	vmov	d9, r0, r1
 800615c:	2200      	movs	r2, #0
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	f7fa fa49 	bl	80005f8 <__aeabi_dmul>
 8006166:	4680      	mov	r8, r0
 8006168:	4689      	mov	r9, r1
 800616a:	e7c5      	b.n	80060f8 <_dtoa_r+0x530>
 800616c:	ec51 0b17 	vmov	r0, r1, d7
 8006170:	f7fa fa42 	bl	80005f8 <__aeabi_dmul>
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	9d00      	ldr	r5, [sp, #0]
 8006178:	930f      	str	r3, [sp, #60]	; 0x3c
 800617a:	ec41 0b19 	vmov	d9, r0, r1
 800617e:	4649      	mov	r1, r9
 8006180:	4640      	mov	r0, r8
 8006182:	f7fa fce9 	bl	8000b58 <__aeabi_d2iz>
 8006186:	4606      	mov	r6, r0
 8006188:	f7fa f9cc 	bl	8000524 <__aeabi_i2d>
 800618c:	3630      	adds	r6, #48	; 0x30
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa f877 	bl	8000288 <__aeabi_dsub>
 800619a:	f805 6b01 	strb.w	r6, [r5], #1
 800619e:	9b02      	ldr	r3, [sp, #8]
 80061a0:	429d      	cmp	r5, r3
 80061a2:	4680      	mov	r8, r0
 80061a4:	4689      	mov	r9, r1
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	d124      	bne.n	80061f6 <_dtoa_r+0x62e>
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <_dtoa_r+0x654>)
 80061ae:	ec51 0b19 	vmov	r0, r1, d9
 80061b2:	f7fa f86b 	bl	800028c <__adddf3>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d173      	bne.n	80062ae <_dtoa_r+0x6e6>
 80061c6:	ec53 2b19 	vmov	r2, r3, d9
 80061ca:	4914      	ldr	r1, [pc, #80]	; (800621c <_dtoa_r+0x654>)
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7fa f85b 	bl	8000288 <__aeabi_dsub>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4640      	mov	r0, r8
 80061d8:	4649      	mov	r1, r9
 80061da:	f7fa fc7f 	bl	8000adc <__aeabi_dcmplt>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f43f af2f 	beq.w	8006042 <_dtoa_r+0x47a>
 80061e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80061e6:	1e6b      	subs	r3, r5, #1
 80061e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80061ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061ee:	2b30      	cmp	r3, #48	; 0x30
 80061f0:	d0f8      	beq.n	80061e4 <_dtoa_r+0x61c>
 80061f2:	46bb      	mov	fp, r7
 80061f4:	e04a      	b.n	800628c <_dtoa_r+0x6c4>
 80061f6:	4b06      	ldr	r3, [pc, #24]	; (8006210 <_dtoa_r+0x648>)
 80061f8:	f7fa f9fe 	bl	80005f8 <__aeabi_dmul>
 80061fc:	4680      	mov	r8, r0
 80061fe:	4689      	mov	r9, r1
 8006200:	e7bd      	b.n	800617e <_dtoa_r+0x5b6>
 8006202:	bf00      	nop
 8006204:	080093b8 	.word	0x080093b8
 8006208:	08009390 	.word	0x08009390
 800620c:	3ff00000 	.word	0x3ff00000
 8006210:	40240000 	.word	0x40240000
 8006214:	401c0000 	.word	0x401c0000
 8006218:	40140000 	.word	0x40140000
 800621c:	3fe00000 	.word	0x3fe00000
 8006220:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006224:	9d00      	ldr	r5, [sp, #0]
 8006226:	4642      	mov	r2, r8
 8006228:	464b      	mov	r3, r9
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa fb0d 	bl	800084c <__aeabi_ddiv>
 8006232:	f7fa fc91 	bl	8000b58 <__aeabi_d2iz>
 8006236:	9001      	str	r0, [sp, #4]
 8006238:	f7fa f974 	bl	8000524 <__aeabi_i2d>
 800623c:	4642      	mov	r2, r8
 800623e:	464b      	mov	r3, r9
 8006240:	f7fa f9da 	bl	80005f8 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	f7fa f81c 	bl	8000288 <__aeabi_dsub>
 8006250:	9e01      	ldr	r6, [sp, #4]
 8006252:	9f04      	ldr	r7, [sp, #16]
 8006254:	3630      	adds	r6, #48	; 0x30
 8006256:	f805 6b01 	strb.w	r6, [r5], #1
 800625a:	9e00      	ldr	r6, [sp, #0]
 800625c:	1bae      	subs	r6, r5, r6
 800625e:	42b7      	cmp	r7, r6
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	d134      	bne.n	80062d0 <_dtoa_r+0x708>
 8006266:	f7fa f811 	bl	800028c <__adddf3>
 800626a:	4642      	mov	r2, r8
 800626c:	464b      	mov	r3, r9
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	f7fa fc51 	bl	8000b18 <__aeabi_dcmpgt>
 8006276:	b9c8      	cbnz	r0, 80062ac <_dtoa_r+0x6e4>
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7fa fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006284:	b110      	cbz	r0, 800628c <_dtoa_r+0x6c4>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	07db      	lsls	r3, r3, #31
 800628a:	d40f      	bmi.n	80062ac <_dtoa_r+0x6e4>
 800628c:	4651      	mov	r1, sl
 800628e:	4620      	mov	r0, r4
 8006290:	f000 fbcc 	bl	8006a2c <_Bfree>
 8006294:	2300      	movs	r3, #0
 8006296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006298:	702b      	strb	r3, [r5, #0]
 800629a:	f10b 0301 	add.w	r3, fp, #1
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f43f ace2 	beq.w	8005c6c <_dtoa_r+0xa4>
 80062a8:	601d      	str	r5, [r3, #0]
 80062aa:	e4df      	b.n	8005c6c <_dtoa_r+0xa4>
 80062ac:	465f      	mov	r7, fp
 80062ae:	462b      	mov	r3, r5
 80062b0:	461d      	mov	r5, r3
 80062b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062b6:	2a39      	cmp	r2, #57	; 0x39
 80062b8:	d106      	bne.n	80062c8 <_dtoa_r+0x700>
 80062ba:	9a00      	ldr	r2, [sp, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1f7      	bne.n	80062b0 <_dtoa_r+0x6e8>
 80062c0:	9900      	ldr	r1, [sp, #0]
 80062c2:	2230      	movs	r2, #48	; 0x30
 80062c4:	3701      	adds	r7, #1
 80062c6:	700a      	strb	r2, [r1, #0]
 80062c8:	781a      	ldrb	r2, [r3, #0]
 80062ca:	3201      	adds	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e790      	b.n	80061f2 <_dtoa_r+0x62a>
 80062d0:	4ba3      	ldr	r3, [pc, #652]	; (8006560 <_dtoa_r+0x998>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	f7fa f990 	bl	80005f8 <__aeabi_dmul>
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f7fa fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d09e      	beq.n	8006226 <_dtoa_r+0x65e>
 80062e8:	e7d0      	b.n	800628c <_dtoa_r+0x6c4>
 80062ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	f000 80ca 	beq.w	8006486 <_dtoa_r+0x8be>
 80062f2:	9a07      	ldr	r2, [sp, #28]
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	f300 80ad 	bgt.w	8006454 <_dtoa_r+0x88c>
 80062fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062fc:	2a00      	cmp	r2, #0
 80062fe:	f000 80a5 	beq.w	800644c <_dtoa_r+0x884>
 8006302:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006306:	9e08      	ldr	r6, [sp, #32]
 8006308:	9d05      	ldr	r5, [sp, #20]
 800630a:	9a05      	ldr	r2, [sp, #20]
 800630c:	441a      	add	r2, r3
 800630e:	9205      	str	r2, [sp, #20]
 8006310:	9a06      	ldr	r2, [sp, #24]
 8006312:	2101      	movs	r1, #1
 8006314:	441a      	add	r2, r3
 8006316:	4620      	mov	r0, r4
 8006318:	9206      	str	r2, [sp, #24]
 800631a:	f000 fc87 	bl	8006c2c <__i2b>
 800631e:	4607      	mov	r7, r0
 8006320:	b165      	cbz	r5, 800633c <_dtoa_r+0x774>
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dd09      	ble.n	800633c <_dtoa_r+0x774>
 8006328:	42ab      	cmp	r3, r5
 800632a:	9a05      	ldr	r2, [sp, #20]
 800632c:	bfa8      	it	ge
 800632e:	462b      	movge	r3, r5
 8006330:	1ad2      	subs	r2, r2, r3
 8006332:	9205      	str	r2, [sp, #20]
 8006334:	9a06      	ldr	r2, [sp, #24]
 8006336:	1aed      	subs	r5, r5, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	9306      	str	r3, [sp, #24]
 800633c:	9b08      	ldr	r3, [sp, #32]
 800633e:	b1f3      	cbz	r3, 800637e <_dtoa_r+0x7b6>
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 80a3 	beq.w	800648e <_dtoa_r+0x8c6>
 8006348:	2e00      	cmp	r6, #0
 800634a:	dd10      	ble.n	800636e <_dtoa_r+0x7a6>
 800634c:	4639      	mov	r1, r7
 800634e:	4632      	mov	r2, r6
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fd2b 	bl	8006dac <__pow5mult>
 8006356:	4652      	mov	r2, sl
 8006358:	4601      	mov	r1, r0
 800635a:	4607      	mov	r7, r0
 800635c:	4620      	mov	r0, r4
 800635e:	f000 fc7b 	bl	8006c58 <__multiply>
 8006362:	4651      	mov	r1, sl
 8006364:	4680      	mov	r8, r0
 8006366:	4620      	mov	r0, r4
 8006368:	f000 fb60 	bl	8006a2c <_Bfree>
 800636c:	46c2      	mov	sl, r8
 800636e:	9b08      	ldr	r3, [sp, #32]
 8006370:	1b9a      	subs	r2, r3, r6
 8006372:	d004      	beq.n	800637e <_dtoa_r+0x7b6>
 8006374:	4651      	mov	r1, sl
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fd18 	bl	8006dac <__pow5mult>
 800637c:	4682      	mov	sl, r0
 800637e:	2101      	movs	r1, #1
 8006380:	4620      	mov	r0, r4
 8006382:	f000 fc53 	bl	8006c2c <__i2b>
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	4606      	mov	r6, r0
 800638c:	f340 8081 	ble.w	8006492 <_dtoa_r+0x8ca>
 8006390:	461a      	mov	r2, r3
 8006392:	4601      	mov	r1, r0
 8006394:	4620      	mov	r0, r4
 8006396:	f000 fd09 	bl	8006dac <__pow5mult>
 800639a:	9b07      	ldr	r3, [sp, #28]
 800639c:	2b01      	cmp	r3, #1
 800639e:	4606      	mov	r6, r0
 80063a0:	dd7a      	ble.n	8006498 <_dtoa_r+0x8d0>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	6933      	ldr	r3, [r6, #16]
 80063a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80063ac:	6918      	ldr	r0, [r3, #16]
 80063ae:	f000 fbef 	bl	8006b90 <__hi0bits>
 80063b2:	f1c0 0020 	rsb	r0, r0, #32
 80063b6:	9b06      	ldr	r3, [sp, #24]
 80063b8:	4418      	add	r0, r3
 80063ba:	f010 001f 	ands.w	r0, r0, #31
 80063be:	f000 8094 	beq.w	80064ea <_dtoa_r+0x922>
 80063c2:	f1c0 0320 	rsb	r3, r0, #32
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	f340 8085 	ble.w	80064d6 <_dtoa_r+0x90e>
 80063cc:	9b05      	ldr	r3, [sp, #20]
 80063ce:	f1c0 001c 	rsb	r0, r0, #28
 80063d2:	4403      	add	r3, r0
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	9b06      	ldr	r3, [sp, #24]
 80063d8:	4403      	add	r3, r0
 80063da:	4405      	add	r5, r0
 80063dc:	9306      	str	r3, [sp, #24]
 80063de:	9b05      	ldr	r3, [sp, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dd05      	ble.n	80063f0 <_dtoa_r+0x828>
 80063e4:	4651      	mov	r1, sl
 80063e6:	461a      	mov	r2, r3
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 fd39 	bl	8006e60 <__lshift>
 80063ee:	4682      	mov	sl, r0
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd05      	ble.n	8006402 <_dtoa_r+0x83a>
 80063f6:	4631      	mov	r1, r6
 80063f8:	461a      	mov	r2, r3
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fd30 	bl	8006e60 <__lshift>
 8006400:	4606      	mov	r6, r0
 8006402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d072      	beq.n	80064ee <_dtoa_r+0x926>
 8006408:	4631      	mov	r1, r6
 800640a:	4650      	mov	r0, sl
 800640c:	f000 fd94 	bl	8006f38 <__mcmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	da6c      	bge.n	80064ee <_dtoa_r+0x926>
 8006414:	2300      	movs	r3, #0
 8006416:	4651      	mov	r1, sl
 8006418:	220a      	movs	r2, #10
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fb28 	bl	8006a70 <__multadd>
 8006420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006422:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006426:	4682      	mov	sl, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 81b0 	beq.w	800678e <_dtoa_r+0xbc6>
 800642e:	2300      	movs	r3, #0
 8006430:	4639      	mov	r1, r7
 8006432:	220a      	movs	r2, #10
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fb1b 	bl	8006a70 <__multadd>
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	4607      	mov	r7, r0
 8006440:	f300 8096 	bgt.w	8006570 <_dtoa_r+0x9a8>
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	2b02      	cmp	r3, #2
 8006448:	dc59      	bgt.n	80064fe <_dtoa_r+0x936>
 800644a:	e091      	b.n	8006570 <_dtoa_r+0x9a8>
 800644c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800644e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006452:	e758      	b.n	8006306 <_dtoa_r+0x73e>
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	1e5e      	subs	r6, r3, #1
 8006458:	9b08      	ldr	r3, [sp, #32]
 800645a:	42b3      	cmp	r3, r6
 800645c:	bfbf      	itttt	lt
 800645e:	9b08      	ldrlt	r3, [sp, #32]
 8006460:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006462:	9608      	strlt	r6, [sp, #32]
 8006464:	1af3      	sublt	r3, r6, r3
 8006466:	bfb4      	ite	lt
 8006468:	18d2      	addlt	r2, r2, r3
 800646a:	1b9e      	subge	r6, r3, r6
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	bfbc      	itt	lt
 8006470:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006472:	2600      	movlt	r6, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	bfb7      	itett	lt
 8006478:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800647c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006480:	1a9d      	sublt	r5, r3, r2
 8006482:	2300      	movlt	r3, #0
 8006484:	e741      	b.n	800630a <_dtoa_r+0x742>
 8006486:	9e08      	ldr	r6, [sp, #32]
 8006488:	9d05      	ldr	r5, [sp, #20]
 800648a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800648c:	e748      	b.n	8006320 <_dtoa_r+0x758>
 800648e:	9a08      	ldr	r2, [sp, #32]
 8006490:	e770      	b.n	8006374 <_dtoa_r+0x7ac>
 8006492:	9b07      	ldr	r3, [sp, #28]
 8006494:	2b01      	cmp	r3, #1
 8006496:	dc19      	bgt.n	80064cc <_dtoa_r+0x904>
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	b9bb      	cbnz	r3, 80064cc <_dtoa_r+0x904>
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a2:	b99b      	cbnz	r3, 80064cc <_dtoa_r+0x904>
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064aa:	0d1b      	lsrs	r3, r3, #20
 80064ac:	051b      	lsls	r3, r3, #20
 80064ae:	b183      	cbz	r3, 80064d2 <_dtoa_r+0x90a>
 80064b0:	9b05      	ldr	r3, [sp, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	9305      	str	r3, [sp, #20]
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	3301      	adds	r3, #1
 80064ba:	9306      	str	r3, [sp, #24]
 80064bc:	f04f 0801 	mov.w	r8, #1
 80064c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f47f af6f 	bne.w	80063a6 <_dtoa_r+0x7de>
 80064c8:	2001      	movs	r0, #1
 80064ca:	e774      	b.n	80063b6 <_dtoa_r+0x7ee>
 80064cc:	f04f 0800 	mov.w	r8, #0
 80064d0:	e7f6      	b.n	80064c0 <_dtoa_r+0x8f8>
 80064d2:	4698      	mov	r8, r3
 80064d4:	e7f4      	b.n	80064c0 <_dtoa_r+0x8f8>
 80064d6:	d082      	beq.n	80063de <_dtoa_r+0x816>
 80064d8:	9a05      	ldr	r2, [sp, #20]
 80064da:	331c      	adds	r3, #28
 80064dc:	441a      	add	r2, r3
 80064de:	9205      	str	r2, [sp, #20]
 80064e0:	9a06      	ldr	r2, [sp, #24]
 80064e2:	441a      	add	r2, r3
 80064e4:	441d      	add	r5, r3
 80064e6:	9206      	str	r2, [sp, #24]
 80064e8:	e779      	b.n	80063de <_dtoa_r+0x816>
 80064ea:	4603      	mov	r3, r0
 80064ec:	e7f4      	b.n	80064d8 <_dtoa_r+0x910>
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dc37      	bgt.n	8006564 <_dtoa_r+0x99c>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	dd34      	ble.n	8006564 <_dtoa_r+0x99c>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	b963      	cbnz	r3, 800651c <_dtoa_r+0x954>
 8006502:	4631      	mov	r1, r6
 8006504:	2205      	movs	r2, #5
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fab2 	bl	8006a70 <__multadd>
 800650c:	4601      	mov	r1, r0
 800650e:	4606      	mov	r6, r0
 8006510:	4650      	mov	r0, sl
 8006512:	f000 fd11 	bl	8006f38 <__mcmp>
 8006516:	2800      	cmp	r0, #0
 8006518:	f73f adbb 	bgt.w	8006092 <_dtoa_r+0x4ca>
 800651c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651e:	9d00      	ldr	r5, [sp, #0]
 8006520:	ea6f 0b03 	mvn.w	fp, r3
 8006524:	f04f 0800 	mov.w	r8, #0
 8006528:	4631      	mov	r1, r6
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fa7e 	bl	8006a2c <_Bfree>
 8006530:	2f00      	cmp	r7, #0
 8006532:	f43f aeab 	beq.w	800628c <_dtoa_r+0x6c4>
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	d005      	beq.n	8006548 <_dtoa_r+0x980>
 800653c:	45b8      	cmp	r8, r7
 800653e:	d003      	beq.n	8006548 <_dtoa_r+0x980>
 8006540:	4641      	mov	r1, r8
 8006542:	4620      	mov	r0, r4
 8006544:	f000 fa72 	bl	8006a2c <_Bfree>
 8006548:	4639      	mov	r1, r7
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fa6e 	bl	8006a2c <_Bfree>
 8006550:	e69c      	b.n	800628c <_dtoa_r+0x6c4>
 8006552:	2600      	movs	r6, #0
 8006554:	4637      	mov	r7, r6
 8006556:	e7e1      	b.n	800651c <_dtoa_r+0x954>
 8006558:	46bb      	mov	fp, r7
 800655a:	4637      	mov	r7, r6
 800655c:	e599      	b.n	8006092 <_dtoa_r+0x4ca>
 800655e:	bf00      	nop
 8006560:	40240000 	.word	0x40240000
 8006564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80c8 	beq.w	80066fc <_dtoa_r+0xb34>
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	2d00      	cmp	r5, #0
 8006572:	dd05      	ble.n	8006580 <_dtoa_r+0x9b8>
 8006574:	4639      	mov	r1, r7
 8006576:	462a      	mov	r2, r5
 8006578:	4620      	mov	r0, r4
 800657a:	f000 fc71 	bl	8006e60 <__lshift>
 800657e:	4607      	mov	r7, r0
 8006580:	f1b8 0f00 	cmp.w	r8, #0
 8006584:	d05b      	beq.n	800663e <_dtoa_r+0xa76>
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fa0f 	bl	80069ac <_Balloc>
 800658e:	4605      	mov	r5, r0
 8006590:	b928      	cbnz	r0, 800659e <_dtoa_r+0x9d6>
 8006592:	4b83      	ldr	r3, [pc, #524]	; (80067a0 <_dtoa_r+0xbd8>)
 8006594:	4602      	mov	r2, r0
 8006596:	f240 21ef 	movw	r1, #751	; 0x2ef
 800659a:	f7ff bb2e 	b.w	8005bfa <_dtoa_r+0x32>
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	3202      	adds	r2, #2
 80065a2:	0092      	lsls	r2, r2, #2
 80065a4:	f107 010c 	add.w	r1, r7, #12
 80065a8:	300c      	adds	r0, #12
 80065aa:	f001 ff85 	bl	80084b8 <memcpy>
 80065ae:	2201      	movs	r2, #1
 80065b0:	4629      	mov	r1, r5
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 fc54 	bl	8006e60 <__lshift>
 80065b8:	9b00      	ldr	r3, [sp, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c2:	4413      	add	r3, r2
 80065c4:	9308      	str	r3, [sp, #32]
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	46b8      	mov	r8, r7
 80065ce:	9306      	str	r3, [sp, #24]
 80065d0:	4607      	mov	r7, r0
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	4631      	mov	r1, r6
 80065d6:	3b01      	subs	r3, #1
 80065d8:	4650      	mov	r0, sl
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	f7ff fa6c 	bl	8005ab8 <quorem>
 80065e0:	4641      	mov	r1, r8
 80065e2:	9002      	str	r0, [sp, #8]
 80065e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065e8:	4650      	mov	r0, sl
 80065ea:	f000 fca5 	bl	8006f38 <__mcmp>
 80065ee:	463a      	mov	r2, r7
 80065f0:	9005      	str	r0, [sp, #20]
 80065f2:	4631      	mov	r1, r6
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fcbb 	bl	8006f70 <__mdiff>
 80065fa:	68c2      	ldr	r2, [r0, #12]
 80065fc:	4605      	mov	r5, r0
 80065fe:	bb02      	cbnz	r2, 8006642 <_dtoa_r+0xa7a>
 8006600:	4601      	mov	r1, r0
 8006602:	4650      	mov	r0, sl
 8006604:	f000 fc98 	bl	8006f38 <__mcmp>
 8006608:	4602      	mov	r2, r0
 800660a:	4629      	mov	r1, r5
 800660c:	4620      	mov	r0, r4
 800660e:	9209      	str	r2, [sp, #36]	; 0x24
 8006610:	f000 fa0c 	bl	8006a2c <_Bfree>
 8006614:	9b07      	ldr	r3, [sp, #28]
 8006616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006618:	9d04      	ldr	r5, [sp, #16]
 800661a:	ea43 0102 	orr.w	r1, r3, r2
 800661e:	9b06      	ldr	r3, [sp, #24]
 8006620:	4319      	orrs	r1, r3
 8006622:	d110      	bne.n	8006646 <_dtoa_r+0xa7e>
 8006624:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006628:	d029      	beq.n	800667e <_dtoa_r+0xab6>
 800662a:	9b05      	ldr	r3, [sp, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	dd02      	ble.n	8006636 <_dtoa_r+0xa6e>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	f883 9000 	strb.w	r9, [r3]
 800663c:	e774      	b.n	8006528 <_dtoa_r+0x960>
 800663e:	4638      	mov	r0, r7
 8006640:	e7ba      	b.n	80065b8 <_dtoa_r+0x9f0>
 8006642:	2201      	movs	r2, #1
 8006644:	e7e1      	b.n	800660a <_dtoa_r+0xa42>
 8006646:	9b05      	ldr	r3, [sp, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	db04      	blt.n	8006656 <_dtoa_r+0xa8e>
 800664c:	9907      	ldr	r1, [sp, #28]
 800664e:	430b      	orrs	r3, r1
 8006650:	9906      	ldr	r1, [sp, #24]
 8006652:	430b      	orrs	r3, r1
 8006654:	d120      	bne.n	8006698 <_dtoa_r+0xad0>
 8006656:	2a00      	cmp	r2, #0
 8006658:	dded      	ble.n	8006636 <_dtoa_r+0xa6e>
 800665a:	4651      	mov	r1, sl
 800665c:	2201      	movs	r2, #1
 800665e:	4620      	mov	r0, r4
 8006660:	f000 fbfe 	bl	8006e60 <__lshift>
 8006664:	4631      	mov	r1, r6
 8006666:	4682      	mov	sl, r0
 8006668:	f000 fc66 	bl	8006f38 <__mcmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	dc03      	bgt.n	8006678 <_dtoa_r+0xab0>
 8006670:	d1e1      	bne.n	8006636 <_dtoa_r+0xa6e>
 8006672:	f019 0f01 	tst.w	r9, #1
 8006676:	d0de      	beq.n	8006636 <_dtoa_r+0xa6e>
 8006678:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800667c:	d1d8      	bne.n	8006630 <_dtoa_r+0xa68>
 800667e:	9a01      	ldr	r2, [sp, #4]
 8006680:	2339      	movs	r3, #57	; 0x39
 8006682:	7013      	strb	r3, [r2, #0]
 8006684:	462b      	mov	r3, r5
 8006686:	461d      	mov	r5, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800668e:	2a39      	cmp	r2, #57	; 0x39
 8006690:	d06c      	beq.n	800676c <_dtoa_r+0xba4>
 8006692:	3201      	adds	r2, #1
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e747      	b.n	8006528 <_dtoa_r+0x960>
 8006698:	2a00      	cmp	r2, #0
 800669a:	dd07      	ble.n	80066ac <_dtoa_r+0xae4>
 800669c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066a0:	d0ed      	beq.n	800667e <_dtoa_r+0xab6>
 80066a2:	9a01      	ldr	r2, [sp, #4]
 80066a4:	f109 0301 	add.w	r3, r9, #1
 80066a8:	7013      	strb	r3, [r2, #0]
 80066aa:	e73d      	b.n	8006528 <_dtoa_r+0x960>
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	9a08      	ldr	r2, [sp, #32]
 80066b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d043      	beq.n	8006740 <_dtoa_r+0xb78>
 80066b8:	4651      	mov	r1, sl
 80066ba:	2300      	movs	r3, #0
 80066bc:	220a      	movs	r2, #10
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f9d6 	bl	8006a70 <__multadd>
 80066c4:	45b8      	cmp	r8, r7
 80066c6:	4682      	mov	sl, r0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	f04f 020a 	mov.w	r2, #10
 80066d0:	4641      	mov	r1, r8
 80066d2:	4620      	mov	r0, r4
 80066d4:	d107      	bne.n	80066e6 <_dtoa_r+0xb1e>
 80066d6:	f000 f9cb 	bl	8006a70 <__multadd>
 80066da:	4680      	mov	r8, r0
 80066dc:	4607      	mov	r7, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	e775      	b.n	80065d2 <_dtoa_r+0xa0a>
 80066e6:	f000 f9c3 	bl	8006a70 <__multadd>
 80066ea:	4639      	mov	r1, r7
 80066ec:	4680      	mov	r8, r0
 80066ee:	2300      	movs	r3, #0
 80066f0:	220a      	movs	r2, #10
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 f9bc 	bl	8006a70 <__multadd>
 80066f8:	4607      	mov	r7, r0
 80066fa:	e7f0      	b.n	80066de <_dtoa_r+0xb16>
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	9d00      	ldr	r5, [sp, #0]
 8006702:	4631      	mov	r1, r6
 8006704:	4650      	mov	r0, sl
 8006706:	f7ff f9d7 	bl	8005ab8 <quorem>
 800670a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800670e:	9b00      	ldr	r3, [sp, #0]
 8006710:	f805 9b01 	strb.w	r9, [r5], #1
 8006714:	1aea      	subs	r2, r5, r3
 8006716:	9b01      	ldr	r3, [sp, #4]
 8006718:	4293      	cmp	r3, r2
 800671a:	dd07      	ble.n	800672c <_dtoa_r+0xb64>
 800671c:	4651      	mov	r1, sl
 800671e:	2300      	movs	r3, #0
 8006720:	220a      	movs	r2, #10
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f9a4 	bl	8006a70 <__multadd>
 8006728:	4682      	mov	sl, r0
 800672a:	e7ea      	b.n	8006702 <_dtoa_r+0xb3a>
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfc8      	it	gt
 8006732:	461d      	movgt	r5, r3
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	bfd8      	it	le
 8006738:	2501      	movle	r5, #1
 800673a:	441d      	add	r5, r3
 800673c:	f04f 0800 	mov.w	r8, #0
 8006740:	4651      	mov	r1, sl
 8006742:	2201      	movs	r2, #1
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fb8b 	bl	8006e60 <__lshift>
 800674a:	4631      	mov	r1, r6
 800674c:	4682      	mov	sl, r0
 800674e:	f000 fbf3 	bl	8006f38 <__mcmp>
 8006752:	2800      	cmp	r0, #0
 8006754:	dc96      	bgt.n	8006684 <_dtoa_r+0xabc>
 8006756:	d102      	bne.n	800675e <_dtoa_r+0xb96>
 8006758:	f019 0f01 	tst.w	r9, #1
 800675c:	d192      	bne.n	8006684 <_dtoa_r+0xabc>
 800675e:	462b      	mov	r3, r5
 8006760:	461d      	mov	r5, r3
 8006762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006766:	2a30      	cmp	r2, #48	; 0x30
 8006768:	d0fa      	beq.n	8006760 <_dtoa_r+0xb98>
 800676a:	e6dd      	b.n	8006528 <_dtoa_r+0x960>
 800676c:	9a00      	ldr	r2, [sp, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d189      	bne.n	8006686 <_dtoa_r+0xabe>
 8006772:	f10b 0b01 	add.w	fp, fp, #1
 8006776:	2331      	movs	r3, #49	; 0x31
 8006778:	e796      	b.n	80066a8 <_dtoa_r+0xae0>
 800677a:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <_dtoa_r+0xbdc>)
 800677c:	f7ff ba99 	b.w	8005cb2 <_dtoa_r+0xea>
 8006780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006782:	2b00      	cmp	r3, #0
 8006784:	f47f aa6d 	bne.w	8005c62 <_dtoa_r+0x9a>
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <_dtoa_r+0xbe0>)
 800678a:	f7ff ba92 	b.w	8005cb2 <_dtoa_r+0xea>
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dcb5      	bgt.n	8006700 <_dtoa_r+0xb38>
 8006794:	9b07      	ldr	r3, [sp, #28]
 8006796:	2b02      	cmp	r3, #2
 8006798:	f73f aeb1 	bgt.w	80064fe <_dtoa_r+0x936>
 800679c:	e7b0      	b.n	8006700 <_dtoa_r+0xb38>
 800679e:	bf00      	nop
 80067a0:	08009325 	.word	0x08009325
 80067a4:	08009280 	.word	0x08009280
 80067a8:	080092a9 	.word	0x080092a9

080067ac <_free_r>:
 80067ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ae:	2900      	cmp	r1, #0
 80067b0:	d044      	beq.n	800683c <_free_r+0x90>
 80067b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b6:	9001      	str	r0, [sp, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f1a1 0404 	sub.w	r4, r1, #4
 80067be:	bfb8      	it	lt
 80067c0:	18e4      	addlt	r4, r4, r3
 80067c2:	f000 f8e7 	bl	8006994 <__malloc_lock>
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <_free_r+0x94>)
 80067c8:	9801      	ldr	r0, [sp, #4]
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	b933      	cbnz	r3, 80067dc <_free_r+0x30>
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067d8:	f000 b8e2 	b.w	80069a0 <__malloc_unlock>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d908      	bls.n	80067f2 <_free_r+0x46>
 80067e0:	6825      	ldr	r5, [r4, #0]
 80067e2:	1961      	adds	r1, r4, r5
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf01      	itttt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	e7ed      	b.n	80067ce <_free_r+0x22>
 80067f2:	461a      	mov	r2, r3
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	b10b      	cbz	r3, 80067fc <_free_r+0x50>
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d9fa      	bls.n	80067f2 <_free_r+0x46>
 80067fc:	6811      	ldr	r1, [r2, #0]
 80067fe:	1855      	adds	r5, r2, r1
 8006800:	42a5      	cmp	r5, r4
 8006802:	d10b      	bne.n	800681c <_free_r+0x70>
 8006804:	6824      	ldr	r4, [r4, #0]
 8006806:	4421      	add	r1, r4
 8006808:	1854      	adds	r4, r2, r1
 800680a:	42a3      	cmp	r3, r4
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	d1e0      	bne.n	80067d2 <_free_r+0x26>
 8006810:	681c      	ldr	r4, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	6053      	str	r3, [r2, #4]
 8006816:	440c      	add	r4, r1
 8006818:	6014      	str	r4, [r2, #0]
 800681a:	e7da      	b.n	80067d2 <_free_r+0x26>
 800681c:	d902      	bls.n	8006824 <_free_r+0x78>
 800681e:	230c      	movs	r3, #12
 8006820:	6003      	str	r3, [r0, #0]
 8006822:	e7d6      	b.n	80067d2 <_free_r+0x26>
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	1961      	adds	r1, r4, r5
 8006828:	428b      	cmp	r3, r1
 800682a:	bf04      	itt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	bf04      	itt	eq
 8006834:	1949      	addeq	r1, r1, r5
 8006836:	6021      	streq	r1, [r4, #0]
 8006838:	6054      	str	r4, [r2, #4]
 800683a:	e7ca      	b.n	80067d2 <_free_r+0x26>
 800683c:	b003      	add	sp, #12
 800683e:	bd30      	pop	{r4, r5, pc}
 8006840:	20000460 	.word	0x20000460

08006844 <malloc>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <malloc+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 b823 	b.w	8006894 <_malloc_r>
 800684e:	bf00      	nop
 8006850:	20000064 	.word	0x20000064

08006854 <sbrk_aligned>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	4e0e      	ldr	r6, [pc, #56]	; (8006890 <sbrk_aligned+0x3c>)
 8006858:	460c      	mov	r4, r1
 800685a:	6831      	ldr	r1, [r6, #0]
 800685c:	4605      	mov	r5, r0
 800685e:	b911      	cbnz	r1, 8006866 <sbrk_aligned+0x12>
 8006860:	f001 fe1a 	bl	8008498 <_sbrk_r>
 8006864:	6030      	str	r0, [r6, #0]
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f001 fe15 	bl	8008498 <_sbrk_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d00a      	beq.n	8006888 <sbrk_aligned+0x34>
 8006872:	1cc4      	adds	r4, r0, #3
 8006874:	f024 0403 	bic.w	r4, r4, #3
 8006878:	42a0      	cmp	r0, r4
 800687a:	d007      	beq.n	800688c <sbrk_aligned+0x38>
 800687c:	1a21      	subs	r1, r4, r0
 800687e:	4628      	mov	r0, r5
 8006880:	f001 fe0a 	bl	8008498 <_sbrk_r>
 8006884:	3001      	adds	r0, #1
 8006886:	d101      	bne.n	800688c <sbrk_aligned+0x38>
 8006888:	f04f 34ff 	mov.w	r4, #4294967295
 800688c:	4620      	mov	r0, r4
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	20000464 	.word	0x20000464

08006894 <_malloc_r>:
 8006894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006898:	1ccd      	adds	r5, r1, #3
 800689a:	f025 0503 	bic.w	r5, r5, #3
 800689e:	3508      	adds	r5, #8
 80068a0:	2d0c      	cmp	r5, #12
 80068a2:	bf38      	it	cc
 80068a4:	250c      	movcc	r5, #12
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	4607      	mov	r7, r0
 80068aa:	db01      	blt.n	80068b0 <_malloc_r+0x1c>
 80068ac:	42a9      	cmp	r1, r5
 80068ae:	d905      	bls.n	80068bc <_malloc_r+0x28>
 80068b0:	230c      	movs	r3, #12
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	2600      	movs	r6, #0
 80068b6:	4630      	mov	r0, r6
 80068b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006990 <_malloc_r+0xfc>
 80068c0:	f000 f868 	bl	8006994 <__malloc_lock>
 80068c4:	f8d8 3000 	ldr.w	r3, [r8]
 80068c8:	461c      	mov	r4, r3
 80068ca:	bb5c      	cbnz	r4, 8006924 <_malloc_r+0x90>
 80068cc:	4629      	mov	r1, r5
 80068ce:	4638      	mov	r0, r7
 80068d0:	f7ff ffc0 	bl	8006854 <sbrk_aligned>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	4604      	mov	r4, r0
 80068d8:	d155      	bne.n	8006986 <_malloc_r+0xf2>
 80068da:	f8d8 4000 	ldr.w	r4, [r8]
 80068de:	4626      	mov	r6, r4
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	d145      	bne.n	8006970 <_malloc_r+0xdc>
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	d048      	beq.n	800697a <_malloc_r+0xe6>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	4631      	mov	r1, r6
 80068ec:	4638      	mov	r0, r7
 80068ee:	eb04 0903 	add.w	r9, r4, r3
 80068f2:	f001 fdd1 	bl	8008498 <_sbrk_r>
 80068f6:	4581      	cmp	r9, r0
 80068f8:	d13f      	bne.n	800697a <_malloc_r+0xe6>
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	1a6d      	subs	r5, r5, r1
 80068fe:	4629      	mov	r1, r5
 8006900:	4638      	mov	r0, r7
 8006902:	f7ff ffa7 	bl	8006854 <sbrk_aligned>
 8006906:	3001      	adds	r0, #1
 8006908:	d037      	beq.n	800697a <_malloc_r+0xe6>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	442b      	add	r3, r5
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	f8d8 3000 	ldr.w	r3, [r8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d038      	beq.n	800698a <_malloc_r+0xf6>
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	42a2      	cmp	r2, r4
 800691c:	d12b      	bne.n	8006976 <_malloc_r+0xe2>
 800691e:	2200      	movs	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	e00f      	b.n	8006944 <_malloc_r+0xb0>
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	1b52      	subs	r2, r2, r5
 8006928:	d41f      	bmi.n	800696a <_malloc_r+0xd6>
 800692a:	2a0b      	cmp	r2, #11
 800692c:	d917      	bls.n	800695e <_malloc_r+0xca>
 800692e:	1961      	adds	r1, r4, r5
 8006930:	42a3      	cmp	r3, r4
 8006932:	6025      	str	r5, [r4, #0]
 8006934:	bf18      	it	ne
 8006936:	6059      	strne	r1, [r3, #4]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	bf08      	it	eq
 800693c:	f8c8 1000 	streq.w	r1, [r8]
 8006940:	5162      	str	r2, [r4, r5]
 8006942:	604b      	str	r3, [r1, #4]
 8006944:	4638      	mov	r0, r7
 8006946:	f104 060b 	add.w	r6, r4, #11
 800694a:	f000 f829 	bl	80069a0 <__malloc_unlock>
 800694e:	f026 0607 	bic.w	r6, r6, #7
 8006952:	1d23      	adds	r3, r4, #4
 8006954:	1af2      	subs	r2, r6, r3
 8006956:	d0ae      	beq.n	80068b6 <_malloc_r+0x22>
 8006958:	1b9b      	subs	r3, r3, r6
 800695a:	50a3      	str	r3, [r4, r2]
 800695c:	e7ab      	b.n	80068b6 <_malloc_r+0x22>
 800695e:	42a3      	cmp	r3, r4
 8006960:	6862      	ldr	r2, [r4, #4]
 8006962:	d1dd      	bne.n	8006920 <_malloc_r+0x8c>
 8006964:	f8c8 2000 	str.w	r2, [r8]
 8006968:	e7ec      	b.n	8006944 <_malloc_r+0xb0>
 800696a:	4623      	mov	r3, r4
 800696c:	6864      	ldr	r4, [r4, #4]
 800696e:	e7ac      	b.n	80068ca <_malloc_r+0x36>
 8006970:	4634      	mov	r4, r6
 8006972:	6876      	ldr	r6, [r6, #4]
 8006974:	e7b4      	b.n	80068e0 <_malloc_r+0x4c>
 8006976:	4613      	mov	r3, r2
 8006978:	e7cc      	b.n	8006914 <_malloc_r+0x80>
 800697a:	230c      	movs	r3, #12
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4638      	mov	r0, r7
 8006980:	f000 f80e 	bl	80069a0 <__malloc_unlock>
 8006984:	e797      	b.n	80068b6 <_malloc_r+0x22>
 8006986:	6025      	str	r5, [r4, #0]
 8006988:	e7dc      	b.n	8006944 <_malloc_r+0xb0>
 800698a:	605b      	str	r3, [r3, #4]
 800698c:	deff      	udf	#255	; 0xff
 800698e:	bf00      	nop
 8006990:	20000460 	.word	0x20000460

08006994 <__malloc_lock>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__malloc_lock+0x8>)
 8006996:	f7ff b886 	b.w	8005aa6 <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	2000045c 	.word	0x2000045c

080069a0 <__malloc_unlock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_unlock+0x8>)
 80069a2:	f7ff b881 	b.w	8005aa8 <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	2000045c 	.word	0x2000045c

080069ac <_Balloc>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	69c6      	ldr	r6, [r0, #28]
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	b976      	cbnz	r6, 80069d4 <_Balloc+0x28>
 80069b6:	2010      	movs	r0, #16
 80069b8:	f7ff ff44 	bl	8006844 <malloc>
 80069bc:	4602      	mov	r2, r0
 80069be:	61e0      	str	r0, [r4, #28]
 80069c0:	b920      	cbnz	r0, 80069cc <_Balloc+0x20>
 80069c2:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <_Balloc+0x78>)
 80069c4:	4818      	ldr	r0, [pc, #96]	; (8006a28 <_Balloc+0x7c>)
 80069c6:	216b      	movs	r1, #107	; 0x6b
 80069c8:	f001 fd8e 	bl	80084e8 <__assert_func>
 80069cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d0:	6006      	str	r6, [r0, #0]
 80069d2:	60c6      	str	r6, [r0, #12]
 80069d4:	69e6      	ldr	r6, [r4, #28]
 80069d6:	68f3      	ldr	r3, [r6, #12]
 80069d8:	b183      	cbz	r3, 80069fc <_Balloc+0x50>
 80069da:	69e3      	ldr	r3, [r4, #28]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069e2:	b9b8      	cbnz	r0, 8006a14 <_Balloc+0x68>
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f605 	lsl.w	r6, r1, r5
 80069ea:	1d72      	adds	r2, r6, #5
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	4620      	mov	r0, r4
 80069f0:	f001 fd98 	bl	8008524 <_calloc_r>
 80069f4:	b160      	cbz	r0, 8006a10 <_Balloc+0x64>
 80069f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069fa:	e00e      	b.n	8006a1a <_Balloc+0x6e>
 80069fc:	2221      	movs	r2, #33	; 0x21
 80069fe:	2104      	movs	r1, #4
 8006a00:	4620      	mov	r0, r4
 8006a02:	f001 fd8f 	bl	8008524 <_calloc_r>
 8006a06:	69e3      	ldr	r3, [r4, #28]
 8006a08:	60f0      	str	r0, [r6, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e4      	bne.n	80069da <_Balloc+0x2e>
 8006a10:	2000      	movs	r0, #0
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	6802      	ldr	r2, [r0, #0]
 8006a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a20:	e7f7      	b.n	8006a12 <_Balloc+0x66>
 8006a22:	bf00      	nop
 8006a24:	080092b6 	.word	0x080092b6
 8006a28:	08009336 	.word	0x08009336

08006a2c <_Bfree>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	69c6      	ldr	r6, [r0, #28]
 8006a30:	4605      	mov	r5, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	b976      	cbnz	r6, 8006a54 <_Bfree+0x28>
 8006a36:	2010      	movs	r0, #16
 8006a38:	f7ff ff04 	bl	8006844 <malloc>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	61e8      	str	r0, [r5, #28]
 8006a40:	b920      	cbnz	r0, 8006a4c <_Bfree+0x20>
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <_Bfree+0x3c>)
 8006a44:	4809      	ldr	r0, [pc, #36]	; (8006a6c <_Bfree+0x40>)
 8006a46:	218f      	movs	r1, #143	; 0x8f
 8006a48:	f001 fd4e 	bl	80084e8 <__assert_func>
 8006a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a50:	6006      	str	r6, [r0, #0]
 8006a52:	60c6      	str	r6, [r0, #12]
 8006a54:	b13c      	cbz	r4, 8006a66 <_Bfree+0x3a>
 8006a56:	69eb      	ldr	r3, [r5, #28]
 8006a58:	6862      	ldr	r2, [r4, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a60:	6021      	str	r1, [r4, #0]
 8006a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	080092b6 	.word	0x080092b6
 8006a6c:	08009336 	.word	0x08009336

08006a70 <__multadd>:
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	690d      	ldr	r5, [r1, #16]
 8006a76:	4607      	mov	r7, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	461e      	mov	r6, r3
 8006a7c:	f101 0c14 	add.w	ip, r1, #20
 8006a80:	2000      	movs	r0, #0
 8006a82:	f8dc 3000 	ldr.w	r3, [ip]
 8006a86:	b299      	uxth	r1, r3
 8006a88:	fb02 6101 	mla	r1, r2, r1, r6
 8006a8c:	0c1e      	lsrs	r6, r3, #16
 8006a8e:	0c0b      	lsrs	r3, r1, #16
 8006a90:	fb02 3306 	mla	r3, r2, r6, r3
 8006a94:	b289      	uxth	r1, r1
 8006a96:	3001      	adds	r0, #1
 8006a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a9c:	4285      	cmp	r5, r0
 8006a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8006aa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aa6:	dcec      	bgt.n	8006a82 <__multadd+0x12>
 8006aa8:	b30e      	cbz	r6, 8006aee <__multadd+0x7e>
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dc19      	bgt.n	8006ae4 <__multadd+0x74>
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	f7ff ff79 	bl	80069ac <_Balloc>
 8006aba:	4680      	mov	r8, r0
 8006abc:	b928      	cbnz	r0, 8006aca <__multadd+0x5a>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <__multadd+0x84>)
 8006ac2:	480d      	ldr	r0, [pc, #52]	; (8006af8 <__multadd+0x88>)
 8006ac4:	21ba      	movs	r1, #186	; 0xba
 8006ac6:	f001 fd0f 	bl	80084e8 <__assert_func>
 8006aca:	6922      	ldr	r2, [r4, #16]
 8006acc:	3202      	adds	r2, #2
 8006ace:	f104 010c 	add.w	r1, r4, #12
 8006ad2:	0092      	lsls	r2, r2, #2
 8006ad4:	300c      	adds	r0, #12
 8006ad6:	f001 fcef 	bl	80084b8 <memcpy>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4638      	mov	r0, r7
 8006ade:	f7ff ffa5 	bl	8006a2c <_Bfree>
 8006ae2:	4644      	mov	r4, r8
 8006ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ae8:	3501      	adds	r5, #1
 8006aea:	615e      	str	r6, [r3, #20]
 8006aec:	6125      	str	r5, [r4, #16]
 8006aee:	4620      	mov	r0, r4
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	08009325 	.word	0x08009325
 8006af8:	08009336 	.word	0x08009336

08006afc <__s2b>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	460c      	mov	r4, r1
 8006b02:	4615      	mov	r5, r2
 8006b04:	461f      	mov	r7, r3
 8006b06:	2209      	movs	r2, #9
 8006b08:	3308      	adds	r3, #8
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b10:	2100      	movs	r1, #0
 8006b12:	2201      	movs	r2, #1
 8006b14:	429a      	cmp	r2, r3
 8006b16:	db09      	blt.n	8006b2c <__s2b+0x30>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff ff47 	bl	80069ac <_Balloc>
 8006b1e:	b940      	cbnz	r0, 8006b32 <__s2b+0x36>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <__s2b+0x8c>)
 8006b24:	4819      	ldr	r0, [pc, #100]	; (8006b8c <__s2b+0x90>)
 8006b26:	21d3      	movs	r1, #211	; 0xd3
 8006b28:	f001 fcde 	bl	80084e8 <__assert_func>
 8006b2c:	0052      	lsls	r2, r2, #1
 8006b2e:	3101      	adds	r1, #1
 8006b30:	e7f0      	b.n	8006b14 <__s2b+0x18>
 8006b32:	9b08      	ldr	r3, [sp, #32]
 8006b34:	6143      	str	r3, [r0, #20]
 8006b36:	2d09      	cmp	r5, #9
 8006b38:	f04f 0301 	mov.w	r3, #1
 8006b3c:	6103      	str	r3, [r0, #16]
 8006b3e:	dd16      	ble.n	8006b6e <__s2b+0x72>
 8006b40:	f104 0909 	add.w	r9, r4, #9
 8006b44:	46c8      	mov	r8, r9
 8006b46:	442c      	add	r4, r5
 8006b48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	3b30      	subs	r3, #48	; 0x30
 8006b50:	220a      	movs	r2, #10
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ff8c 	bl	8006a70 <__multadd>
 8006b58:	45a0      	cmp	r8, r4
 8006b5a:	d1f5      	bne.n	8006b48 <__s2b+0x4c>
 8006b5c:	f1a5 0408 	sub.w	r4, r5, #8
 8006b60:	444c      	add	r4, r9
 8006b62:	1b2d      	subs	r5, r5, r4
 8006b64:	1963      	adds	r3, r4, r5
 8006b66:	42bb      	cmp	r3, r7
 8006b68:	db04      	blt.n	8006b74 <__s2b+0x78>
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6e:	340a      	adds	r4, #10
 8006b70:	2509      	movs	r5, #9
 8006b72:	e7f6      	b.n	8006b62 <__s2b+0x66>
 8006b74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b78:	4601      	mov	r1, r0
 8006b7a:	3b30      	subs	r3, #48	; 0x30
 8006b7c:	220a      	movs	r2, #10
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ff76 	bl	8006a70 <__multadd>
 8006b84:	e7ee      	b.n	8006b64 <__s2b+0x68>
 8006b86:	bf00      	nop
 8006b88:	08009325 	.word	0x08009325
 8006b8c:	08009336 	.word	0x08009336

08006b90 <__hi0bits>:
 8006b90:	0c03      	lsrs	r3, r0, #16
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	b9d3      	cbnz	r3, 8006bcc <__hi0bits+0x3c>
 8006b96:	0400      	lsls	r0, r0, #16
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b9e:	bf04      	itt	eq
 8006ba0:	0200      	lsleq	r0, r0, #8
 8006ba2:	3308      	addeq	r3, #8
 8006ba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ba8:	bf04      	itt	eq
 8006baa:	0100      	lsleq	r0, r0, #4
 8006bac:	3304      	addeq	r3, #4
 8006bae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bb2:	bf04      	itt	eq
 8006bb4:	0080      	lsleq	r0, r0, #2
 8006bb6:	3302      	addeq	r3, #2
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	db05      	blt.n	8006bc8 <__hi0bits+0x38>
 8006bbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bc0:	f103 0301 	add.w	r3, r3, #1
 8006bc4:	bf08      	it	eq
 8006bc6:	2320      	moveq	r3, #32
 8006bc8:	4618      	mov	r0, r3
 8006bca:	4770      	bx	lr
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e7e4      	b.n	8006b9a <__hi0bits+0xa>

08006bd0 <__lo0bits>:
 8006bd0:	6803      	ldr	r3, [r0, #0]
 8006bd2:	f013 0207 	ands.w	r2, r3, #7
 8006bd6:	d00c      	beq.n	8006bf2 <__lo0bits+0x22>
 8006bd8:	07d9      	lsls	r1, r3, #31
 8006bda:	d422      	bmi.n	8006c22 <__lo0bits+0x52>
 8006bdc:	079a      	lsls	r2, r3, #30
 8006bde:	bf49      	itett	mi
 8006be0:	085b      	lsrmi	r3, r3, #1
 8006be2:	089b      	lsrpl	r3, r3, #2
 8006be4:	6003      	strmi	r3, [r0, #0]
 8006be6:	2201      	movmi	r2, #1
 8006be8:	bf5c      	itt	pl
 8006bea:	6003      	strpl	r3, [r0, #0]
 8006bec:	2202      	movpl	r2, #2
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4770      	bx	lr
 8006bf2:	b299      	uxth	r1, r3
 8006bf4:	b909      	cbnz	r1, 8006bfa <__lo0bits+0x2a>
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	b2d9      	uxtb	r1, r3
 8006bfc:	b909      	cbnz	r1, 8006c02 <__lo0bits+0x32>
 8006bfe:	3208      	adds	r2, #8
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	0719      	lsls	r1, r3, #28
 8006c04:	bf04      	itt	eq
 8006c06:	091b      	lsreq	r3, r3, #4
 8006c08:	3204      	addeq	r2, #4
 8006c0a:	0799      	lsls	r1, r3, #30
 8006c0c:	bf04      	itt	eq
 8006c0e:	089b      	lsreq	r3, r3, #2
 8006c10:	3202      	addeq	r2, #2
 8006c12:	07d9      	lsls	r1, r3, #31
 8006c14:	d403      	bmi.n	8006c1e <__lo0bits+0x4e>
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	f102 0201 	add.w	r2, r2, #1
 8006c1c:	d003      	beq.n	8006c26 <__lo0bits+0x56>
 8006c1e:	6003      	str	r3, [r0, #0]
 8006c20:	e7e5      	b.n	8006bee <__lo0bits+0x1e>
 8006c22:	2200      	movs	r2, #0
 8006c24:	e7e3      	b.n	8006bee <__lo0bits+0x1e>
 8006c26:	2220      	movs	r2, #32
 8006c28:	e7e1      	b.n	8006bee <__lo0bits+0x1e>
	...

08006c2c <__i2b>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	460c      	mov	r4, r1
 8006c30:	2101      	movs	r1, #1
 8006c32:	f7ff febb 	bl	80069ac <_Balloc>
 8006c36:	4602      	mov	r2, r0
 8006c38:	b928      	cbnz	r0, 8006c46 <__i2b+0x1a>
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <__i2b+0x24>)
 8006c3c:	4805      	ldr	r0, [pc, #20]	; (8006c54 <__i2b+0x28>)
 8006c3e:	f240 1145 	movw	r1, #325	; 0x145
 8006c42:	f001 fc51 	bl	80084e8 <__assert_func>
 8006c46:	2301      	movs	r3, #1
 8006c48:	6144      	str	r4, [r0, #20]
 8006c4a:	6103      	str	r3, [r0, #16]
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	bf00      	nop
 8006c50:	08009325 	.word	0x08009325
 8006c54:	08009336 	.word	0x08009336

08006c58 <__multiply>:
 8006c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	4691      	mov	r9, r2
 8006c5e:	690a      	ldr	r2, [r1, #16]
 8006c60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	bfb8      	it	lt
 8006c68:	460b      	movlt	r3, r1
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	bfbc      	itt	lt
 8006c6e:	464c      	movlt	r4, r9
 8006c70:	4699      	movlt	r9, r3
 8006c72:	6927      	ldr	r7, [r4, #16]
 8006c74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c78:	68a3      	ldr	r3, [r4, #8]
 8006c7a:	6861      	ldr	r1, [r4, #4]
 8006c7c:	eb07 060a 	add.w	r6, r7, sl
 8006c80:	42b3      	cmp	r3, r6
 8006c82:	b085      	sub	sp, #20
 8006c84:	bfb8      	it	lt
 8006c86:	3101      	addlt	r1, #1
 8006c88:	f7ff fe90 	bl	80069ac <_Balloc>
 8006c8c:	b930      	cbnz	r0, 8006c9c <__multiply+0x44>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4b44      	ldr	r3, [pc, #272]	; (8006da4 <__multiply+0x14c>)
 8006c92:	4845      	ldr	r0, [pc, #276]	; (8006da8 <__multiply+0x150>)
 8006c94:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c98:	f001 fc26 	bl	80084e8 <__assert_func>
 8006c9c:	f100 0514 	add.w	r5, r0, #20
 8006ca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4543      	cmp	r3, r8
 8006caa:	d321      	bcc.n	8006cf0 <__multiply+0x98>
 8006cac:	f104 0314 	add.w	r3, r4, #20
 8006cb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006cb4:	f109 0314 	add.w	r3, r9, #20
 8006cb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006cbc:	9202      	str	r2, [sp, #8]
 8006cbe:	1b3a      	subs	r2, r7, r4
 8006cc0:	3a15      	subs	r2, #21
 8006cc2:	f022 0203 	bic.w	r2, r2, #3
 8006cc6:	3204      	adds	r2, #4
 8006cc8:	f104 0115 	add.w	r1, r4, #21
 8006ccc:	428f      	cmp	r7, r1
 8006cce:	bf38      	it	cc
 8006cd0:	2204      	movcc	r2, #4
 8006cd2:	9201      	str	r2, [sp, #4]
 8006cd4:	9a02      	ldr	r2, [sp, #8]
 8006cd6:	9303      	str	r3, [sp, #12]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d80c      	bhi.n	8006cf6 <__multiply+0x9e>
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	dd03      	ble.n	8006ce8 <__multiply+0x90>
 8006ce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d05b      	beq.n	8006da0 <__multiply+0x148>
 8006ce8:	6106      	str	r6, [r0, #16]
 8006cea:	b005      	add	sp, #20
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf0:	f843 2b04 	str.w	r2, [r3], #4
 8006cf4:	e7d8      	b.n	8006ca8 <__multiply+0x50>
 8006cf6:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cfa:	f1ba 0f00 	cmp.w	sl, #0
 8006cfe:	d024      	beq.n	8006d4a <__multiply+0xf2>
 8006d00:	f104 0e14 	add.w	lr, r4, #20
 8006d04:	46a9      	mov	r9, r5
 8006d06:	f04f 0c00 	mov.w	ip, #0
 8006d0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d0e:	f8d9 1000 	ldr.w	r1, [r9]
 8006d12:	fa1f fb82 	uxth.w	fp, r2
 8006d16:	b289      	uxth	r1, r1
 8006d18:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d20:	f8d9 2000 	ldr.w	r2, [r9]
 8006d24:	4461      	add	r1, ip
 8006d26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d32:	b289      	uxth	r1, r1
 8006d34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d38:	4577      	cmp	r7, lr
 8006d3a:	f849 1b04 	str.w	r1, [r9], #4
 8006d3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d42:	d8e2      	bhi.n	8006d0a <__multiply+0xb2>
 8006d44:	9a01      	ldr	r2, [sp, #4]
 8006d46:	f845 c002 	str.w	ip, [r5, r2]
 8006d4a:	9a03      	ldr	r2, [sp, #12]
 8006d4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d50:	3304      	adds	r3, #4
 8006d52:	f1b9 0f00 	cmp.w	r9, #0
 8006d56:	d021      	beq.n	8006d9c <__multiply+0x144>
 8006d58:	6829      	ldr	r1, [r5, #0]
 8006d5a:	f104 0c14 	add.w	ip, r4, #20
 8006d5e:	46ae      	mov	lr, r5
 8006d60:	f04f 0a00 	mov.w	sl, #0
 8006d64:	f8bc b000 	ldrh.w	fp, [ip]
 8006d68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d6c:	fb09 220b 	mla	r2, r9, fp, r2
 8006d70:	4452      	add	r2, sl
 8006d72:	b289      	uxth	r1, r1
 8006d74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d78:	f84e 1b04 	str.w	r1, [lr], #4
 8006d7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d84:	f8be 1000 	ldrh.w	r1, [lr]
 8006d88:	fb09 110a 	mla	r1, r9, sl, r1
 8006d8c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d90:	4567      	cmp	r7, ip
 8006d92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d96:	d8e5      	bhi.n	8006d64 <__multiply+0x10c>
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	50a9      	str	r1, [r5, r2]
 8006d9c:	3504      	adds	r5, #4
 8006d9e:	e799      	b.n	8006cd4 <__multiply+0x7c>
 8006da0:	3e01      	subs	r6, #1
 8006da2:	e79b      	b.n	8006cdc <__multiply+0x84>
 8006da4:	08009325 	.word	0x08009325
 8006da8:	08009336 	.word	0x08009336

08006dac <__pow5mult>:
 8006dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db0:	4615      	mov	r5, r2
 8006db2:	f012 0203 	ands.w	r2, r2, #3
 8006db6:	4606      	mov	r6, r0
 8006db8:	460f      	mov	r7, r1
 8006dba:	d007      	beq.n	8006dcc <__pow5mult+0x20>
 8006dbc:	4c25      	ldr	r4, [pc, #148]	; (8006e54 <__pow5mult+0xa8>)
 8006dbe:	3a01      	subs	r2, #1
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dc6:	f7ff fe53 	bl	8006a70 <__multadd>
 8006dca:	4607      	mov	r7, r0
 8006dcc:	10ad      	asrs	r5, r5, #2
 8006dce:	d03d      	beq.n	8006e4c <__pow5mult+0xa0>
 8006dd0:	69f4      	ldr	r4, [r6, #28]
 8006dd2:	b97c      	cbnz	r4, 8006df4 <__pow5mult+0x48>
 8006dd4:	2010      	movs	r0, #16
 8006dd6:	f7ff fd35 	bl	8006844 <malloc>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	61f0      	str	r0, [r6, #28]
 8006dde:	b928      	cbnz	r0, 8006dec <__pow5mult+0x40>
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <__pow5mult+0xac>)
 8006de2:	481e      	ldr	r0, [pc, #120]	; (8006e5c <__pow5mult+0xb0>)
 8006de4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006de8:	f001 fb7e 	bl	80084e8 <__assert_func>
 8006dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006df0:	6004      	str	r4, [r0, #0]
 8006df2:	60c4      	str	r4, [r0, #12]
 8006df4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dfc:	b94c      	cbnz	r4, 8006e12 <__pow5mult+0x66>
 8006dfe:	f240 2171 	movw	r1, #625	; 0x271
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7ff ff12 	bl	8006c2c <__i2b>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e0e:	4604      	mov	r4, r0
 8006e10:	6003      	str	r3, [r0, #0]
 8006e12:	f04f 0900 	mov.w	r9, #0
 8006e16:	07eb      	lsls	r3, r5, #31
 8006e18:	d50a      	bpl.n	8006e30 <__pow5mult+0x84>
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7ff ff1a 	bl	8006c58 <__multiply>
 8006e24:	4639      	mov	r1, r7
 8006e26:	4680      	mov	r8, r0
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7ff fdff 	bl	8006a2c <_Bfree>
 8006e2e:	4647      	mov	r7, r8
 8006e30:	106d      	asrs	r5, r5, #1
 8006e32:	d00b      	beq.n	8006e4c <__pow5mult+0xa0>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	b938      	cbnz	r0, 8006e48 <__pow5mult+0x9c>
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff ff0b 	bl	8006c58 <__multiply>
 8006e42:	6020      	str	r0, [r4, #0]
 8006e44:	f8c0 9000 	str.w	r9, [r0]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	e7e4      	b.n	8006e16 <__pow5mult+0x6a>
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e52:	bf00      	nop
 8006e54:	08009480 	.word	0x08009480
 8006e58:	080092b6 	.word	0x080092b6
 8006e5c:	08009336 	.word	0x08009336

08006e60 <__lshift>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	460c      	mov	r4, r1
 8006e66:	6849      	ldr	r1, [r1, #4]
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e6e:	68a3      	ldr	r3, [r4, #8]
 8006e70:	4607      	mov	r7, r0
 8006e72:	4691      	mov	r9, r2
 8006e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e78:	f108 0601 	add.w	r6, r8, #1
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	db0b      	blt.n	8006e98 <__lshift+0x38>
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff fd93 	bl	80069ac <_Balloc>
 8006e86:	4605      	mov	r5, r0
 8006e88:	b948      	cbnz	r0, 8006e9e <__lshift+0x3e>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <__lshift+0xd0>)
 8006e8e:	4829      	ldr	r0, [pc, #164]	; (8006f34 <__lshift+0xd4>)
 8006e90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e94:	f001 fb28 	bl	80084e8 <__assert_func>
 8006e98:	3101      	adds	r1, #1
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	e7ee      	b.n	8006e7c <__lshift+0x1c>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f100 0114 	add.w	r1, r0, #20
 8006ea4:	f100 0210 	add.w	r2, r0, #16
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	4553      	cmp	r3, sl
 8006eac:	db33      	blt.n	8006f16 <__lshift+0xb6>
 8006eae:	6920      	ldr	r0, [r4, #16]
 8006eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006eb4:	f104 0314 	add.w	r3, r4, #20
 8006eb8:	f019 091f 	ands.w	r9, r9, #31
 8006ebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ec4:	d02b      	beq.n	8006f1e <__lshift+0xbe>
 8006ec6:	f1c9 0e20 	rsb	lr, r9, #32
 8006eca:	468a      	mov	sl, r1
 8006ecc:	2200      	movs	r2, #0
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ed4:	4310      	orrs	r0, r2
 8006ed6:	f84a 0b04 	str.w	r0, [sl], #4
 8006eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ede:	459c      	cmp	ip, r3
 8006ee0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ee4:	d8f3      	bhi.n	8006ece <__lshift+0x6e>
 8006ee6:	ebac 0304 	sub.w	r3, ip, r4
 8006eea:	3b15      	subs	r3, #21
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	f104 0015 	add.w	r0, r4, #21
 8006ef6:	4584      	cmp	ip, r0
 8006ef8:	bf38      	it	cc
 8006efa:	2304      	movcc	r3, #4
 8006efc:	50ca      	str	r2, [r1, r3]
 8006efe:	b10a      	cbz	r2, 8006f04 <__lshift+0xa4>
 8006f00:	f108 0602 	add.w	r6, r8, #2
 8006f04:	3e01      	subs	r6, #1
 8006f06:	4638      	mov	r0, r7
 8006f08:	612e      	str	r6, [r5, #16]
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	f7ff fd8e 	bl	8006a2c <_Bfree>
 8006f10:	4628      	mov	r0, r5
 8006f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	e7c5      	b.n	8006eaa <__lshift+0x4a>
 8006f1e:	3904      	subs	r1, #4
 8006f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f28:	459c      	cmp	ip, r3
 8006f2a:	d8f9      	bhi.n	8006f20 <__lshift+0xc0>
 8006f2c:	e7ea      	b.n	8006f04 <__lshift+0xa4>
 8006f2e:	bf00      	nop
 8006f30:	08009325 	.word	0x08009325
 8006f34:	08009336 	.word	0x08009336

08006f38 <__mcmp>:
 8006f38:	b530      	push	{r4, r5, lr}
 8006f3a:	6902      	ldr	r2, [r0, #16]
 8006f3c:	690c      	ldr	r4, [r1, #16]
 8006f3e:	1b12      	subs	r2, r2, r4
 8006f40:	d10e      	bne.n	8006f60 <__mcmp+0x28>
 8006f42:	f100 0314 	add.w	r3, r0, #20
 8006f46:	3114      	adds	r1, #20
 8006f48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f58:	42a5      	cmp	r5, r4
 8006f5a:	d003      	beq.n	8006f64 <__mcmp+0x2c>
 8006f5c:	d305      	bcc.n	8006f6a <__mcmp+0x32>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4610      	mov	r0, r2
 8006f62:	bd30      	pop	{r4, r5, pc}
 8006f64:	4283      	cmp	r3, r0
 8006f66:	d3f3      	bcc.n	8006f50 <__mcmp+0x18>
 8006f68:	e7fa      	b.n	8006f60 <__mcmp+0x28>
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6e:	e7f7      	b.n	8006f60 <__mcmp+0x28>

08006f70 <__mdiff>:
 8006f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	460c      	mov	r4, r1
 8006f76:	4606      	mov	r6, r0
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4690      	mov	r8, r2
 8006f7e:	f7ff ffdb 	bl	8006f38 <__mcmp>
 8006f82:	1e05      	subs	r5, r0, #0
 8006f84:	d110      	bne.n	8006fa8 <__mdiff+0x38>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff fd0f 	bl	80069ac <_Balloc>
 8006f8e:	b930      	cbnz	r0, 8006f9e <__mdiff+0x2e>
 8006f90:	4b3a      	ldr	r3, [pc, #232]	; (800707c <__mdiff+0x10c>)
 8006f92:	4602      	mov	r2, r0
 8006f94:	f240 2137 	movw	r1, #567	; 0x237
 8006f98:	4839      	ldr	r0, [pc, #228]	; (8007080 <__mdiff+0x110>)
 8006f9a:	f001 faa5 	bl	80084e8 <__assert_func>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa8:	bfa4      	itt	ge
 8006faa:	4643      	movge	r3, r8
 8006fac:	46a0      	movge	r8, r4
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fb4:	bfa6      	itte	ge
 8006fb6:	461c      	movge	r4, r3
 8006fb8:	2500      	movge	r5, #0
 8006fba:	2501      	movlt	r5, #1
 8006fbc:	f7ff fcf6 	bl	80069ac <_Balloc>
 8006fc0:	b920      	cbnz	r0, 8006fcc <__mdiff+0x5c>
 8006fc2:	4b2e      	ldr	r3, [pc, #184]	; (800707c <__mdiff+0x10c>)
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	f240 2145 	movw	r1, #581	; 0x245
 8006fca:	e7e5      	b.n	8006f98 <__mdiff+0x28>
 8006fcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fd0:	6926      	ldr	r6, [r4, #16]
 8006fd2:	60c5      	str	r5, [r0, #12]
 8006fd4:	f104 0914 	add.w	r9, r4, #20
 8006fd8:	f108 0514 	add.w	r5, r8, #20
 8006fdc:	f100 0e14 	add.w	lr, r0, #20
 8006fe0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006fe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fe8:	f108 0210 	add.w	r2, r8, #16
 8006fec:	46f2      	mov	sl, lr
 8006fee:	2100      	movs	r1, #0
 8006ff0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ff4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ff8:	fa11 f88b 	uxtah	r8, r1, fp
 8006ffc:	b299      	uxth	r1, r3
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	eba8 0801 	sub.w	r8, r8, r1
 8007004:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007008:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800700c:	fa1f f888 	uxth.w	r8, r8
 8007010:	1419      	asrs	r1, r3, #16
 8007012:	454e      	cmp	r6, r9
 8007014:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007018:	f84a 3b04 	str.w	r3, [sl], #4
 800701c:	d8e8      	bhi.n	8006ff0 <__mdiff+0x80>
 800701e:	1b33      	subs	r3, r6, r4
 8007020:	3b15      	subs	r3, #21
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	3304      	adds	r3, #4
 8007028:	3415      	adds	r4, #21
 800702a:	42a6      	cmp	r6, r4
 800702c:	bf38      	it	cc
 800702e:	2304      	movcc	r3, #4
 8007030:	441d      	add	r5, r3
 8007032:	4473      	add	r3, lr
 8007034:	469e      	mov	lr, r3
 8007036:	462e      	mov	r6, r5
 8007038:	4566      	cmp	r6, ip
 800703a:	d30e      	bcc.n	800705a <__mdiff+0xea>
 800703c:	f10c 0203 	add.w	r2, ip, #3
 8007040:	1b52      	subs	r2, r2, r5
 8007042:	f022 0203 	bic.w	r2, r2, #3
 8007046:	3d03      	subs	r5, #3
 8007048:	45ac      	cmp	ip, r5
 800704a:	bf38      	it	cc
 800704c:	2200      	movcc	r2, #0
 800704e:	4413      	add	r3, r2
 8007050:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007054:	b17a      	cbz	r2, 8007076 <__mdiff+0x106>
 8007056:	6107      	str	r7, [r0, #16]
 8007058:	e7a4      	b.n	8006fa4 <__mdiff+0x34>
 800705a:	f856 8b04 	ldr.w	r8, [r6], #4
 800705e:	fa11 f288 	uxtah	r2, r1, r8
 8007062:	1414      	asrs	r4, r2, #16
 8007064:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007068:	b292      	uxth	r2, r2
 800706a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800706e:	f84e 2b04 	str.w	r2, [lr], #4
 8007072:	1421      	asrs	r1, r4, #16
 8007074:	e7e0      	b.n	8007038 <__mdiff+0xc8>
 8007076:	3f01      	subs	r7, #1
 8007078:	e7ea      	b.n	8007050 <__mdiff+0xe0>
 800707a:	bf00      	nop
 800707c:	08009325 	.word	0x08009325
 8007080:	08009336 	.word	0x08009336

08007084 <__ulp>:
 8007084:	b082      	sub	sp, #8
 8007086:	ed8d 0b00 	vstr	d0, [sp]
 800708a:	9a01      	ldr	r2, [sp, #4]
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <__ulp+0x48>)
 800708e:	4013      	ands	r3, r2
 8007090:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007094:	2b00      	cmp	r3, #0
 8007096:	dc08      	bgt.n	80070aa <__ulp+0x26>
 8007098:	425b      	negs	r3, r3
 800709a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800709e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070a2:	da04      	bge.n	80070ae <__ulp+0x2a>
 80070a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070a8:	4113      	asrs	r3, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	e008      	b.n	80070c0 <__ulp+0x3c>
 80070ae:	f1a2 0314 	sub.w	r3, r2, #20
 80070b2:	2b1e      	cmp	r3, #30
 80070b4:	bfda      	itte	le
 80070b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80070ba:	40da      	lsrle	r2, r3
 80070bc:	2201      	movgt	r2, #1
 80070be:	2300      	movs	r3, #0
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	ec41 0b10 	vmov	d0, r0, r1
 80070c8:	b002      	add	sp, #8
 80070ca:	4770      	bx	lr
 80070cc:	7ff00000 	.word	0x7ff00000

080070d0 <__b2d>:
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d4:	6906      	ldr	r6, [r0, #16]
 80070d6:	f100 0814 	add.w	r8, r0, #20
 80070da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80070de:	1f37      	subs	r7, r6, #4
 80070e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80070e4:	4610      	mov	r0, r2
 80070e6:	f7ff fd53 	bl	8006b90 <__hi0bits>
 80070ea:	f1c0 0320 	rsb	r3, r0, #32
 80070ee:	280a      	cmp	r0, #10
 80070f0:	600b      	str	r3, [r1, #0]
 80070f2:	491b      	ldr	r1, [pc, #108]	; (8007160 <__b2d+0x90>)
 80070f4:	dc15      	bgt.n	8007122 <__b2d+0x52>
 80070f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80070fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80070fe:	45b8      	cmp	r8, r7
 8007100:	ea43 0501 	orr.w	r5, r3, r1
 8007104:	bf34      	ite	cc
 8007106:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800710a:	2300      	movcs	r3, #0
 800710c:	3015      	adds	r0, #21
 800710e:	fa02 f000 	lsl.w	r0, r2, r0
 8007112:	fa23 f30c 	lsr.w	r3, r3, ip
 8007116:	4303      	orrs	r3, r0
 8007118:	461c      	mov	r4, r3
 800711a:	ec45 4b10 	vmov	d0, r4, r5
 800711e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007122:	45b8      	cmp	r8, r7
 8007124:	bf3a      	itte	cc
 8007126:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800712a:	f1a6 0708 	subcc.w	r7, r6, #8
 800712e:	2300      	movcs	r3, #0
 8007130:	380b      	subs	r0, #11
 8007132:	d012      	beq.n	800715a <__b2d+0x8a>
 8007134:	f1c0 0120 	rsb	r1, r0, #32
 8007138:	fa23 f401 	lsr.w	r4, r3, r1
 800713c:	4082      	lsls	r2, r0
 800713e:	4322      	orrs	r2, r4
 8007140:	4547      	cmp	r7, r8
 8007142:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007146:	bf8c      	ite	hi
 8007148:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800714c:	2200      	movls	r2, #0
 800714e:	4083      	lsls	r3, r0
 8007150:	40ca      	lsrs	r2, r1
 8007152:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007156:	4313      	orrs	r3, r2
 8007158:	e7de      	b.n	8007118 <__b2d+0x48>
 800715a:	ea42 0501 	orr.w	r5, r2, r1
 800715e:	e7db      	b.n	8007118 <__b2d+0x48>
 8007160:	3ff00000 	.word	0x3ff00000

08007164 <__d2b>:
 8007164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007168:	460f      	mov	r7, r1
 800716a:	2101      	movs	r1, #1
 800716c:	ec59 8b10 	vmov	r8, r9, d0
 8007170:	4616      	mov	r6, r2
 8007172:	f7ff fc1b 	bl	80069ac <_Balloc>
 8007176:	4604      	mov	r4, r0
 8007178:	b930      	cbnz	r0, 8007188 <__d2b+0x24>
 800717a:	4602      	mov	r2, r0
 800717c:	4b24      	ldr	r3, [pc, #144]	; (8007210 <__d2b+0xac>)
 800717e:	4825      	ldr	r0, [pc, #148]	; (8007214 <__d2b+0xb0>)
 8007180:	f240 310f 	movw	r1, #783	; 0x30f
 8007184:	f001 f9b0 	bl	80084e8 <__assert_func>
 8007188:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800718c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007190:	bb2d      	cbnz	r5, 80071de <__d2b+0x7a>
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	f1b8 0300 	subs.w	r3, r8, #0
 8007198:	d026      	beq.n	80071e8 <__d2b+0x84>
 800719a:	4668      	mov	r0, sp
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	f7ff fd17 	bl	8006bd0 <__lo0bits>
 80071a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071a6:	b1e8      	cbz	r0, 80071e4 <__d2b+0x80>
 80071a8:	f1c0 0320 	rsb	r3, r0, #32
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	430b      	orrs	r3, r1
 80071b2:	40c2      	lsrs	r2, r0
 80071b4:	6163      	str	r3, [r4, #20]
 80071b6:	9201      	str	r2, [sp, #4]
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	61a3      	str	r3, [r4, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf14      	ite	ne
 80071c0:	2202      	movne	r2, #2
 80071c2:	2201      	moveq	r2, #1
 80071c4:	6122      	str	r2, [r4, #16]
 80071c6:	b1bd      	cbz	r5, 80071f8 <__d2b+0x94>
 80071c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80071cc:	4405      	add	r5, r0
 80071ce:	603d      	str	r5, [r7, #0]
 80071d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071d4:	6030      	str	r0, [r6, #0]
 80071d6:	4620      	mov	r0, r4
 80071d8:	b003      	add	sp, #12
 80071da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071e2:	e7d6      	b.n	8007192 <__d2b+0x2e>
 80071e4:	6161      	str	r1, [r4, #20]
 80071e6:	e7e7      	b.n	80071b8 <__d2b+0x54>
 80071e8:	a801      	add	r0, sp, #4
 80071ea:	f7ff fcf1 	bl	8006bd0 <__lo0bits>
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	6163      	str	r3, [r4, #20]
 80071f2:	3020      	adds	r0, #32
 80071f4:	2201      	movs	r2, #1
 80071f6:	e7e5      	b.n	80071c4 <__d2b+0x60>
 80071f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007200:	6038      	str	r0, [r7, #0]
 8007202:	6918      	ldr	r0, [r3, #16]
 8007204:	f7ff fcc4 	bl	8006b90 <__hi0bits>
 8007208:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800720c:	e7e2      	b.n	80071d4 <__d2b+0x70>
 800720e:	bf00      	nop
 8007210:	08009325 	.word	0x08009325
 8007214:	08009336 	.word	0x08009336

08007218 <__ratio>:
 8007218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4688      	mov	r8, r1
 800721e:	4669      	mov	r1, sp
 8007220:	4681      	mov	r9, r0
 8007222:	f7ff ff55 	bl	80070d0 <__b2d>
 8007226:	a901      	add	r1, sp, #4
 8007228:	4640      	mov	r0, r8
 800722a:	ec55 4b10 	vmov	r4, r5, d0
 800722e:	f7ff ff4f 	bl	80070d0 <__b2d>
 8007232:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007236:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800723a:	eba3 0c02 	sub.w	ip, r3, r2
 800723e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007248:	ec51 0b10 	vmov	r0, r1, d0
 800724c:	2b00      	cmp	r3, #0
 800724e:	bfd6      	itet	le
 8007250:	460a      	movle	r2, r1
 8007252:	462a      	movgt	r2, r5
 8007254:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007258:	468b      	mov	fp, r1
 800725a:	462f      	mov	r7, r5
 800725c:	bfd4      	ite	le
 800725e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007262:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007266:	4620      	mov	r0, r4
 8007268:	ee10 2a10 	vmov	r2, s0
 800726c:	465b      	mov	r3, fp
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 faec 	bl	800084c <__aeabi_ddiv>
 8007274:	ec41 0b10 	vmov	d0, r0, r1
 8007278:	b003      	add	sp, #12
 800727a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800727e <__copybits>:
 800727e:	3901      	subs	r1, #1
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	1149      	asrs	r1, r1, #5
 8007284:	6914      	ldr	r4, [r2, #16]
 8007286:	3101      	adds	r1, #1
 8007288:	f102 0314 	add.w	r3, r2, #20
 800728c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007290:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007294:	1f05      	subs	r5, r0, #4
 8007296:	42a3      	cmp	r3, r4
 8007298:	d30c      	bcc.n	80072b4 <__copybits+0x36>
 800729a:	1aa3      	subs	r3, r4, r2
 800729c:	3b11      	subs	r3, #17
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	3211      	adds	r2, #17
 80072a4:	42a2      	cmp	r2, r4
 80072a6:	bf88      	it	hi
 80072a8:	2300      	movhi	r3, #0
 80072aa:	4418      	add	r0, r3
 80072ac:	2300      	movs	r3, #0
 80072ae:	4288      	cmp	r0, r1
 80072b0:	d305      	bcc.n	80072be <__copybits+0x40>
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80072b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80072bc:	e7eb      	b.n	8007296 <__copybits+0x18>
 80072be:	f840 3b04 	str.w	r3, [r0], #4
 80072c2:	e7f4      	b.n	80072ae <__copybits+0x30>

080072c4 <__any_on>:
 80072c4:	f100 0214 	add.w	r2, r0, #20
 80072c8:	6900      	ldr	r0, [r0, #16]
 80072ca:	114b      	asrs	r3, r1, #5
 80072cc:	4298      	cmp	r0, r3
 80072ce:	b510      	push	{r4, lr}
 80072d0:	db11      	blt.n	80072f6 <__any_on+0x32>
 80072d2:	dd0a      	ble.n	80072ea <__any_on+0x26>
 80072d4:	f011 011f 	ands.w	r1, r1, #31
 80072d8:	d007      	beq.n	80072ea <__any_on+0x26>
 80072da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072de:	fa24 f001 	lsr.w	r0, r4, r1
 80072e2:	fa00 f101 	lsl.w	r1, r0, r1
 80072e6:	428c      	cmp	r4, r1
 80072e8:	d10b      	bne.n	8007302 <__any_on+0x3e>
 80072ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d803      	bhi.n	80072fa <__any_on+0x36>
 80072f2:	2000      	movs	r0, #0
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	4603      	mov	r3, r0
 80072f8:	e7f7      	b.n	80072ea <__any_on+0x26>
 80072fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072fe:	2900      	cmp	r1, #0
 8007300:	d0f5      	beq.n	80072ee <__any_on+0x2a>
 8007302:	2001      	movs	r0, #1
 8007304:	e7f6      	b.n	80072f4 <__any_on+0x30>

08007306 <sulp>:
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	ec45 4b10 	vmov	d0, r4, r5
 8007310:	4616      	mov	r6, r2
 8007312:	f7ff feb7 	bl	8007084 <__ulp>
 8007316:	ec51 0b10 	vmov	r0, r1, d0
 800731a:	b17e      	cbz	r6, 800733c <sulp+0x36>
 800731c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007320:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007324:	2b00      	cmp	r3, #0
 8007326:	dd09      	ble.n	800733c <sulp+0x36>
 8007328:	051b      	lsls	r3, r3, #20
 800732a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800732e:	2400      	movs	r4, #0
 8007330:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007334:	4622      	mov	r2, r4
 8007336:	462b      	mov	r3, r5
 8007338:	f7f9 f95e 	bl	80005f8 <__aeabi_dmul>
 800733c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007340 <_strtod_l>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	ed2d 8b02 	vpush	{d8}
 8007348:	b09b      	sub	sp, #108	; 0x6c
 800734a:	4604      	mov	r4, r0
 800734c:	9213      	str	r2, [sp, #76]	; 0x4c
 800734e:	2200      	movs	r2, #0
 8007350:	9216      	str	r2, [sp, #88]	; 0x58
 8007352:	460d      	mov	r5, r1
 8007354:	f04f 0800 	mov.w	r8, #0
 8007358:	f04f 0900 	mov.w	r9, #0
 800735c:	460a      	mov	r2, r1
 800735e:	9215      	str	r2, [sp, #84]	; 0x54
 8007360:	7811      	ldrb	r1, [r2, #0]
 8007362:	292b      	cmp	r1, #43	; 0x2b
 8007364:	d04c      	beq.n	8007400 <_strtod_l+0xc0>
 8007366:	d83a      	bhi.n	80073de <_strtod_l+0x9e>
 8007368:	290d      	cmp	r1, #13
 800736a:	d834      	bhi.n	80073d6 <_strtod_l+0x96>
 800736c:	2908      	cmp	r1, #8
 800736e:	d834      	bhi.n	80073da <_strtod_l+0x9a>
 8007370:	2900      	cmp	r1, #0
 8007372:	d03d      	beq.n	80073f0 <_strtod_l+0xb0>
 8007374:	2200      	movs	r2, #0
 8007376:	920a      	str	r2, [sp, #40]	; 0x28
 8007378:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800737a:	7832      	ldrb	r2, [r6, #0]
 800737c:	2a30      	cmp	r2, #48	; 0x30
 800737e:	f040 80b4 	bne.w	80074ea <_strtod_l+0x1aa>
 8007382:	7872      	ldrb	r2, [r6, #1]
 8007384:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007388:	2a58      	cmp	r2, #88	; 0x58
 800738a:	d170      	bne.n	800746e <_strtod_l+0x12e>
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	ab16      	add	r3, sp, #88	; 0x58
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4a8e      	ldr	r2, [pc, #568]	; (80075d0 <_strtod_l+0x290>)
 8007398:	ab17      	add	r3, sp, #92	; 0x5c
 800739a:	a915      	add	r1, sp, #84	; 0x54
 800739c:	4620      	mov	r0, r4
 800739e:	f001 f93f 	bl	8008620 <__gethex>
 80073a2:	f010 070f 	ands.w	r7, r0, #15
 80073a6:	4605      	mov	r5, r0
 80073a8:	d005      	beq.n	80073b6 <_strtod_l+0x76>
 80073aa:	2f06      	cmp	r7, #6
 80073ac:	d12a      	bne.n	8007404 <_strtod_l+0xc4>
 80073ae:	3601      	adds	r6, #1
 80073b0:	2300      	movs	r3, #0
 80073b2:	9615      	str	r6, [sp, #84]	; 0x54
 80073b4:	930a      	str	r3, [sp, #40]	; 0x28
 80073b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 857f 	bne.w	8007ebc <_strtod_l+0xb7c>
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	b1db      	cbz	r3, 80073fa <_strtod_l+0xba>
 80073c2:	4642      	mov	r2, r8
 80073c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073c8:	ec43 2b10 	vmov	d0, r2, r3
 80073cc:	b01b      	add	sp, #108	; 0x6c
 80073ce:	ecbd 8b02 	vpop	{d8}
 80073d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	2920      	cmp	r1, #32
 80073d8:	d1cc      	bne.n	8007374 <_strtod_l+0x34>
 80073da:	3201      	adds	r2, #1
 80073dc:	e7bf      	b.n	800735e <_strtod_l+0x1e>
 80073de:	292d      	cmp	r1, #45	; 0x2d
 80073e0:	d1c8      	bne.n	8007374 <_strtod_l+0x34>
 80073e2:	2101      	movs	r1, #1
 80073e4:	910a      	str	r1, [sp, #40]	; 0x28
 80073e6:	1c51      	adds	r1, r2, #1
 80073e8:	9115      	str	r1, [sp, #84]	; 0x54
 80073ea:	7852      	ldrb	r2, [r2, #1]
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	d1c3      	bne.n	8007378 <_strtod_l+0x38>
 80073f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073f2:	9515      	str	r5, [sp, #84]	; 0x54
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 855f 	bne.w	8007eb8 <_strtod_l+0xb78>
 80073fa:	4642      	mov	r2, r8
 80073fc:	464b      	mov	r3, r9
 80073fe:	e7e3      	b.n	80073c8 <_strtod_l+0x88>
 8007400:	2100      	movs	r1, #0
 8007402:	e7ef      	b.n	80073e4 <_strtod_l+0xa4>
 8007404:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007406:	b13a      	cbz	r2, 8007418 <_strtod_l+0xd8>
 8007408:	2135      	movs	r1, #53	; 0x35
 800740a:	a818      	add	r0, sp, #96	; 0x60
 800740c:	f7ff ff37 	bl	800727e <__copybits>
 8007410:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff fb0a 	bl	8006a2c <_Bfree>
 8007418:	3f01      	subs	r7, #1
 800741a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800741c:	2f04      	cmp	r7, #4
 800741e:	d806      	bhi.n	800742e <_strtod_l+0xee>
 8007420:	e8df f007 	tbb	[pc, r7]
 8007424:	201d0314 	.word	0x201d0314
 8007428:	14          	.byte	0x14
 8007429:	00          	.byte	0x00
 800742a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800742e:	05e9      	lsls	r1, r5, #23
 8007430:	bf48      	it	mi
 8007432:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007436:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800743a:	0d1b      	lsrs	r3, r3, #20
 800743c:	051b      	lsls	r3, r3, #20
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1b9      	bne.n	80073b6 <_strtod_l+0x76>
 8007442:	f7fe fb05 	bl	8005a50 <__errno>
 8007446:	2322      	movs	r3, #34	; 0x22
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	e7b4      	b.n	80073b6 <_strtod_l+0x76>
 800744c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007450:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007454:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007458:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800745c:	e7e7      	b.n	800742e <_strtod_l+0xee>
 800745e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80075d8 <_strtod_l+0x298>
 8007462:	e7e4      	b.n	800742e <_strtod_l+0xee>
 8007464:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007468:	f04f 38ff 	mov.w	r8, #4294967295
 800746c:	e7df      	b.n	800742e <_strtod_l+0xee>
 800746e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	9215      	str	r2, [sp, #84]	; 0x54
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b30      	cmp	r3, #48	; 0x30
 8007478:	d0f9      	beq.n	800746e <_strtod_l+0x12e>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d09b      	beq.n	80073b6 <_strtod_l+0x76>
 800747e:	2301      	movs	r3, #1
 8007480:	f04f 0a00 	mov.w	sl, #0
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007488:	930b      	str	r3, [sp, #44]	; 0x2c
 800748a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800748e:	46d3      	mov	fp, sl
 8007490:	220a      	movs	r2, #10
 8007492:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007494:	7806      	ldrb	r6, [r0, #0]
 8007496:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800749a:	b2d9      	uxtb	r1, r3
 800749c:	2909      	cmp	r1, #9
 800749e:	d926      	bls.n	80074ee <_strtod_l+0x1ae>
 80074a0:	494c      	ldr	r1, [pc, #304]	; (80075d4 <_strtod_l+0x294>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	f000 ffe6 	bl	8008474 <strncmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d030      	beq.n	800750e <_strtod_l+0x1ce>
 80074ac:	2000      	movs	r0, #0
 80074ae:	4632      	mov	r2, r6
 80074b0:	9005      	str	r0, [sp, #20]
 80074b2:	465e      	mov	r6, fp
 80074b4:	4603      	mov	r3, r0
 80074b6:	2a65      	cmp	r2, #101	; 0x65
 80074b8:	d001      	beq.n	80074be <_strtod_l+0x17e>
 80074ba:	2a45      	cmp	r2, #69	; 0x45
 80074bc:	d113      	bne.n	80074e6 <_strtod_l+0x1a6>
 80074be:	b91e      	cbnz	r6, 80074c8 <_strtod_l+0x188>
 80074c0:	9a04      	ldr	r2, [sp, #16]
 80074c2:	4302      	orrs	r2, r0
 80074c4:	d094      	beq.n	80073f0 <_strtod_l+0xb0>
 80074c6:	2600      	movs	r6, #0
 80074c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80074ca:	1c6a      	adds	r2, r5, #1
 80074cc:	9215      	str	r2, [sp, #84]	; 0x54
 80074ce:	786a      	ldrb	r2, [r5, #1]
 80074d0:	2a2b      	cmp	r2, #43	; 0x2b
 80074d2:	d074      	beq.n	80075be <_strtod_l+0x27e>
 80074d4:	2a2d      	cmp	r2, #45	; 0x2d
 80074d6:	d078      	beq.n	80075ca <_strtod_l+0x28a>
 80074d8:	f04f 0c00 	mov.w	ip, #0
 80074dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074e0:	2909      	cmp	r1, #9
 80074e2:	d97f      	bls.n	80075e4 <_strtod_l+0x2a4>
 80074e4:	9515      	str	r5, [sp, #84]	; 0x54
 80074e6:	2700      	movs	r7, #0
 80074e8:	e09e      	b.n	8007628 <_strtod_l+0x2e8>
 80074ea:	2300      	movs	r3, #0
 80074ec:	e7c8      	b.n	8007480 <_strtod_l+0x140>
 80074ee:	f1bb 0f08 	cmp.w	fp, #8
 80074f2:	bfd8      	it	le
 80074f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80074f6:	f100 0001 	add.w	r0, r0, #1
 80074fa:	bfda      	itte	le
 80074fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007500:	9309      	strle	r3, [sp, #36]	; 0x24
 8007502:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007506:	f10b 0b01 	add.w	fp, fp, #1
 800750a:	9015      	str	r0, [sp, #84]	; 0x54
 800750c:	e7c1      	b.n	8007492 <_strtod_l+0x152>
 800750e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	9215      	str	r2, [sp, #84]	; 0x54
 8007514:	785a      	ldrb	r2, [r3, #1]
 8007516:	f1bb 0f00 	cmp.w	fp, #0
 800751a:	d037      	beq.n	800758c <_strtod_l+0x24c>
 800751c:	9005      	str	r0, [sp, #20]
 800751e:	465e      	mov	r6, fp
 8007520:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007524:	2b09      	cmp	r3, #9
 8007526:	d912      	bls.n	800754e <_strtod_l+0x20e>
 8007528:	2301      	movs	r3, #1
 800752a:	e7c4      	b.n	80074b6 <_strtod_l+0x176>
 800752c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	9215      	str	r2, [sp, #84]	; 0x54
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	3001      	adds	r0, #1
 8007536:	2a30      	cmp	r2, #48	; 0x30
 8007538:	d0f8      	beq.n	800752c <_strtod_l+0x1ec>
 800753a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800753e:	2b08      	cmp	r3, #8
 8007540:	f200 84c1 	bhi.w	8007ec6 <_strtod_l+0xb86>
 8007544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007546:	9005      	str	r0, [sp, #20]
 8007548:	2000      	movs	r0, #0
 800754a:	930b      	str	r3, [sp, #44]	; 0x2c
 800754c:	4606      	mov	r6, r0
 800754e:	3a30      	subs	r2, #48	; 0x30
 8007550:	f100 0301 	add.w	r3, r0, #1
 8007554:	d014      	beq.n	8007580 <_strtod_l+0x240>
 8007556:	9905      	ldr	r1, [sp, #20]
 8007558:	4419      	add	r1, r3
 800755a:	9105      	str	r1, [sp, #20]
 800755c:	4633      	mov	r3, r6
 800755e:	eb00 0c06 	add.w	ip, r0, r6
 8007562:	210a      	movs	r1, #10
 8007564:	4563      	cmp	r3, ip
 8007566:	d113      	bne.n	8007590 <_strtod_l+0x250>
 8007568:	1833      	adds	r3, r6, r0
 800756a:	2b08      	cmp	r3, #8
 800756c:	f106 0601 	add.w	r6, r6, #1
 8007570:	4406      	add	r6, r0
 8007572:	dc1a      	bgt.n	80075aa <_strtod_l+0x26a>
 8007574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007576:	230a      	movs	r3, #10
 8007578:	fb03 2301 	mla	r3, r3, r1, r2
 800757c:	9309      	str	r3, [sp, #36]	; 0x24
 800757e:	2300      	movs	r3, #0
 8007580:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007582:	1c51      	adds	r1, r2, #1
 8007584:	9115      	str	r1, [sp, #84]	; 0x54
 8007586:	7852      	ldrb	r2, [r2, #1]
 8007588:	4618      	mov	r0, r3
 800758a:	e7c9      	b.n	8007520 <_strtod_l+0x1e0>
 800758c:	4658      	mov	r0, fp
 800758e:	e7d2      	b.n	8007536 <_strtod_l+0x1f6>
 8007590:	2b08      	cmp	r3, #8
 8007592:	f103 0301 	add.w	r3, r3, #1
 8007596:	dc03      	bgt.n	80075a0 <_strtod_l+0x260>
 8007598:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800759a:	434f      	muls	r7, r1
 800759c:	9709      	str	r7, [sp, #36]	; 0x24
 800759e:	e7e1      	b.n	8007564 <_strtod_l+0x224>
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	bfd8      	it	le
 80075a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80075a8:	e7dc      	b.n	8007564 <_strtod_l+0x224>
 80075aa:	2e10      	cmp	r6, #16
 80075ac:	bfdc      	itt	le
 80075ae:	230a      	movle	r3, #10
 80075b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80075b4:	e7e3      	b.n	800757e <_strtod_l+0x23e>
 80075b6:	2300      	movs	r3, #0
 80075b8:	9305      	str	r3, [sp, #20]
 80075ba:	2301      	movs	r3, #1
 80075bc:	e780      	b.n	80074c0 <_strtod_l+0x180>
 80075be:	f04f 0c00 	mov.w	ip, #0
 80075c2:	1caa      	adds	r2, r5, #2
 80075c4:	9215      	str	r2, [sp, #84]	; 0x54
 80075c6:	78aa      	ldrb	r2, [r5, #2]
 80075c8:	e788      	b.n	80074dc <_strtod_l+0x19c>
 80075ca:	f04f 0c01 	mov.w	ip, #1
 80075ce:	e7f8      	b.n	80075c2 <_strtod_l+0x282>
 80075d0:	08009490 	.word	0x08009490
 80075d4:	0800948c 	.word	0x0800948c
 80075d8:	7ff00000 	.word	0x7ff00000
 80075dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075de:	1c51      	adds	r1, r2, #1
 80075e0:	9115      	str	r1, [sp, #84]	; 0x54
 80075e2:	7852      	ldrb	r2, [r2, #1]
 80075e4:	2a30      	cmp	r2, #48	; 0x30
 80075e6:	d0f9      	beq.n	80075dc <_strtod_l+0x29c>
 80075e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80075ec:	2908      	cmp	r1, #8
 80075ee:	f63f af7a 	bhi.w	80074e6 <_strtod_l+0x1a6>
 80075f2:	3a30      	subs	r2, #48	; 0x30
 80075f4:	9208      	str	r2, [sp, #32]
 80075f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075f8:	920c      	str	r2, [sp, #48]	; 0x30
 80075fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075fc:	1c57      	adds	r7, r2, #1
 80075fe:	9715      	str	r7, [sp, #84]	; 0x54
 8007600:	7852      	ldrb	r2, [r2, #1]
 8007602:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007606:	f1be 0f09 	cmp.w	lr, #9
 800760a:	d938      	bls.n	800767e <_strtod_l+0x33e>
 800760c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800760e:	1a7f      	subs	r7, r7, r1
 8007610:	2f08      	cmp	r7, #8
 8007612:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007616:	dc03      	bgt.n	8007620 <_strtod_l+0x2e0>
 8007618:	9908      	ldr	r1, [sp, #32]
 800761a:	428f      	cmp	r7, r1
 800761c:	bfa8      	it	ge
 800761e:	460f      	movge	r7, r1
 8007620:	f1bc 0f00 	cmp.w	ip, #0
 8007624:	d000      	beq.n	8007628 <_strtod_l+0x2e8>
 8007626:	427f      	negs	r7, r7
 8007628:	2e00      	cmp	r6, #0
 800762a:	d14f      	bne.n	80076cc <_strtod_l+0x38c>
 800762c:	9904      	ldr	r1, [sp, #16]
 800762e:	4301      	orrs	r1, r0
 8007630:	f47f aec1 	bne.w	80073b6 <_strtod_l+0x76>
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f aedb 	bne.w	80073f0 <_strtod_l+0xb0>
 800763a:	2a69      	cmp	r2, #105	; 0x69
 800763c:	d029      	beq.n	8007692 <_strtod_l+0x352>
 800763e:	dc26      	bgt.n	800768e <_strtod_l+0x34e>
 8007640:	2a49      	cmp	r2, #73	; 0x49
 8007642:	d026      	beq.n	8007692 <_strtod_l+0x352>
 8007644:	2a4e      	cmp	r2, #78	; 0x4e
 8007646:	f47f aed3 	bne.w	80073f0 <_strtod_l+0xb0>
 800764a:	499b      	ldr	r1, [pc, #620]	; (80078b8 <_strtod_l+0x578>)
 800764c:	a815      	add	r0, sp, #84	; 0x54
 800764e:	f001 fa27 	bl	8008aa0 <__match>
 8007652:	2800      	cmp	r0, #0
 8007654:	f43f aecc 	beq.w	80073f0 <_strtod_l+0xb0>
 8007658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b28      	cmp	r3, #40	; 0x28
 800765e:	d12f      	bne.n	80076c0 <_strtod_l+0x380>
 8007660:	4996      	ldr	r1, [pc, #600]	; (80078bc <_strtod_l+0x57c>)
 8007662:	aa18      	add	r2, sp, #96	; 0x60
 8007664:	a815      	add	r0, sp, #84	; 0x54
 8007666:	f001 fa2f 	bl	8008ac8 <__hexnan>
 800766a:	2805      	cmp	r0, #5
 800766c:	d128      	bne.n	80076c0 <_strtod_l+0x380>
 800766e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007670:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007674:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007678:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800767c:	e69b      	b.n	80073b6 <_strtod_l+0x76>
 800767e:	9f08      	ldr	r7, [sp, #32]
 8007680:	210a      	movs	r1, #10
 8007682:	fb01 2107 	mla	r1, r1, r7, r2
 8007686:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800768a:	9208      	str	r2, [sp, #32]
 800768c:	e7b5      	b.n	80075fa <_strtod_l+0x2ba>
 800768e:	2a6e      	cmp	r2, #110	; 0x6e
 8007690:	e7d9      	b.n	8007646 <_strtod_l+0x306>
 8007692:	498b      	ldr	r1, [pc, #556]	; (80078c0 <_strtod_l+0x580>)
 8007694:	a815      	add	r0, sp, #84	; 0x54
 8007696:	f001 fa03 	bl	8008aa0 <__match>
 800769a:	2800      	cmp	r0, #0
 800769c:	f43f aea8 	beq.w	80073f0 <_strtod_l+0xb0>
 80076a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076a2:	4988      	ldr	r1, [pc, #544]	; (80078c4 <_strtod_l+0x584>)
 80076a4:	3b01      	subs	r3, #1
 80076a6:	a815      	add	r0, sp, #84	; 0x54
 80076a8:	9315      	str	r3, [sp, #84]	; 0x54
 80076aa:	f001 f9f9 	bl	8008aa0 <__match>
 80076ae:	b910      	cbnz	r0, 80076b6 <_strtod_l+0x376>
 80076b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076b2:	3301      	adds	r3, #1
 80076b4:	9315      	str	r3, [sp, #84]	; 0x54
 80076b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80078d4 <_strtod_l+0x594>
 80076ba:	f04f 0800 	mov.w	r8, #0
 80076be:	e67a      	b.n	80073b6 <_strtod_l+0x76>
 80076c0:	4881      	ldr	r0, [pc, #516]	; (80078c8 <_strtod_l+0x588>)
 80076c2:	f000 ff09 	bl	80084d8 <nan>
 80076c6:	ec59 8b10 	vmov	r8, r9, d0
 80076ca:	e674      	b.n	80073b6 <_strtod_l+0x76>
 80076cc:	9b05      	ldr	r3, [sp, #20]
 80076ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d0:	1afb      	subs	r3, r7, r3
 80076d2:	f1bb 0f00 	cmp.w	fp, #0
 80076d6:	bf08      	it	eq
 80076d8:	46b3      	moveq	fp, r6
 80076da:	2e10      	cmp	r6, #16
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	4635      	mov	r5, r6
 80076e0:	bfa8      	it	ge
 80076e2:	2510      	movge	r5, #16
 80076e4:	f7f8 ff0e 	bl	8000504 <__aeabi_ui2d>
 80076e8:	2e09      	cmp	r6, #9
 80076ea:	4680      	mov	r8, r0
 80076ec:	4689      	mov	r9, r1
 80076ee:	dd13      	ble.n	8007718 <_strtod_l+0x3d8>
 80076f0:	4b76      	ldr	r3, [pc, #472]	; (80078cc <_strtod_l+0x58c>)
 80076f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80076f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80076fa:	f7f8 ff7d 	bl	80005f8 <__aeabi_dmul>
 80076fe:	4680      	mov	r8, r0
 8007700:	4650      	mov	r0, sl
 8007702:	4689      	mov	r9, r1
 8007704:	f7f8 fefe 	bl	8000504 <__aeabi_ui2d>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4640      	mov	r0, r8
 800770e:	4649      	mov	r1, r9
 8007710:	f7f8 fdbc 	bl	800028c <__adddf3>
 8007714:	4680      	mov	r8, r0
 8007716:	4689      	mov	r9, r1
 8007718:	2e0f      	cmp	r6, #15
 800771a:	dc38      	bgt.n	800778e <_strtod_l+0x44e>
 800771c:	9b08      	ldr	r3, [sp, #32]
 800771e:	2b00      	cmp	r3, #0
 8007720:	f43f ae49 	beq.w	80073b6 <_strtod_l+0x76>
 8007724:	dd24      	ble.n	8007770 <_strtod_l+0x430>
 8007726:	2b16      	cmp	r3, #22
 8007728:	dc0b      	bgt.n	8007742 <_strtod_l+0x402>
 800772a:	4968      	ldr	r1, [pc, #416]	; (80078cc <_strtod_l+0x58c>)
 800772c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007734:	4642      	mov	r2, r8
 8007736:	464b      	mov	r3, r9
 8007738:	f7f8 ff5e 	bl	80005f8 <__aeabi_dmul>
 800773c:	4680      	mov	r8, r0
 800773e:	4689      	mov	r9, r1
 8007740:	e639      	b.n	80073b6 <_strtod_l+0x76>
 8007742:	9a08      	ldr	r2, [sp, #32]
 8007744:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007748:	4293      	cmp	r3, r2
 800774a:	db20      	blt.n	800778e <_strtod_l+0x44e>
 800774c:	4c5f      	ldr	r4, [pc, #380]	; (80078cc <_strtod_l+0x58c>)
 800774e:	f1c6 060f 	rsb	r6, r6, #15
 8007752:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007756:	4642      	mov	r2, r8
 8007758:	464b      	mov	r3, r9
 800775a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800775e:	f7f8 ff4b 	bl	80005f8 <__aeabi_dmul>
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	1b9e      	subs	r6, r3, r6
 8007766:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800776a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800776e:	e7e3      	b.n	8007738 <_strtod_l+0x3f8>
 8007770:	9b08      	ldr	r3, [sp, #32]
 8007772:	3316      	adds	r3, #22
 8007774:	db0b      	blt.n	800778e <_strtod_l+0x44e>
 8007776:	9b05      	ldr	r3, [sp, #20]
 8007778:	1bdf      	subs	r7, r3, r7
 800777a:	4b54      	ldr	r3, [pc, #336]	; (80078cc <_strtod_l+0x58c>)
 800777c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f9 f860 	bl	800084c <__aeabi_ddiv>
 800778c:	e7d6      	b.n	800773c <_strtod_l+0x3fc>
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	1b75      	subs	r5, r6, r5
 8007792:	441d      	add	r5, r3
 8007794:	2d00      	cmp	r5, #0
 8007796:	dd70      	ble.n	800787a <_strtod_l+0x53a>
 8007798:	f015 030f 	ands.w	r3, r5, #15
 800779c:	d00a      	beq.n	80077b4 <_strtod_l+0x474>
 800779e:	494b      	ldr	r1, [pc, #300]	; (80078cc <_strtod_l+0x58c>)
 80077a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ac:	f7f8 ff24 	bl	80005f8 <__aeabi_dmul>
 80077b0:	4680      	mov	r8, r0
 80077b2:	4689      	mov	r9, r1
 80077b4:	f035 050f 	bics.w	r5, r5, #15
 80077b8:	d04d      	beq.n	8007856 <_strtod_l+0x516>
 80077ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80077be:	dd22      	ble.n	8007806 <_strtod_l+0x4c6>
 80077c0:	2500      	movs	r5, #0
 80077c2:	46ab      	mov	fp, r5
 80077c4:	9509      	str	r5, [sp, #36]	; 0x24
 80077c6:	9505      	str	r5, [sp, #20]
 80077c8:	2322      	movs	r3, #34	; 0x22
 80077ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80078d4 <_strtod_l+0x594>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	f04f 0800 	mov.w	r8, #0
 80077d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f43f aded 	beq.w	80073b6 <_strtod_l+0x76>
 80077dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff f924 	bl	8006a2c <_Bfree>
 80077e4:	9905      	ldr	r1, [sp, #20]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff f920 	bl	8006a2c <_Bfree>
 80077ec:	4659      	mov	r1, fp
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff f91c 	bl	8006a2c <_Bfree>
 80077f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077f6:	4620      	mov	r0, r4
 80077f8:	f7ff f918 	bl	8006a2c <_Bfree>
 80077fc:	4629      	mov	r1, r5
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff f914 	bl	8006a2c <_Bfree>
 8007804:	e5d7      	b.n	80073b6 <_strtod_l+0x76>
 8007806:	4b32      	ldr	r3, [pc, #200]	; (80078d0 <_strtod_l+0x590>)
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	2300      	movs	r3, #0
 800780c:	112d      	asrs	r5, r5, #4
 800780e:	4640      	mov	r0, r8
 8007810:	4649      	mov	r1, r9
 8007812:	469a      	mov	sl, r3
 8007814:	2d01      	cmp	r5, #1
 8007816:	dc21      	bgt.n	800785c <_strtod_l+0x51c>
 8007818:	b10b      	cbz	r3, 800781e <_strtod_l+0x4de>
 800781a:	4680      	mov	r8, r0
 800781c:	4689      	mov	r9, r1
 800781e:	492c      	ldr	r1, [pc, #176]	; (80078d0 <_strtod_l+0x590>)
 8007820:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007824:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007828:	4642      	mov	r2, r8
 800782a:	464b      	mov	r3, r9
 800782c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <_strtod_l+0x594>)
 8007836:	460a      	mov	r2, r1
 8007838:	400b      	ands	r3, r1
 800783a:	4927      	ldr	r1, [pc, #156]	; (80078d8 <_strtod_l+0x598>)
 800783c:	428b      	cmp	r3, r1
 800783e:	4680      	mov	r8, r0
 8007840:	d8be      	bhi.n	80077c0 <_strtod_l+0x480>
 8007842:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007846:	428b      	cmp	r3, r1
 8007848:	bf86      	itte	hi
 800784a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80078dc <_strtod_l+0x59c>
 800784e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007852:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007856:	2300      	movs	r3, #0
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	e07b      	b.n	8007954 <_strtod_l+0x614>
 800785c:	07ea      	lsls	r2, r5, #31
 800785e:	d505      	bpl.n	800786c <_strtod_l+0x52c>
 8007860:	9b04      	ldr	r3, [sp, #16]
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fec7 	bl	80005f8 <__aeabi_dmul>
 800786a:	2301      	movs	r3, #1
 800786c:	9a04      	ldr	r2, [sp, #16]
 800786e:	3208      	adds	r2, #8
 8007870:	f10a 0a01 	add.w	sl, sl, #1
 8007874:	106d      	asrs	r5, r5, #1
 8007876:	9204      	str	r2, [sp, #16]
 8007878:	e7cc      	b.n	8007814 <_strtod_l+0x4d4>
 800787a:	d0ec      	beq.n	8007856 <_strtod_l+0x516>
 800787c:	426d      	negs	r5, r5
 800787e:	f015 020f 	ands.w	r2, r5, #15
 8007882:	d00a      	beq.n	800789a <_strtod_l+0x55a>
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <_strtod_l+0x58c>)
 8007886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 ffdb 	bl	800084c <__aeabi_ddiv>
 8007896:	4680      	mov	r8, r0
 8007898:	4689      	mov	r9, r1
 800789a:	112d      	asrs	r5, r5, #4
 800789c:	d0db      	beq.n	8007856 <_strtod_l+0x516>
 800789e:	2d1f      	cmp	r5, #31
 80078a0:	dd1e      	ble.n	80078e0 <_strtod_l+0x5a0>
 80078a2:	2500      	movs	r5, #0
 80078a4:	46ab      	mov	fp, r5
 80078a6:	9509      	str	r5, [sp, #36]	; 0x24
 80078a8:	9505      	str	r5, [sp, #20]
 80078aa:	2322      	movs	r3, #34	; 0x22
 80078ac:	f04f 0800 	mov.w	r8, #0
 80078b0:	f04f 0900 	mov.w	r9, #0
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	e78d      	b.n	80077d4 <_strtod_l+0x494>
 80078b8:	0800927d 	.word	0x0800927d
 80078bc:	080094a4 	.word	0x080094a4
 80078c0:	08009275 	.word	0x08009275
 80078c4:	080092ac 	.word	0x080092ac
 80078c8:	08009635 	.word	0x08009635
 80078cc:	080093b8 	.word	0x080093b8
 80078d0:	08009390 	.word	0x08009390
 80078d4:	7ff00000 	.word	0x7ff00000
 80078d8:	7ca00000 	.word	0x7ca00000
 80078dc:	7fefffff 	.word	0x7fefffff
 80078e0:	f015 0310 	ands.w	r3, r5, #16
 80078e4:	bf18      	it	ne
 80078e6:	236a      	movne	r3, #106	; 0x6a
 80078e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007c8c <_strtod_l+0x94c>
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	4640      	mov	r0, r8
 80078f0:	4649      	mov	r1, r9
 80078f2:	2300      	movs	r3, #0
 80078f4:	07ea      	lsls	r2, r5, #31
 80078f6:	d504      	bpl.n	8007902 <_strtod_l+0x5c2>
 80078f8:	e9da 2300 	ldrd	r2, r3, [sl]
 80078fc:	f7f8 fe7c 	bl	80005f8 <__aeabi_dmul>
 8007900:	2301      	movs	r3, #1
 8007902:	106d      	asrs	r5, r5, #1
 8007904:	f10a 0a08 	add.w	sl, sl, #8
 8007908:	d1f4      	bne.n	80078f4 <_strtod_l+0x5b4>
 800790a:	b10b      	cbz	r3, 8007910 <_strtod_l+0x5d0>
 800790c:	4680      	mov	r8, r0
 800790e:	4689      	mov	r9, r1
 8007910:	9b04      	ldr	r3, [sp, #16]
 8007912:	b1bb      	cbz	r3, 8007944 <_strtod_l+0x604>
 8007914:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007918:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800791c:	2b00      	cmp	r3, #0
 800791e:	4649      	mov	r1, r9
 8007920:	dd10      	ble.n	8007944 <_strtod_l+0x604>
 8007922:	2b1f      	cmp	r3, #31
 8007924:	f340 811e 	ble.w	8007b64 <_strtod_l+0x824>
 8007928:	2b34      	cmp	r3, #52	; 0x34
 800792a:	bfde      	ittt	le
 800792c:	f04f 33ff 	movle.w	r3, #4294967295
 8007930:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007934:	4093      	lslle	r3, r2
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	bfcc      	ite	gt
 800793c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007940:	ea03 0901 	andle.w	r9, r3, r1
 8007944:	2200      	movs	r2, #0
 8007946:	2300      	movs	r3, #0
 8007948:	4640      	mov	r0, r8
 800794a:	4649      	mov	r1, r9
 800794c:	f7f9 f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007950:	2800      	cmp	r0, #0
 8007952:	d1a6      	bne.n	80078a2 <_strtod_l+0x562>
 8007954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800795a:	4633      	mov	r3, r6
 800795c:	465a      	mov	r2, fp
 800795e:	4620      	mov	r0, r4
 8007960:	f7ff f8cc 	bl	8006afc <__s2b>
 8007964:	9009      	str	r0, [sp, #36]	; 0x24
 8007966:	2800      	cmp	r0, #0
 8007968:	f43f af2a 	beq.w	80077c0 <_strtod_l+0x480>
 800796c:	9a08      	ldr	r2, [sp, #32]
 800796e:	9b05      	ldr	r3, [sp, #20]
 8007970:	2a00      	cmp	r2, #0
 8007972:	eba3 0307 	sub.w	r3, r3, r7
 8007976:	bfa8      	it	ge
 8007978:	2300      	movge	r3, #0
 800797a:	930c      	str	r3, [sp, #48]	; 0x30
 800797c:	2500      	movs	r5, #0
 800797e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007982:	9312      	str	r3, [sp, #72]	; 0x48
 8007984:	46ab      	mov	fp, r5
 8007986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007988:	4620      	mov	r0, r4
 800798a:	6859      	ldr	r1, [r3, #4]
 800798c:	f7ff f80e 	bl	80069ac <_Balloc>
 8007990:	9005      	str	r0, [sp, #20]
 8007992:	2800      	cmp	r0, #0
 8007994:	f43f af18 	beq.w	80077c8 <_strtod_l+0x488>
 8007998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	3202      	adds	r2, #2
 800799e:	f103 010c 	add.w	r1, r3, #12
 80079a2:	0092      	lsls	r2, r2, #2
 80079a4:	300c      	adds	r0, #12
 80079a6:	f000 fd87 	bl	80084b8 <memcpy>
 80079aa:	ec49 8b10 	vmov	d0, r8, r9
 80079ae:	aa18      	add	r2, sp, #96	; 0x60
 80079b0:	a917      	add	r1, sp, #92	; 0x5c
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7ff fbd6 	bl	8007164 <__d2b>
 80079b8:	ec49 8b18 	vmov	d8, r8, r9
 80079bc:	9016      	str	r0, [sp, #88]	; 0x58
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f af02 	beq.w	80077c8 <_strtod_l+0x488>
 80079c4:	2101      	movs	r1, #1
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff f930 	bl	8006c2c <__i2b>
 80079cc:	4683      	mov	fp, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f aefa 	beq.w	80077c8 <_strtod_l+0x488>
 80079d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80079d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80079d8:	2e00      	cmp	r6, #0
 80079da:	bfab      	itete	ge
 80079dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80079de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80079e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80079e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80079e6:	bfac      	ite	ge
 80079e8:	eb06 0a03 	addge.w	sl, r6, r3
 80079ec:	1b9f      	sublt	r7, r3, r6
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	1af6      	subs	r6, r6, r3
 80079f2:	4416      	add	r6, r2
 80079f4:	4ba0      	ldr	r3, [pc, #640]	; (8007c78 <_strtod_l+0x938>)
 80079f6:	3e01      	subs	r6, #1
 80079f8:	429e      	cmp	r6, r3
 80079fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079fe:	f280 80c4 	bge.w	8007b8a <_strtod_l+0x84a>
 8007a02:	1b9b      	subs	r3, r3, r6
 8007a04:	2b1f      	cmp	r3, #31
 8007a06:	eba2 0203 	sub.w	r2, r2, r3
 8007a0a:	f04f 0101 	mov.w	r1, #1
 8007a0e:	f300 80b0 	bgt.w	8007b72 <_strtod_l+0x832>
 8007a12:	fa01 f303 	lsl.w	r3, r1, r3
 8007a16:	930e      	str	r3, [sp, #56]	; 0x38
 8007a18:	2300      	movs	r3, #0
 8007a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a1c:	eb0a 0602 	add.w	r6, sl, r2
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	45b2      	cmp	sl, r6
 8007a24:	4417      	add	r7, r2
 8007a26:	441f      	add	r7, r3
 8007a28:	4653      	mov	r3, sl
 8007a2a:	bfa8      	it	ge
 8007a2c:	4633      	movge	r3, r6
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	bfa8      	it	ge
 8007a32:	463b      	movge	r3, r7
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bfc2      	ittt	gt
 8007a38:	1af6      	subgt	r6, r6, r3
 8007a3a:	1aff      	subgt	r7, r7, r3
 8007a3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd17      	ble.n	8007a76 <_strtod_l+0x736>
 8007a46:	4659      	mov	r1, fp
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f7ff f9ae 	bl	8006dac <__pow5mult>
 8007a50:	4683      	mov	fp, r0
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f43f aeb8 	beq.w	80077c8 <_strtod_l+0x488>
 8007a58:	4601      	mov	r1, r0
 8007a5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7ff f8fb 	bl	8006c58 <__multiply>
 8007a62:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f aeaf 	beq.w	80077c8 <_strtod_l+0x488>
 8007a6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f7fe ffdd 	bl	8006a2c <_Bfree>
 8007a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a74:	9316      	str	r3, [sp, #88]	; 0x58
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	f300 808c 	bgt.w	8007b94 <_strtod_l+0x854>
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd08      	ble.n	8007a94 <_strtod_l+0x754>
 8007a82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a84:	9905      	ldr	r1, [sp, #20]
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7ff f990 	bl	8006dac <__pow5mult>
 8007a8c:	9005      	str	r0, [sp, #20]
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae9a 	beq.w	80077c8 <_strtod_l+0x488>
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	dd08      	ble.n	8007aaa <_strtod_l+0x76a>
 8007a98:	9905      	ldr	r1, [sp, #20]
 8007a9a:	463a      	mov	r2, r7
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f7ff f9df 	bl	8006e60 <__lshift>
 8007aa2:	9005      	str	r0, [sp, #20]
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	f43f ae8f 	beq.w	80077c8 <_strtod_l+0x488>
 8007aaa:	f1ba 0f00 	cmp.w	sl, #0
 8007aae:	dd08      	ble.n	8007ac2 <_strtod_l+0x782>
 8007ab0:	4659      	mov	r1, fp
 8007ab2:	4652      	mov	r2, sl
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7ff f9d3 	bl	8006e60 <__lshift>
 8007aba:	4683      	mov	fp, r0
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f43f ae83 	beq.w	80077c8 <_strtod_l+0x488>
 8007ac2:	9a05      	ldr	r2, [sp, #20]
 8007ac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff fa52 	bl	8006f70 <__mdiff>
 8007acc:	4605      	mov	r5, r0
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f43f ae7a 	beq.w	80077c8 <_strtod_l+0x488>
 8007ad4:	68c3      	ldr	r3, [r0, #12]
 8007ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60c3      	str	r3, [r0, #12]
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7ff fa2b 	bl	8006f38 <__mcmp>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	da60      	bge.n	8007ba8 <_strtod_l+0x868>
 8007ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae8:	ea53 0308 	orrs.w	r3, r3, r8
 8007aec:	f040 8084 	bne.w	8007bf8 <_strtod_l+0x8b8>
 8007af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d17f      	bne.n	8007bf8 <_strtod_l+0x8b8>
 8007af8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	051b      	lsls	r3, r3, #20
 8007b00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b04:	d978      	bls.n	8007bf8 <_strtod_l+0x8b8>
 8007b06:	696b      	ldr	r3, [r5, #20]
 8007b08:	b913      	cbnz	r3, 8007b10 <_strtod_l+0x7d0>
 8007b0a:	692b      	ldr	r3, [r5, #16]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	dd73      	ble.n	8007bf8 <_strtod_l+0x8b8>
 8007b10:	4629      	mov	r1, r5
 8007b12:	2201      	movs	r2, #1
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7ff f9a3 	bl	8006e60 <__lshift>
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	f7ff fa0b 	bl	8006f38 <__mcmp>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	dd68      	ble.n	8007bf8 <_strtod_l+0x8b8>
 8007b26:	9904      	ldr	r1, [sp, #16]
 8007b28:	4a54      	ldr	r2, [pc, #336]	; (8007c7c <_strtod_l+0x93c>)
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	f000 8084 	beq.w	8007c3a <_strtod_l+0x8fa>
 8007b32:	ea02 0109 	and.w	r1, r2, r9
 8007b36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b3a:	dc7e      	bgt.n	8007c3a <_strtod_l+0x8fa>
 8007b3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b40:	f77f aeb3 	ble.w	80078aa <_strtod_l+0x56a>
 8007b44:	4b4e      	ldr	r3, [pc, #312]	; (8007c80 <_strtod_l+0x940>)
 8007b46:	4640      	mov	r0, r8
 8007b48:	4649      	mov	r1, r9
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f7f8 fd54 	bl	80005f8 <__aeabi_dmul>
 8007b50:	4b4a      	ldr	r3, [pc, #296]	; (8007c7c <_strtod_l+0x93c>)
 8007b52:	400b      	ands	r3, r1
 8007b54:	4680      	mov	r8, r0
 8007b56:	4689      	mov	r9, r1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f47f ae3f 	bne.w	80077dc <_strtod_l+0x49c>
 8007b5e:	2322      	movs	r3, #34	; 0x22
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	e63b      	b.n	80077dc <_strtod_l+0x49c>
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	ea03 0808 	and.w	r8, r3, r8
 8007b70:	e6e8      	b.n	8007944 <_strtod_l+0x604>
 8007b72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007b76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007b7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007b7e:	36e2      	adds	r6, #226	; 0xe2
 8007b80:	fa01 f306 	lsl.w	r3, r1, r6
 8007b84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007b88:	e748      	b.n	8007a1c <_strtod_l+0x6dc>
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007b92:	e743      	b.n	8007a1c <_strtod_l+0x6dc>
 8007b94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b96:	4632      	mov	r2, r6
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f7ff f961 	bl	8006e60 <__lshift>
 8007b9e:	9016      	str	r0, [sp, #88]	; 0x58
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	f47f af6b 	bne.w	8007a7c <_strtod_l+0x73c>
 8007ba6:	e60f      	b.n	80077c8 <_strtod_l+0x488>
 8007ba8:	46ca      	mov	sl, r9
 8007baa:	d171      	bne.n	8007c90 <_strtod_l+0x950>
 8007bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bb2:	b352      	cbz	r2, 8007c0a <_strtod_l+0x8ca>
 8007bb4:	4a33      	ldr	r2, [pc, #204]	; (8007c84 <_strtod_l+0x944>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d12a      	bne.n	8007c10 <_strtod_l+0x8d0>
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	b1fb      	cbz	r3, 8007c00 <_strtod_l+0x8c0>
 8007bc0:	4b2e      	ldr	r3, [pc, #184]	; (8007c7c <_strtod_l+0x93c>)
 8007bc2:	ea09 0303 	and.w	r3, r9, r3
 8007bc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	d81a      	bhi.n	8007c06 <_strtod_l+0x8c6>
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	d118      	bne.n	8007c10 <_strtod_l+0x8d0>
 8007bde:	4b2a      	ldr	r3, [pc, #168]	; (8007c88 <_strtod_l+0x948>)
 8007be0:	459a      	cmp	sl, r3
 8007be2:	d102      	bne.n	8007bea <_strtod_l+0x8aa>
 8007be4:	3101      	adds	r1, #1
 8007be6:	f43f adef 	beq.w	80077c8 <_strtod_l+0x488>
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <_strtod_l+0x93c>)
 8007bec:	ea0a 0303 	and.w	r3, sl, r3
 8007bf0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007bf4:	f04f 0800 	mov.w	r8, #0
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1a2      	bne.n	8007b44 <_strtod_l+0x804>
 8007bfe:	e5ed      	b.n	80077dc <_strtod_l+0x49c>
 8007c00:	f04f 33ff 	mov.w	r3, #4294967295
 8007c04:	e7e9      	b.n	8007bda <_strtod_l+0x89a>
 8007c06:	4613      	mov	r3, r2
 8007c08:	e7e7      	b.n	8007bda <_strtod_l+0x89a>
 8007c0a:	ea53 0308 	orrs.w	r3, r3, r8
 8007c0e:	d08a      	beq.n	8007b26 <_strtod_l+0x7e6>
 8007c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c12:	b1e3      	cbz	r3, 8007c4e <_strtod_l+0x90e>
 8007c14:	ea13 0f0a 	tst.w	r3, sl
 8007c18:	d0ee      	beq.n	8007bf8 <_strtod_l+0x8b8>
 8007c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c1c:	9a04      	ldr	r2, [sp, #16]
 8007c1e:	4640      	mov	r0, r8
 8007c20:	4649      	mov	r1, r9
 8007c22:	b1c3      	cbz	r3, 8007c56 <_strtod_l+0x916>
 8007c24:	f7ff fb6f 	bl	8007306 <sulp>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	ec51 0b18 	vmov	r0, r1, d8
 8007c30:	f7f8 fb2c 	bl	800028c <__adddf3>
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	e7de      	b.n	8007bf8 <_strtod_l+0x8b8>
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c40:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c44:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c48:	f04f 38ff 	mov.w	r8, #4294967295
 8007c4c:	e7d4      	b.n	8007bf8 <_strtod_l+0x8b8>
 8007c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c50:	ea13 0f08 	tst.w	r3, r8
 8007c54:	e7e0      	b.n	8007c18 <_strtod_l+0x8d8>
 8007c56:	f7ff fb56 	bl	8007306 <sulp>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	ec51 0b18 	vmov	r0, r1, d8
 8007c62:	f7f8 fb11 	bl	8000288 <__aeabi_dsub>
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	4689      	mov	r9, r1
 8007c6e:	f7f8 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d0c0      	beq.n	8007bf8 <_strtod_l+0x8b8>
 8007c76:	e618      	b.n	80078aa <_strtod_l+0x56a>
 8007c78:	fffffc02 	.word	0xfffffc02
 8007c7c:	7ff00000 	.word	0x7ff00000
 8007c80:	39500000 	.word	0x39500000
 8007c84:	000fffff 	.word	0x000fffff
 8007c88:	7fefffff 	.word	0x7fefffff
 8007c8c:	080094b8 	.word	0x080094b8
 8007c90:	4659      	mov	r1, fp
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7ff fac0 	bl	8007218 <__ratio>
 8007c98:	ec57 6b10 	vmov	r6, r7, d0
 8007c9c:	ee10 0a10 	vmov	r0, s0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 ff22 	bl	8000af0 <__aeabi_dcmple>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d071      	beq.n	8007d94 <_strtod_l+0xa54>
 8007cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d17c      	bne.n	8007db0 <_strtod_l+0xa70>
 8007cb6:	f1b8 0f00 	cmp.w	r8, #0
 8007cba:	d15a      	bne.n	8007d72 <_strtod_l+0xa32>
 8007cbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d15d      	bne.n	8007d80 <_strtod_l+0xa40>
 8007cc4:	4b90      	ldr	r3, [pc, #576]	; (8007f08 <_strtod_l+0xbc8>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 ff06 	bl	8000adc <__aeabi_dcmplt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d15c      	bne.n	8007d8e <_strtod_l+0xa4e>
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	4b8c      	ldr	r3, [pc, #560]	; (8007f0c <_strtod_l+0xbcc>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f7f8 fc8c 	bl	80005f8 <__aeabi_dmul>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	460f      	mov	r7, r1
 8007ce4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007ce8:	9606      	str	r6, [sp, #24]
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007cf4:	4b86      	ldr	r3, [pc, #536]	; (8007f10 <_strtod_l+0xbd0>)
 8007cf6:	ea0a 0303 	and.w	r3, sl, r3
 8007cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cfe:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <_strtod_l+0xbd4>)
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f040 8090 	bne.w	8007e26 <_strtod_l+0xae6>
 8007d06:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007d0a:	ec49 8b10 	vmov	d0, r8, r9
 8007d0e:	f7ff f9b9 	bl	8007084 <__ulp>
 8007d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d16:	ec51 0b10 	vmov	r0, r1, d0
 8007d1a:	f7f8 fc6d 	bl	80005f8 <__aeabi_dmul>
 8007d1e:	4642      	mov	r2, r8
 8007d20:	464b      	mov	r3, r9
 8007d22:	f7f8 fab3 	bl	800028c <__adddf3>
 8007d26:	460b      	mov	r3, r1
 8007d28:	4979      	ldr	r1, [pc, #484]	; (8007f10 <_strtod_l+0xbd0>)
 8007d2a:	4a7b      	ldr	r2, [pc, #492]	; (8007f18 <_strtod_l+0xbd8>)
 8007d2c:	4019      	ands	r1, r3
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	4680      	mov	r8, r0
 8007d32:	d944      	bls.n	8007dbe <_strtod_l+0xa7e>
 8007d34:	ee18 2a90 	vmov	r2, s17
 8007d38:	4b78      	ldr	r3, [pc, #480]	; (8007f1c <_strtod_l+0xbdc>)
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d104      	bne.n	8007d48 <_strtod_l+0xa08>
 8007d3e:	ee18 3a10 	vmov	r3, s16
 8007d42:	3301      	adds	r3, #1
 8007d44:	f43f ad40 	beq.w	80077c8 <_strtod_l+0x488>
 8007d48:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007f1c <_strtod_l+0xbdc>
 8007d4c:	f04f 38ff 	mov.w	r8, #4294967295
 8007d50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7fe fe6a 	bl	8006a2c <_Bfree>
 8007d58:	9905      	ldr	r1, [sp, #20]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7fe fe66 	bl	8006a2c <_Bfree>
 8007d60:	4659      	mov	r1, fp
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7fe fe62 	bl	8006a2c <_Bfree>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f7fe fe5e 	bl	8006a2c <_Bfree>
 8007d70:	e609      	b.n	8007986 <_strtod_l+0x646>
 8007d72:	f1b8 0f01 	cmp.w	r8, #1
 8007d76:	d103      	bne.n	8007d80 <_strtod_l+0xa40>
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	f43f ad95 	beq.w	80078aa <_strtod_l+0x56a>
 8007d80:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007ed8 <_strtod_l+0xb98>
 8007d84:	4f60      	ldr	r7, [pc, #384]	; (8007f08 <_strtod_l+0xbc8>)
 8007d86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	e7ae      	b.n	8007cec <_strtod_l+0x9ac>
 8007d8e:	4f5f      	ldr	r7, [pc, #380]	; (8007f0c <_strtod_l+0xbcc>)
 8007d90:	2600      	movs	r6, #0
 8007d92:	e7a7      	b.n	8007ce4 <_strtod_l+0x9a4>
 8007d94:	4b5d      	ldr	r3, [pc, #372]	; (8007f0c <_strtod_l+0xbcc>)
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f7f8 fc2c 	bl	80005f8 <__aeabi_dmul>
 8007da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d09c      	beq.n	8007ce4 <_strtod_l+0x9a4>
 8007daa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007dae:	e79d      	b.n	8007cec <_strtod_l+0x9ac>
 8007db0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007ee0 <_strtod_l+0xba0>
 8007db4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007db8:	ec57 6b17 	vmov	r6, r7, d7
 8007dbc:	e796      	b.n	8007cec <_strtod_l+0x9ac>
 8007dbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	46ca      	mov	sl, r9
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1c2      	bne.n	8007d50 <_strtod_l+0xa10>
 8007dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	051b      	lsls	r3, r3, #20
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d1bb      	bne.n	8007d50 <_strtod_l+0xa10>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 ff54 	bl	8000c88 <__aeabi_d2lz>
 8007de0:	f7f8 fbdc 	bl	800059c <__aeabi_l2d>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fa4c 	bl	8000288 <__aeabi_dsub>
 8007df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007df2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007df6:	ea43 0308 	orr.w	r3, r3, r8
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	d054      	beq.n	8007eac <_strtod_l+0xb6c>
 8007e02:	a339      	add	r3, pc, #228	; (adr r3, 8007ee8 <_strtod_l+0xba8>)
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f7f8 fe68 	bl	8000adc <__aeabi_dcmplt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f47f ace5 	bne.w	80077dc <_strtod_l+0x49c>
 8007e12:	a337      	add	r3, pc, #220	; (adr r3, 8007ef0 <_strtod_l+0xbb0>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe7c 	bl	8000b18 <__aeabi_dcmpgt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d095      	beq.n	8007d50 <_strtod_l+0xa10>
 8007e24:	e4da      	b.n	80077dc <_strtod_l+0x49c>
 8007e26:	9b04      	ldr	r3, [sp, #16]
 8007e28:	b333      	cbz	r3, 8007e78 <_strtod_l+0xb38>
 8007e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e30:	d822      	bhi.n	8007e78 <_strtod_l+0xb38>
 8007e32:	a331      	add	r3, pc, #196	; (adr r3, 8007ef8 <_strtod_l+0xbb8>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 fe58 	bl	8000af0 <__aeabi_dcmple>
 8007e40:	b1a0      	cbz	r0, 8007e6c <_strtod_l+0xb2c>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4630      	mov	r0, r6
 8007e46:	f7f8 feaf 	bl	8000ba8 <__aeabi_d2uiz>
 8007e4a:	2801      	cmp	r0, #1
 8007e4c:	bf38      	it	cc
 8007e4e:	2001      	movcc	r0, #1
 8007e50:	f7f8 fb58 	bl	8000504 <__aeabi_ui2d>
 8007e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e56:	4606      	mov	r6, r0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	bb23      	cbnz	r3, 8007ea6 <_strtod_l+0xb66>
 8007e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e60:	9010      	str	r0, [sp, #64]	; 0x40
 8007e62:	9311      	str	r3, [sp, #68]	; 0x44
 8007e64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e80:	eef0 0a68 	vmov.f32	s1, s17
 8007e84:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e88:	f7ff f8fc 	bl	8007084 <__ulp>
 8007e8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e90:	ec53 2b10 	vmov	r2, r3, d0
 8007e94:	f7f8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8007e98:	ec53 2b18 	vmov	r2, r3, d8
 8007e9c:	f7f8 f9f6 	bl	800028c <__adddf3>
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	4689      	mov	r9, r1
 8007ea4:	e78d      	b.n	8007dc2 <_strtod_l+0xa82>
 8007ea6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007eaa:	e7db      	b.n	8007e64 <_strtod_l+0xb24>
 8007eac:	a314      	add	r3, pc, #80	; (adr r3, 8007f00 <_strtod_l+0xbc0>)
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	f7f8 fe13 	bl	8000adc <__aeabi_dcmplt>
 8007eb6:	e7b3      	b.n	8007e20 <_strtod_l+0xae0>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	930a      	str	r3, [sp, #40]	; 0x28
 8007ebc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	f7ff ba7c 	b.w	80073be <_strtod_l+0x7e>
 8007ec6:	2a65      	cmp	r2, #101	; 0x65
 8007ec8:	f43f ab75 	beq.w	80075b6 <_strtod_l+0x276>
 8007ecc:	2a45      	cmp	r2, #69	; 0x45
 8007ece:	f43f ab72 	beq.w	80075b6 <_strtod_l+0x276>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f7ff bbaa 	b.w	800762c <_strtod_l+0x2ec>
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	bff00000 	.word	0xbff00000
 8007ee0:	00000000 	.word	0x00000000
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	94a03595 	.word	0x94a03595
 8007eec:	3fdfffff 	.word	0x3fdfffff
 8007ef0:	35afe535 	.word	0x35afe535
 8007ef4:	3fe00000 	.word	0x3fe00000
 8007ef8:	ffc00000 	.word	0xffc00000
 8007efc:	41dfffff 	.word	0x41dfffff
 8007f00:	94a03595 	.word	0x94a03595
 8007f04:	3fcfffff 	.word	0x3fcfffff
 8007f08:	3ff00000 	.word	0x3ff00000
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	7ff00000 	.word	0x7ff00000
 8007f14:	7fe00000 	.word	0x7fe00000
 8007f18:	7c9fffff 	.word	0x7c9fffff
 8007f1c:	7fefffff 	.word	0x7fefffff

08007f20 <_strtod_r>:
 8007f20:	4b01      	ldr	r3, [pc, #4]	; (8007f28 <_strtod_r+0x8>)
 8007f22:	f7ff ba0d 	b.w	8007340 <_strtod_l>
 8007f26:	bf00      	nop
 8007f28:	20000068 	.word	0x20000068

08007f2c <_strtol_l.constprop.0>:
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f32:	d001      	beq.n	8007f38 <_strtol_l.constprop.0+0xc>
 8007f34:	2b24      	cmp	r3, #36	; 0x24
 8007f36:	d906      	bls.n	8007f46 <_strtol_l.constprop.0+0x1a>
 8007f38:	f7fd fd8a 	bl	8005a50 <__errno>
 8007f3c:	2316      	movs	r3, #22
 8007f3e:	6003      	str	r3, [r0, #0]
 8007f40:	2000      	movs	r0, #0
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800802c <_strtol_l.constprop.0+0x100>
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	462e      	mov	r6, r5
 8007f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007f56:	f017 0708 	ands.w	r7, r7, #8
 8007f5a:	d1f7      	bne.n	8007f4c <_strtol_l.constprop.0+0x20>
 8007f5c:	2c2d      	cmp	r4, #45	; 0x2d
 8007f5e:	d132      	bne.n	8007fc6 <_strtol_l.constprop.0+0x9a>
 8007f60:	782c      	ldrb	r4, [r5, #0]
 8007f62:	2701      	movs	r7, #1
 8007f64:	1cb5      	adds	r5, r6, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d05b      	beq.n	8008022 <_strtol_l.constprop.0+0xf6>
 8007f6a:	2b10      	cmp	r3, #16
 8007f6c:	d109      	bne.n	8007f82 <_strtol_l.constprop.0+0x56>
 8007f6e:	2c30      	cmp	r4, #48	; 0x30
 8007f70:	d107      	bne.n	8007f82 <_strtol_l.constprop.0+0x56>
 8007f72:	782c      	ldrb	r4, [r5, #0]
 8007f74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f78:	2c58      	cmp	r4, #88	; 0x58
 8007f7a:	d14d      	bne.n	8008018 <_strtol_l.constprop.0+0xec>
 8007f7c:	786c      	ldrb	r4, [r5, #1]
 8007f7e:	2310      	movs	r3, #16
 8007f80:	3502      	adds	r5, #2
 8007f82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f86:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f8a:	f04f 0e00 	mov.w	lr, #0
 8007f8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f92:	4676      	mov	r6, lr
 8007f94:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007f9c:	f1bc 0f09 	cmp.w	ip, #9
 8007fa0:	d816      	bhi.n	8007fd0 <_strtol_l.constprop.0+0xa4>
 8007fa2:	4664      	mov	r4, ip
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	dd24      	ble.n	8007ff2 <_strtol_l.constprop.0+0xc6>
 8007fa8:	f1be 3fff 	cmp.w	lr, #4294967295
 8007fac:	d008      	beq.n	8007fc0 <_strtol_l.constprop.0+0x94>
 8007fae:	45b1      	cmp	r9, r6
 8007fb0:	d31c      	bcc.n	8007fec <_strtol_l.constprop.0+0xc0>
 8007fb2:	d101      	bne.n	8007fb8 <_strtol_l.constprop.0+0x8c>
 8007fb4:	45a2      	cmp	sl, r4
 8007fb6:	db19      	blt.n	8007fec <_strtol_l.constprop.0+0xc0>
 8007fb8:	fb06 4603 	mla	r6, r6, r3, r4
 8007fbc:	f04f 0e01 	mov.w	lr, #1
 8007fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc4:	e7e8      	b.n	8007f98 <_strtol_l.constprop.0+0x6c>
 8007fc6:	2c2b      	cmp	r4, #43	; 0x2b
 8007fc8:	bf04      	itt	eq
 8007fca:	782c      	ldrbeq	r4, [r5, #0]
 8007fcc:	1cb5      	addeq	r5, r6, #2
 8007fce:	e7ca      	b.n	8007f66 <_strtol_l.constprop.0+0x3a>
 8007fd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007fd4:	f1bc 0f19 	cmp.w	ip, #25
 8007fd8:	d801      	bhi.n	8007fde <_strtol_l.constprop.0+0xb2>
 8007fda:	3c37      	subs	r4, #55	; 0x37
 8007fdc:	e7e2      	b.n	8007fa4 <_strtol_l.constprop.0+0x78>
 8007fde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007fe2:	f1bc 0f19 	cmp.w	ip, #25
 8007fe6:	d804      	bhi.n	8007ff2 <_strtol_l.constprop.0+0xc6>
 8007fe8:	3c57      	subs	r4, #87	; 0x57
 8007fea:	e7db      	b.n	8007fa4 <_strtol_l.constprop.0+0x78>
 8007fec:	f04f 3eff 	mov.w	lr, #4294967295
 8007ff0:	e7e6      	b.n	8007fc0 <_strtol_l.constprop.0+0x94>
 8007ff2:	f1be 3fff 	cmp.w	lr, #4294967295
 8007ff6:	d105      	bne.n	8008004 <_strtol_l.constprop.0+0xd8>
 8007ff8:	2322      	movs	r3, #34	; 0x22
 8007ffa:	6003      	str	r3, [r0, #0]
 8007ffc:	4646      	mov	r6, r8
 8007ffe:	b942      	cbnz	r2, 8008012 <_strtol_l.constprop.0+0xe6>
 8008000:	4630      	mov	r0, r6
 8008002:	e79e      	b.n	8007f42 <_strtol_l.constprop.0+0x16>
 8008004:	b107      	cbz	r7, 8008008 <_strtol_l.constprop.0+0xdc>
 8008006:	4276      	negs	r6, r6
 8008008:	2a00      	cmp	r2, #0
 800800a:	d0f9      	beq.n	8008000 <_strtol_l.constprop.0+0xd4>
 800800c:	f1be 0f00 	cmp.w	lr, #0
 8008010:	d000      	beq.n	8008014 <_strtol_l.constprop.0+0xe8>
 8008012:	1e69      	subs	r1, r5, #1
 8008014:	6011      	str	r1, [r2, #0]
 8008016:	e7f3      	b.n	8008000 <_strtol_l.constprop.0+0xd4>
 8008018:	2430      	movs	r4, #48	; 0x30
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1b1      	bne.n	8007f82 <_strtol_l.constprop.0+0x56>
 800801e:	2308      	movs	r3, #8
 8008020:	e7af      	b.n	8007f82 <_strtol_l.constprop.0+0x56>
 8008022:	2c30      	cmp	r4, #48	; 0x30
 8008024:	d0a5      	beq.n	8007f72 <_strtol_l.constprop.0+0x46>
 8008026:	230a      	movs	r3, #10
 8008028:	e7ab      	b.n	8007f82 <_strtol_l.constprop.0+0x56>
 800802a:	bf00      	nop
 800802c:	080094e1 	.word	0x080094e1

08008030 <_strtol_r>:
 8008030:	f7ff bf7c 	b.w	8007f2c <_strtol_l.constprop.0>

08008034 <__ssputs_r>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	688e      	ldr	r6, [r1, #8]
 800803a:	461f      	mov	r7, r3
 800803c:	42be      	cmp	r6, r7
 800803e:	680b      	ldr	r3, [r1, #0]
 8008040:	4682      	mov	sl, r0
 8008042:	460c      	mov	r4, r1
 8008044:	4690      	mov	r8, r2
 8008046:	d82c      	bhi.n	80080a2 <__ssputs_r+0x6e>
 8008048:	898a      	ldrh	r2, [r1, #12]
 800804a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800804e:	d026      	beq.n	800809e <__ssputs_r+0x6a>
 8008050:	6965      	ldr	r5, [r4, #20]
 8008052:	6909      	ldr	r1, [r1, #16]
 8008054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008058:	eba3 0901 	sub.w	r9, r3, r1
 800805c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008060:	1c7b      	adds	r3, r7, #1
 8008062:	444b      	add	r3, r9
 8008064:	106d      	asrs	r5, r5, #1
 8008066:	429d      	cmp	r5, r3
 8008068:	bf38      	it	cc
 800806a:	461d      	movcc	r5, r3
 800806c:	0553      	lsls	r3, r2, #21
 800806e:	d527      	bpl.n	80080c0 <__ssputs_r+0x8c>
 8008070:	4629      	mov	r1, r5
 8008072:	f7fe fc0f 	bl	8006894 <_malloc_r>
 8008076:	4606      	mov	r6, r0
 8008078:	b360      	cbz	r0, 80080d4 <__ssputs_r+0xa0>
 800807a:	6921      	ldr	r1, [r4, #16]
 800807c:	464a      	mov	r2, r9
 800807e:	f000 fa1b 	bl	80084b8 <memcpy>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	6126      	str	r6, [r4, #16]
 8008090:	6165      	str	r5, [r4, #20]
 8008092:	444e      	add	r6, r9
 8008094:	eba5 0509 	sub.w	r5, r5, r9
 8008098:	6026      	str	r6, [r4, #0]
 800809a:	60a5      	str	r5, [r4, #8]
 800809c:	463e      	mov	r6, r7
 800809e:	42be      	cmp	r6, r7
 80080a0:	d900      	bls.n	80080a4 <__ssputs_r+0x70>
 80080a2:	463e      	mov	r6, r7
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	4632      	mov	r2, r6
 80080a8:	4641      	mov	r1, r8
 80080aa:	f000 f9c9 	bl	8008440 <memmove>
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	1b9b      	subs	r3, r3, r6
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	4433      	add	r3, r6
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	2000      	movs	r0, #0
 80080bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c0:	462a      	mov	r2, r5
 80080c2:	f000 fdae 	bl	8008c22 <_realloc_r>
 80080c6:	4606      	mov	r6, r0
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d1e0      	bne.n	800808e <__ssputs_r+0x5a>
 80080cc:	6921      	ldr	r1, [r4, #16]
 80080ce:	4650      	mov	r0, sl
 80080d0:	f7fe fb6c 	bl	80067ac <_free_r>
 80080d4:	230c      	movs	r3, #12
 80080d6:	f8ca 3000 	str.w	r3, [sl]
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	e7e9      	b.n	80080bc <__ssputs_r+0x88>

080080e8 <_svfiprintf_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	4698      	mov	r8, r3
 80080ee:	898b      	ldrh	r3, [r1, #12]
 80080f0:	061b      	lsls	r3, r3, #24
 80080f2:	b09d      	sub	sp, #116	; 0x74
 80080f4:	4607      	mov	r7, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	d50e      	bpl.n	800811a <_svfiprintf_r+0x32>
 80080fc:	690b      	ldr	r3, [r1, #16]
 80080fe:	b963      	cbnz	r3, 800811a <_svfiprintf_r+0x32>
 8008100:	2140      	movs	r1, #64	; 0x40
 8008102:	f7fe fbc7 	bl	8006894 <_malloc_r>
 8008106:	6028      	str	r0, [r5, #0]
 8008108:	6128      	str	r0, [r5, #16]
 800810a:	b920      	cbnz	r0, 8008116 <_svfiprintf_r+0x2e>
 800810c:	230c      	movs	r3, #12
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e0d0      	b.n	80082b8 <_svfiprintf_r+0x1d0>
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	616b      	str	r3, [r5, #20]
 800811a:	2300      	movs	r3, #0
 800811c:	9309      	str	r3, [sp, #36]	; 0x24
 800811e:	2320      	movs	r3, #32
 8008120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008124:	f8cd 800c 	str.w	r8, [sp, #12]
 8008128:	2330      	movs	r3, #48	; 0x30
 800812a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082d0 <_svfiprintf_r+0x1e8>
 800812e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008132:	f04f 0901 	mov.w	r9, #1
 8008136:	4623      	mov	r3, r4
 8008138:	469a      	mov	sl, r3
 800813a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800813e:	b10a      	cbz	r2, 8008144 <_svfiprintf_r+0x5c>
 8008140:	2a25      	cmp	r2, #37	; 0x25
 8008142:	d1f9      	bne.n	8008138 <_svfiprintf_r+0x50>
 8008144:	ebba 0b04 	subs.w	fp, sl, r4
 8008148:	d00b      	beq.n	8008162 <_svfiprintf_r+0x7a>
 800814a:	465b      	mov	r3, fp
 800814c:	4622      	mov	r2, r4
 800814e:	4629      	mov	r1, r5
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ff6f 	bl	8008034 <__ssputs_r>
 8008156:	3001      	adds	r0, #1
 8008158:	f000 80a9 	beq.w	80082ae <_svfiprintf_r+0x1c6>
 800815c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800815e:	445a      	add	r2, fp
 8008160:	9209      	str	r2, [sp, #36]	; 0x24
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 80a1 	beq.w	80082ae <_svfiprintf_r+0x1c6>
 800816c:	2300      	movs	r3, #0
 800816e:	f04f 32ff 	mov.w	r2, #4294967295
 8008172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008176:	f10a 0a01 	add.w	sl, sl, #1
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	9307      	str	r3, [sp, #28]
 800817e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008182:	931a      	str	r3, [sp, #104]	; 0x68
 8008184:	4654      	mov	r4, sl
 8008186:	2205      	movs	r2, #5
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	4850      	ldr	r0, [pc, #320]	; (80082d0 <_svfiprintf_r+0x1e8>)
 800818e:	f7f8 f81f 	bl	80001d0 <memchr>
 8008192:	9a04      	ldr	r2, [sp, #16]
 8008194:	b9d8      	cbnz	r0, 80081ce <_svfiprintf_r+0xe6>
 8008196:	06d0      	lsls	r0, r2, #27
 8008198:	bf44      	itt	mi
 800819a:	2320      	movmi	r3, #32
 800819c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a0:	0711      	lsls	r1, r2, #28
 80081a2:	bf44      	itt	mi
 80081a4:	232b      	movmi	r3, #43	; 0x2b
 80081a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	2b2a      	cmp	r3, #42	; 0x2a
 80081b0:	d015      	beq.n	80081de <_svfiprintf_r+0xf6>
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	4654      	mov	r4, sl
 80081b6:	2000      	movs	r0, #0
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	4621      	mov	r1, r4
 80081be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c2:	3b30      	subs	r3, #48	; 0x30
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d94d      	bls.n	8008264 <_svfiprintf_r+0x17c>
 80081c8:	b1b0      	cbz	r0, 80081f8 <_svfiprintf_r+0x110>
 80081ca:	9207      	str	r2, [sp, #28]
 80081cc:	e014      	b.n	80081f8 <_svfiprintf_r+0x110>
 80081ce:	eba0 0308 	sub.w	r3, r0, r8
 80081d2:	fa09 f303 	lsl.w	r3, r9, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	46a2      	mov	sl, r4
 80081dc:	e7d2      	b.n	8008184 <_svfiprintf_r+0x9c>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	1d19      	adds	r1, r3, #4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	9103      	str	r1, [sp, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bfbb      	ittet	lt
 80081ea:	425b      	neglt	r3, r3
 80081ec:	f042 0202 	orrlt.w	r2, r2, #2
 80081f0:	9307      	strge	r3, [sp, #28]
 80081f2:	9307      	strlt	r3, [sp, #28]
 80081f4:	bfb8      	it	lt
 80081f6:	9204      	strlt	r2, [sp, #16]
 80081f8:	7823      	ldrb	r3, [r4, #0]
 80081fa:	2b2e      	cmp	r3, #46	; 0x2e
 80081fc:	d10c      	bne.n	8008218 <_svfiprintf_r+0x130>
 80081fe:	7863      	ldrb	r3, [r4, #1]
 8008200:	2b2a      	cmp	r3, #42	; 0x2a
 8008202:	d134      	bne.n	800826e <_svfiprintf_r+0x186>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	1d1a      	adds	r2, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	9203      	str	r2, [sp, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfb8      	it	lt
 8008210:	f04f 33ff 	movlt.w	r3, #4294967295
 8008214:	3402      	adds	r4, #2
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80082e0 <_svfiprintf_r+0x1f8>
 800821c:	7821      	ldrb	r1, [r4, #0]
 800821e:	2203      	movs	r2, #3
 8008220:	4650      	mov	r0, sl
 8008222:	f7f7 ffd5 	bl	80001d0 <memchr>
 8008226:	b138      	cbz	r0, 8008238 <_svfiprintf_r+0x150>
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	eba0 000a 	sub.w	r0, r0, sl
 800822e:	2240      	movs	r2, #64	; 0x40
 8008230:	4082      	lsls	r2, r0
 8008232:	4313      	orrs	r3, r2
 8008234:	3401      	adds	r4, #1
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823c:	4825      	ldr	r0, [pc, #148]	; (80082d4 <_svfiprintf_r+0x1ec>)
 800823e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008242:	2206      	movs	r2, #6
 8008244:	f7f7 ffc4 	bl	80001d0 <memchr>
 8008248:	2800      	cmp	r0, #0
 800824a:	d038      	beq.n	80082be <_svfiprintf_r+0x1d6>
 800824c:	4b22      	ldr	r3, [pc, #136]	; (80082d8 <_svfiprintf_r+0x1f0>)
 800824e:	bb1b      	cbnz	r3, 8008298 <_svfiprintf_r+0x1b0>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	3307      	adds	r3, #7
 8008254:	f023 0307 	bic.w	r3, r3, #7
 8008258:	3308      	adds	r3, #8
 800825a:	9303      	str	r3, [sp, #12]
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	4433      	add	r3, r6
 8008260:	9309      	str	r3, [sp, #36]	; 0x24
 8008262:	e768      	b.n	8008136 <_svfiprintf_r+0x4e>
 8008264:	fb0c 3202 	mla	r2, ip, r2, r3
 8008268:	460c      	mov	r4, r1
 800826a:	2001      	movs	r0, #1
 800826c:	e7a6      	b.n	80081bc <_svfiprintf_r+0xd4>
 800826e:	2300      	movs	r3, #0
 8008270:	3401      	adds	r4, #1
 8008272:	9305      	str	r3, [sp, #20]
 8008274:	4619      	mov	r1, r3
 8008276:	f04f 0c0a 	mov.w	ip, #10
 800827a:	4620      	mov	r0, r4
 800827c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008280:	3a30      	subs	r2, #48	; 0x30
 8008282:	2a09      	cmp	r2, #9
 8008284:	d903      	bls.n	800828e <_svfiprintf_r+0x1a6>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0c6      	beq.n	8008218 <_svfiprintf_r+0x130>
 800828a:	9105      	str	r1, [sp, #20]
 800828c:	e7c4      	b.n	8008218 <_svfiprintf_r+0x130>
 800828e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008292:	4604      	mov	r4, r0
 8008294:	2301      	movs	r3, #1
 8008296:	e7f0      	b.n	800827a <_svfiprintf_r+0x192>
 8008298:	ab03      	add	r3, sp, #12
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	462a      	mov	r2, r5
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <_svfiprintf_r+0x1f4>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	4638      	mov	r0, r7
 80082a4:	f7fc fc86 	bl	8004bb4 <_printf_float>
 80082a8:	1c42      	adds	r2, r0, #1
 80082aa:	4606      	mov	r6, r0
 80082ac:	d1d6      	bne.n	800825c <_svfiprintf_r+0x174>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	065b      	lsls	r3, r3, #25
 80082b2:	f53f af2d 	bmi.w	8008110 <_svfiprintf_r+0x28>
 80082b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082b8:	b01d      	add	sp, #116	; 0x74
 80082ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <_svfiprintf_r+0x1f4>)
 80082c6:	a904      	add	r1, sp, #16
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7fc ff17 	bl	80050fc <_printf_i>
 80082ce:	e7eb      	b.n	80082a8 <_svfiprintf_r+0x1c0>
 80082d0:	080095e1 	.word	0x080095e1
 80082d4:	080095eb 	.word	0x080095eb
 80082d8:	08004bb5 	.word	0x08004bb5
 80082dc:	08008035 	.word	0x08008035
 80082e0:	080095e7 	.word	0x080095e7

080082e4 <__sflush_r>:
 80082e4:	898a      	ldrh	r2, [r1, #12]
 80082e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	0710      	lsls	r0, r2, #28
 80082ee:	460c      	mov	r4, r1
 80082f0:	d458      	bmi.n	80083a4 <__sflush_r+0xc0>
 80082f2:	684b      	ldr	r3, [r1, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc05      	bgt.n	8008304 <__sflush_r+0x20>
 80082f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dc02      	bgt.n	8008304 <__sflush_r+0x20>
 80082fe:	2000      	movs	r0, #0
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008306:	2e00      	cmp	r6, #0
 8008308:	d0f9      	beq.n	80082fe <__sflush_r+0x1a>
 800830a:	2300      	movs	r3, #0
 800830c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008310:	682f      	ldr	r7, [r5, #0]
 8008312:	6a21      	ldr	r1, [r4, #32]
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	d032      	beq.n	800837e <__sflush_r+0x9a>
 8008318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	075a      	lsls	r2, r3, #29
 800831e:	d505      	bpl.n	800832c <__sflush_r+0x48>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	1ac0      	subs	r0, r0, r3
 8008324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008326:	b10b      	cbz	r3, 800832c <__sflush_r+0x48>
 8008328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800832a:	1ac0      	subs	r0, r0, r3
 800832c:	2300      	movs	r3, #0
 800832e:	4602      	mov	r2, r0
 8008330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008332:	6a21      	ldr	r1, [r4, #32]
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	d106      	bne.n	800834c <__sflush_r+0x68>
 800833e:	6829      	ldr	r1, [r5, #0]
 8008340:	291d      	cmp	r1, #29
 8008342:	d82b      	bhi.n	800839c <__sflush_r+0xb8>
 8008344:	4a29      	ldr	r2, [pc, #164]	; (80083ec <__sflush_r+0x108>)
 8008346:	410a      	asrs	r2, r1
 8008348:	07d6      	lsls	r6, r2, #31
 800834a:	d427      	bmi.n	800839c <__sflush_r+0xb8>
 800834c:	2200      	movs	r2, #0
 800834e:	6062      	str	r2, [r4, #4]
 8008350:	04d9      	lsls	r1, r3, #19
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	d504      	bpl.n	8008362 <__sflush_r+0x7e>
 8008358:	1c42      	adds	r2, r0, #1
 800835a:	d101      	bne.n	8008360 <__sflush_r+0x7c>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b903      	cbnz	r3, 8008362 <__sflush_r+0x7e>
 8008360:	6560      	str	r0, [r4, #84]	; 0x54
 8008362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008364:	602f      	str	r7, [r5, #0]
 8008366:	2900      	cmp	r1, #0
 8008368:	d0c9      	beq.n	80082fe <__sflush_r+0x1a>
 800836a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836e:	4299      	cmp	r1, r3
 8008370:	d002      	beq.n	8008378 <__sflush_r+0x94>
 8008372:	4628      	mov	r0, r5
 8008374:	f7fe fa1a 	bl	80067ac <_free_r>
 8008378:	2000      	movs	r0, #0
 800837a:	6360      	str	r0, [r4, #52]	; 0x34
 800837c:	e7c0      	b.n	8008300 <__sflush_r+0x1c>
 800837e:	2301      	movs	r3, #1
 8008380:	4628      	mov	r0, r5
 8008382:	47b0      	blx	r6
 8008384:	1c41      	adds	r1, r0, #1
 8008386:	d1c8      	bne.n	800831a <__sflush_r+0x36>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c5      	beq.n	800831a <__sflush_r+0x36>
 800838e:	2b1d      	cmp	r3, #29
 8008390:	d001      	beq.n	8008396 <__sflush_r+0xb2>
 8008392:	2b16      	cmp	r3, #22
 8008394:	d101      	bne.n	800839a <__sflush_r+0xb6>
 8008396:	602f      	str	r7, [r5, #0]
 8008398:	e7b1      	b.n	80082fe <__sflush_r+0x1a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	e7ad      	b.n	8008300 <__sflush_r+0x1c>
 80083a4:	690f      	ldr	r7, [r1, #16]
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d0a9      	beq.n	80082fe <__sflush_r+0x1a>
 80083aa:	0793      	lsls	r3, r2, #30
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	bf08      	it	eq
 80083b0:	694b      	ldreq	r3, [r1, #20]
 80083b2:	600f      	str	r7, [r1, #0]
 80083b4:	bf18      	it	ne
 80083b6:	2300      	movne	r3, #0
 80083b8:	eba6 0807 	sub.w	r8, r6, r7
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	dd9c      	ble.n	80082fe <__sflush_r+0x1a>
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083c8:	4643      	mov	r3, r8
 80083ca:	463a      	mov	r2, r7
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b0      	blx	r6
 80083d0:	2800      	cmp	r0, #0
 80083d2:	dc06      	bgt.n	80083e2 <__sflush_r+0xfe>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e78e      	b.n	8008300 <__sflush_r+0x1c>
 80083e2:	4407      	add	r7, r0
 80083e4:	eba8 0800 	sub.w	r8, r8, r0
 80083e8:	e7e9      	b.n	80083be <__sflush_r+0xda>
 80083ea:	bf00      	nop
 80083ec:	dfbffffe 	.word	0xdfbffffe

080083f0 <_fflush_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	690b      	ldr	r3, [r1, #16]
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b913      	cbnz	r3, 8008400 <_fflush_r+0x10>
 80083fa:	2500      	movs	r5, #0
 80083fc:	4628      	mov	r0, r5
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	b118      	cbz	r0, 800840a <_fflush_r+0x1a>
 8008402:	6a03      	ldr	r3, [r0, #32]
 8008404:	b90b      	cbnz	r3, 800840a <_fflush_r+0x1a>
 8008406:	f7fd fa37 	bl	8005878 <__sinit>
 800840a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f3      	beq.n	80083fa <_fflush_r+0xa>
 8008412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008414:	07d0      	lsls	r0, r2, #31
 8008416:	d404      	bmi.n	8008422 <_fflush_r+0x32>
 8008418:	0599      	lsls	r1, r3, #22
 800841a:	d402      	bmi.n	8008422 <_fflush_r+0x32>
 800841c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800841e:	f7fd fb42 	bl	8005aa6 <__retarget_lock_acquire_recursive>
 8008422:	4628      	mov	r0, r5
 8008424:	4621      	mov	r1, r4
 8008426:	f7ff ff5d 	bl	80082e4 <__sflush_r>
 800842a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800842c:	07da      	lsls	r2, r3, #31
 800842e:	4605      	mov	r5, r0
 8008430:	d4e4      	bmi.n	80083fc <_fflush_r+0xc>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	059b      	lsls	r3, r3, #22
 8008436:	d4e1      	bmi.n	80083fc <_fflush_r+0xc>
 8008438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843a:	f7fd fb35 	bl	8005aa8 <__retarget_lock_release_recursive>
 800843e:	e7dd      	b.n	80083fc <_fflush_r+0xc>

08008440 <memmove>:
 8008440:	4288      	cmp	r0, r1
 8008442:	b510      	push	{r4, lr}
 8008444:	eb01 0402 	add.w	r4, r1, r2
 8008448:	d902      	bls.n	8008450 <memmove+0x10>
 800844a:	4284      	cmp	r4, r0
 800844c:	4623      	mov	r3, r4
 800844e:	d807      	bhi.n	8008460 <memmove+0x20>
 8008450:	1e43      	subs	r3, r0, #1
 8008452:	42a1      	cmp	r1, r4
 8008454:	d008      	beq.n	8008468 <memmove+0x28>
 8008456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800845a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800845e:	e7f8      	b.n	8008452 <memmove+0x12>
 8008460:	4402      	add	r2, r0
 8008462:	4601      	mov	r1, r0
 8008464:	428a      	cmp	r2, r1
 8008466:	d100      	bne.n	800846a <memmove+0x2a>
 8008468:	bd10      	pop	{r4, pc}
 800846a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800846e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008472:	e7f7      	b.n	8008464 <memmove+0x24>

08008474 <strncmp>:
 8008474:	b510      	push	{r4, lr}
 8008476:	b16a      	cbz	r2, 8008494 <strncmp+0x20>
 8008478:	3901      	subs	r1, #1
 800847a:	1884      	adds	r4, r0, r2
 800847c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008480:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008484:	429a      	cmp	r2, r3
 8008486:	d103      	bne.n	8008490 <strncmp+0x1c>
 8008488:	42a0      	cmp	r0, r4
 800848a:	d001      	beq.n	8008490 <strncmp+0x1c>
 800848c:	2a00      	cmp	r2, #0
 800848e:	d1f5      	bne.n	800847c <strncmp+0x8>
 8008490:	1ad0      	subs	r0, r2, r3
 8008492:	bd10      	pop	{r4, pc}
 8008494:	4610      	mov	r0, r2
 8008496:	e7fc      	b.n	8008492 <strncmp+0x1e>

08008498 <_sbrk_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d06      	ldr	r5, [pc, #24]	; (80084b4 <_sbrk_r+0x1c>)
 800849c:	2300      	movs	r3, #0
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	602b      	str	r3, [r5, #0]
 80084a4:	f7f8 fff6 	bl	8001494 <_sbrk>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_sbrk_r+0x1a>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_sbrk_r+0x1a>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	20000458 	.word	0x20000458

080084b8 <memcpy>:
 80084b8:	440a      	add	r2, r1
 80084ba:	4291      	cmp	r1, r2
 80084bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c0:	d100      	bne.n	80084c4 <memcpy+0xc>
 80084c2:	4770      	bx	lr
 80084c4:	b510      	push	{r4, lr}
 80084c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ce:	4291      	cmp	r1, r2
 80084d0:	d1f9      	bne.n	80084c6 <memcpy+0xe>
 80084d2:	bd10      	pop	{r4, pc}
 80084d4:	0000      	movs	r0, r0
	...

080084d8 <nan>:
 80084d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084e0 <nan+0x8>
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	00000000 	.word	0x00000000
 80084e4:	7ff80000 	.word	0x7ff80000

080084e8 <__assert_func>:
 80084e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ea:	4614      	mov	r4, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <__assert_func+0x2c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4605      	mov	r5, r0
 80084f4:	68d8      	ldr	r0, [r3, #12]
 80084f6:	b14c      	cbz	r4, 800850c <__assert_func+0x24>
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <__assert_func+0x30>)
 80084fa:	9100      	str	r1, [sp, #0]
 80084fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008500:	4906      	ldr	r1, [pc, #24]	; (800851c <__assert_func+0x34>)
 8008502:	462b      	mov	r3, r5
 8008504:	f000 fbca 	bl	8008c9c <fiprintf>
 8008508:	f000 fbda 	bl	8008cc0 <abort>
 800850c:	4b04      	ldr	r3, [pc, #16]	; (8008520 <__assert_func+0x38>)
 800850e:	461c      	mov	r4, r3
 8008510:	e7f3      	b.n	80084fa <__assert_func+0x12>
 8008512:	bf00      	nop
 8008514:	20000064 	.word	0x20000064
 8008518:	080095fa 	.word	0x080095fa
 800851c:	08009607 	.word	0x08009607
 8008520:	08009635 	.word	0x08009635

08008524 <_calloc_r>:
 8008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008526:	fba1 2402 	umull	r2, r4, r1, r2
 800852a:	b94c      	cbnz	r4, 8008540 <_calloc_r+0x1c>
 800852c:	4611      	mov	r1, r2
 800852e:	9201      	str	r2, [sp, #4]
 8008530:	f7fe f9b0 	bl	8006894 <_malloc_r>
 8008534:	9a01      	ldr	r2, [sp, #4]
 8008536:	4605      	mov	r5, r0
 8008538:	b930      	cbnz	r0, 8008548 <_calloc_r+0x24>
 800853a:	4628      	mov	r0, r5
 800853c:	b003      	add	sp, #12
 800853e:	bd30      	pop	{r4, r5, pc}
 8008540:	220c      	movs	r2, #12
 8008542:	6002      	str	r2, [r0, #0]
 8008544:	2500      	movs	r5, #0
 8008546:	e7f8      	b.n	800853a <_calloc_r+0x16>
 8008548:	4621      	mov	r1, r4
 800854a:	f7fd fa2e 	bl	80059aa <memset>
 800854e:	e7f4      	b.n	800853a <_calloc_r+0x16>

08008550 <rshift>:
 8008550:	6903      	ldr	r3, [r0, #16]
 8008552:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008556:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800855a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800855e:	f100 0414 	add.w	r4, r0, #20
 8008562:	dd45      	ble.n	80085f0 <rshift+0xa0>
 8008564:	f011 011f 	ands.w	r1, r1, #31
 8008568:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800856c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008570:	d10c      	bne.n	800858c <rshift+0x3c>
 8008572:	f100 0710 	add.w	r7, r0, #16
 8008576:	4629      	mov	r1, r5
 8008578:	42b1      	cmp	r1, r6
 800857a:	d334      	bcc.n	80085e6 <rshift+0x96>
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	1eea      	subs	r2, r5, #3
 8008582:	4296      	cmp	r6, r2
 8008584:	bf38      	it	cc
 8008586:	2300      	movcc	r3, #0
 8008588:	4423      	add	r3, r4
 800858a:	e015      	b.n	80085b8 <rshift+0x68>
 800858c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008590:	f1c1 0820 	rsb	r8, r1, #32
 8008594:	40cf      	lsrs	r7, r1
 8008596:	f105 0e04 	add.w	lr, r5, #4
 800859a:	46a1      	mov	r9, r4
 800859c:	4576      	cmp	r6, lr
 800859e:	46f4      	mov	ip, lr
 80085a0:	d815      	bhi.n	80085ce <rshift+0x7e>
 80085a2:	1a9a      	subs	r2, r3, r2
 80085a4:	0092      	lsls	r2, r2, #2
 80085a6:	3a04      	subs	r2, #4
 80085a8:	3501      	adds	r5, #1
 80085aa:	42ae      	cmp	r6, r5
 80085ac:	bf38      	it	cc
 80085ae:	2200      	movcc	r2, #0
 80085b0:	18a3      	adds	r3, r4, r2
 80085b2:	50a7      	str	r7, [r4, r2]
 80085b4:	b107      	cbz	r7, 80085b8 <rshift+0x68>
 80085b6:	3304      	adds	r3, #4
 80085b8:	1b1a      	subs	r2, r3, r4
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085c0:	bf08      	it	eq
 80085c2:	2300      	moveq	r3, #0
 80085c4:	6102      	str	r2, [r0, #16]
 80085c6:	bf08      	it	eq
 80085c8:	6143      	streq	r3, [r0, #20]
 80085ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ce:	f8dc c000 	ldr.w	ip, [ip]
 80085d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80085d6:	ea4c 0707 	orr.w	r7, ip, r7
 80085da:	f849 7b04 	str.w	r7, [r9], #4
 80085de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085e2:	40cf      	lsrs	r7, r1
 80085e4:	e7da      	b.n	800859c <rshift+0x4c>
 80085e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80085ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80085ee:	e7c3      	b.n	8008578 <rshift+0x28>
 80085f0:	4623      	mov	r3, r4
 80085f2:	e7e1      	b.n	80085b8 <rshift+0x68>

080085f4 <__hexdig_fun>:
 80085f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80085f8:	2b09      	cmp	r3, #9
 80085fa:	d802      	bhi.n	8008602 <__hexdig_fun+0xe>
 80085fc:	3820      	subs	r0, #32
 80085fe:	b2c0      	uxtb	r0, r0
 8008600:	4770      	bx	lr
 8008602:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008606:	2b05      	cmp	r3, #5
 8008608:	d801      	bhi.n	800860e <__hexdig_fun+0x1a>
 800860a:	3847      	subs	r0, #71	; 0x47
 800860c:	e7f7      	b.n	80085fe <__hexdig_fun+0xa>
 800860e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008612:	2b05      	cmp	r3, #5
 8008614:	d801      	bhi.n	800861a <__hexdig_fun+0x26>
 8008616:	3827      	subs	r0, #39	; 0x27
 8008618:	e7f1      	b.n	80085fe <__hexdig_fun+0xa>
 800861a:	2000      	movs	r0, #0
 800861c:	4770      	bx	lr
	...

08008620 <__gethex>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	4617      	mov	r7, r2
 8008626:	680a      	ldr	r2, [r1, #0]
 8008628:	b085      	sub	sp, #20
 800862a:	f102 0b02 	add.w	fp, r2, #2
 800862e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008632:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008636:	4681      	mov	r9, r0
 8008638:	468a      	mov	sl, r1
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	32fe      	adds	r2, #254	; 0xfe
 800863e:	eb02 030b 	add.w	r3, r2, fp
 8008642:	46d8      	mov	r8, fp
 8008644:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2830      	cmp	r0, #48	; 0x30
 800864c:	d0f7      	beq.n	800863e <__gethex+0x1e>
 800864e:	f7ff ffd1 	bl	80085f4 <__hexdig_fun>
 8008652:	4604      	mov	r4, r0
 8008654:	2800      	cmp	r0, #0
 8008656:	d138      	bne.n	80086ca <__gethex+0xaa>
 8008658:	49a7      	ldr	r1, [pc, #668]	; (80088f8 <__gethex+0x2d8>)
 800865a:	2201      	movs	r2, #1
 800865c:	4640      	mov	r0, r8
 800865e:	f7ff ff09 	bl	8008474 <strncmp>
 8008662:	4606      	mov	r6, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d169      	bne.n	800873c <__gethex+0x11c>
 8008668:	f898 0001 	ldrb.w	r0, [r8, #1]
 800866c:	465d      	mov	r5, fp
 800866e:	f7ff ffc1 	bl	80085f4 <__hexdig_fun>
 8008672:	2800      	cmp	r0, #0
 8008674:	d064      	beq.n	8008740 <__gethex+0x120>
 8008676:	465a      	mov	r2, fp
 8008678:	7810      	ldrb	r0, [r2, #0]
 800867a:	2830      	cmp	r0, #48	; 0x30
 800867c:	4690      	mov	r8, r2
 800867e:	f102 0201 	add.w	r2, r2, #1
 8008682:	d0f9      	beq.n	8008678 <__gethex+0x58>
 8008684:	f7ff ffb6 	bl	80085f4 <__hexdig_fun>
 8008688:	2301      	movs	r3, #1
 800868a:	fab0 f480 	clz	r4, r0
 800868e:	0964      	lsrs	r4, r4, #5
 8008690:	465e      	mov	r6, fp
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	4642      	mov	r2, r8
 8008696:	4615      	mov	r5, r2
 8008698:	3201      	adds	r2, #1
 800869a:	7828      	ldrb	r0, [r5, #0]
 800869c:	f7ff ffaa 	bl	80085f4 <__hexdig_fun>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d1f8      	bne.n	8008696 <__gethex+0x76>
 80086a4:	4994      	ldr	r1, [pc, #592]	; (80088f8 <__gethex+0x2d8>)
 80086a6:	2201      	movs	r2, #1
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7ff fee3 	bl	8008474 <strncmp>
 80086ae:	b978      	cbnz	r0, 80086d0 <__gethex+0xb0>
 80086b0:	b946      	cbnz	r6, 80086c4 <__gethex+0xa4>
 80086b2:	1c6e      	adds	r6, r5, #1
 80086b4:	4632      	mov	r2, r6
 80086b6:	4615      	mov	r5, r2
 80086b8:	3201      	adds	r2, #1
 80086ba:	7828      	ldrb	r0, [r5, #0]
 80086bc:	f7ff ff9a 	bl	80085f4 <__hexdig_fun>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d1f8      	bne.n	80086b6 <__gethex+0x96>
 80086c4:	1b73      	subs	r3, r6, r5
 80086c6:	009e      	lsls	r6, r3, #2
 80086c8:	e004      	b.n	80086d4 <__gethex+0xb4>
 80086ca:	2400      	movs	r4, #0
 80086cc:	4626      	mov	r6, r4
 80086ce:	e7e1      	b.n	8008694 <__gethex+0x74>
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	d1f7      	bne.n	80086c4 <__gethex+0xa4>
 80086d4:	782b      	ldrb	r3, [r5, #0]
 80086d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086da:	2b50      	cmp	r3, #80	; 0x50
 80086dc:	d13d      	bne.n	800875a <__gethex+0x13a>
 80086de:	786b      	ldrb	r3, [r5, #1]
 80086e0:	2b2b      	cmp	r3, #43	; 0x2b
 80086e2:	d02f      	beq.n	8008744 <__gethex+0x124>
 80086e4:	2b2d      	cmp	r3, #45	; 0x2d
 80086e6:	d031      	beq.n	800874c <__gethex+0x12c>
 80086e8:	1c69      	adds	r1, r5, #1
 80086ea:	f04f 0b00 	mov.w	fp, #0
 80086ee:	7808      	ldrb	r0, [r1, #0]
 80086f0:	f7ff ff80 	bl	80085f4 <__hexdig_fun>
 80086f4:	1e42      	subs	r2, r0, #1
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	2a18      	cmp	r2, #24
 80086fa:	d82e      	bhi.n	800875a <__gethex+0x13a>
 80086fc:	f1a0 0210 	sub.w	r2, r0, #16
 8008700:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008704:	f7ff ff76 	bl	80085f4 <__hexdig_fun>
 8008708:	f100 3cff 	add.w	ip, r0, #4294967295
 800870c:	fa5f fc8c 	uxtb.w	ip, ip
 8008710:	f1bc 0f18 	cmp.w	ip, #24
 8008714:	d91d      	bls.n	8008752 <__gethex+0x132>
 8008716:	f1bb 0f00 	cmp.w	fp, #0
 800871a:	d000      	beq.n	800871e <__gethex+0xfe>
 800871c:	4252      	negs	r2, r2
 800871e:	4416      	add	r6, r2
 8008720:	f8ca 1000 	str.w	r1, [sl]
 8008724:	b1dc      	cbz	r4, 800875e <__gethex+0x13e>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	bf14      	ite	ne
 800872c:	f04f 0800 	movne.w	r8, #0
 8008730:	f04f 0806 	moveq.w	r8, #6
 8008734:	4640      	mov	r0, r8
 8008736:	b005      	add	sp, #20
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4645      	mov	r5, r8
 800873e:	4626      	mov	r6, r4
 8008740:	2401      	movs	r4, #1
 8008742:	e7c7      	b.n	80086d4 <__gethex+0xb4>
 8008744:	f04f 0b00 	mov.w	fp, #0
 8008748:	1ca9      	adds	r1, r5, #2
 800874a:	e7d0      	b.n	80086ee <__gethex+0xce>
 800874c:	f04f 0b01 	mov.w	fp, #1
 8008750:	e7fa      	b.n	8008748 <__gethex+0x128>
 8008752:	230a      	movs	r3, #10
 8008754:	fb03 0002 	mla	r0, r3, r2, r0
 8008758:	e7d0      	b.n	80086fc <__gethex+0xdc>
 800875a:	4629      	mov	r1, r5
 800875c:	e7e0      	b.n	8008720 <__gethex+0x100>
 800875e:	eba5 0308 	sub.w	r3, r5, r8
 8008762:	3b01      	subs	r3, #1
 8008764:	4621      	mov	r1, r4
 8008766:	2b07      	cmp	r3, #7
 8008768:	dc0a      	bgt.n	8008780 <__gethex+0x160>
 800876a:	4648      	mov	r0, r9
 800876c:	f7fe f91e 	bl	80069ac <_Balloc>
 8008770:	4604      	mov	r4, r0
 8008772:	b940      	cbnz	r0, 8008786 <__gethex+0x166>
 8008774:	4b61      	ldr	r3, [pc, #388]	; (80088fc <__gethex+0x2dc>)
 8008776:	4602      	mov	r2, r0
 8008778:	21e4      	movs	r1, #228	; 0xe4
 800877a:	4861      	ldr	r0, [pc, #388]	; (8008900 <__gethex+0x2e0>)
 800877c:	f7ff feb4 	bl	80084e8 <__assert_func>
 8008780:	3101      	adds	r1, #1
 8008782:	105b      	asrs	r3, r3, #1
 8008784:	e7ef      	b.n	8008766 <__gethex+0x146>
 8008786:	f100 0a14 	add.w	sl, r0, #20
 800878a:	2300      	movs	r3, #0
 800878c:	495a      	ldr	r1, [pc, #360]	; (80088f8 <__gethex+0x2d8>)
 800878e:	f8cd a004 	str.w	sl, [sp, #4]
 8008792:	469b      	mov	fp, r3
 8008794:	45a8      	cmp	r8, r5
 8008796:	d342      	bcc.n	800881e <__gethex+0x1fe>
 8008798:	9801      	ldr	r0, [sp, #4]
 800879a:	f840 bb04 	str.w	fp, [r0], #4
 800879e:	eba0 000a 	sub.w	r0, r0, sl
 80087a2:	1080      	asrs	r0, r0, #2
 80087a4:	6120      	str	r0, [r4, #16]
 80087a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80087aa:	4658      	mov	r0, fp
 80087ac:	f7fe f9f0 	bl	8006b90 <__hi0bits>
 80087b0:	683d      	ldr	r5, [r7, #0]
 80087b2:	eba8 0000 	sub.w	r0, r8, r0
 80087b6:	42a8      	cmp	r0, r5
 80087b8:	dd59      	ble.n	800886e <__gethex+0x24e>
 80087ba:	eba0 0805 	sub.w	r8, r0, r5
 80087be:	4641      	mov	r1, r8
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7fe fd7f 	bl	80072c4 <__any_on>
 80087c6:	4683      	mov	fp, r0
 80087c8:	b1b8      	cbz	r0, 80087fa <__gethex+0x1da>
 80087ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80087ce:	1159      	asrs	r1, r3, #5
 80087d0:	f003 021f 	and.w	r2, r3, #31
 80087d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80087d8:	f04f 0b01 	mov.w	fp, #1
 80087dc:	fa0b f202 	lsl.w	r2, fp, r2
 80087e0:	420a      	tst	r2, r1
 80087e2:	d00a      	beq.n	80087fa <__gethex+0x1da>
 80087e4:	455b      	cmp	r3, fp
 80087e6:	dd06      	ble.n	80087f6 <__gethex+0x1d6>
 80087e8:	f1a8 0102 	sub.w	r1, r8, #2
 80087ec:	4620      	mov	r0, r4
 80087ee:	f7fe fd69 	bl	80072c4 <__any_on>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d138      	bne.n	8008868 <__gethex+0x248>
 80087f6:	f04f 0b02 	mov.w	fp, #2
 80087fa:	4641      	mov	r1, r8
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff fea7 	bl	8008550 <rshift>
 8008802:	4446      	add	r6, r8
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	42b3      	cmp	r3, r6
 8008808:	da41      	bge.n	800888e <__gethex+0x26e>
 800880a:	4621      	mov	r1, r4
 800880c:	4648      	mov	r0, r9
 800880e:	f7fe f90d 	bl	8006a2c <_Bfree>
 8008812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008814:	2300      	movs	r3, #0
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800881c:	e78a      	b.n	8008734 <__gethex+0x114>
 800881e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008822:	2a2e      	cmp	r2, #46	; 0x2e
 8008824:	d014      	beq.n	8008850 <__gethex+0x230>
 8008826:	2b20      	cmp	r3, #32
 8008828:	d106      	bne.n	8008838 <__gethex+0x218>
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	f843 bb04 	str.w	fp, [r3], #4
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	465b      	mov	r3, fp
 8008838:	7828      	ldrb	r0, [r5, #0]
 800883a:	9303      	str	r3, [sp, #12]
 800883c:	f7ff feda 	bl	80085f4 <__hexdig_fun>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	f000 000f 	and.w	r0, r0, #15
 8008846:	4098      	lsls	r0, r3
 8008848:	ea4b 0b00 	orr.w	fp, fp, r0
 800884c:	3304      	adds	r3, #4
 800884e:	e7a1      	b.n	8008794 <__gethex+0x174>
 8008850:	45a8      	cmp	r8, r5
 8008852:	d8e8      	bhi.n	8008826 <__gethex+0x206>
 8008854:	2201      	movs	r2, #1
 8008856:	4628      	mov	r0, r5
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	f7ff fe0b 	bl	8008474 <strncmp>
 800885e:	4926      	ldr	r1, [pc, #152]	; (80088f8 <__gethex+0x2d8>)
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	2800      	cmp	r0, #0
 8008864:	d1df      	bne.n	8008826 <__gethex+0x206>
 8008866:	e795      	b.n	8008794 <__gethex+0x174>
 8008868:	f04f 0b03 	mov.w	fp, #3
 800886c:	e7c5      	b.n	80087fa <__gethex+0x1da>
 800886e:	da0b      	bge.n	8008888 <__gethex+0x268>
 8008870:	eba5 0800 	sub.w	r8, r5, r0
 8008874:	4621      	mov	r1, r4
 8008876:	4642      	mov	r2, r8
 8008878:	4648      	mov	r0, r9
 800887a:	f7fe faf1 	bl	8006e60 <__lshift>
 800887e:	eba6 0608 	sub.w	r6, r6, r8
 8008882:	4604      	mov	r4, r0
 8008884:	f100 0a14 	add.w	sl, r0, #20
 8008888:	f04f 0b00 	mov.w	fp, #0
 800888c:	e7ba      	b.n	8008804 <__gethex+0x1e4>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	42b3      	cmp	r3, r6
 8008892:	dd73      	ble.n	800897c <__gethex+0x35c>
 8008894:	1b9e      	subs	r6, r3, r6
 8008896:	42b5      	cmp	r5, r6
 8008898:	dc34      	bgt.n	8008904 <__gethex+0x2e4>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d023      	beq.n	80088e8 <__gethex+0x2c8>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d025      	beq.n	80088f0 <__gethex+0x2d0>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d115      	bne.n	80088d4 <__gethex+0x2b4>
 80088a8:	42b5      	cmp	r5, r6
 80088aa:	d113      	bne.n	80088d4 <__gethex+0x2b4>
 80088ac:	2d01      	cmp	r5, #1
 80088ae:	d10b      	bne.n	80088c8 <__gethex+0x2a8>
 80088b0:	9a02      	ldr	r2, [sp, #8]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	2301      	movs	r3, #1
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	f8ca 3000 	str.w	r3, [sl]
 80088be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80088c4:	601c      	str	r4, [r3, #0]
 80088c6:	e735      	b.n	8008734 <__gethex+0x114>
 80088c8:	1e69      	subs	r1, r5, #1
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7fe fcfa 	bl	80072c4 <__any_on>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d1ed      	bne.n	80088b0 <__gethex+0x290>
 80088d4:	4621      	mov	r1, r4
 80088d6:	4648      	mov	r0, r9
 80088d8:	f7fe f8a8 	bl	8006a2c <_Bfree>
 80088dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088de:	2300      	movs	r3, #0
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80088e6:	e725      	b.n	8008734 <__gethex+0x114>
 80088e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f2      	bne.n	80088d4 <__gethex+0x2b4>
 80088ee:	e7df      	b.n	80088b0 <__gethex+0x290>
 80088f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1dc      	bne.n	80088b0 <__gethex+0x290>
 80088f6:	e7ed      	b.n	80088d4 <__gethex+0x2b4>
 80088f8:	0800948c 	.word	0x0800948c
 80088fc:	08009325 	.word	0x08009325
 8008900:	08009636 	.word	0x08009636
 8008904:	f106 38ff 	add.w	r8, r6, #4294967295
 8008908:	f1bb 0f00 	cmp.w	fp, #0
 800890c:	d133      	bne.n	8008976 <__gethex+0x356>
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	d004      	beq.n	800891e <__gethex+0x2fe>
 8008914:	4641      	mov	r1, r8
 8008916:	4620      	mov	r0, r4
 8008918:	f7fe fcd4 	bl	80072c4 <__any_on>
 800891c:	4683      	mov	fp, r0
 800891e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008922:	2301      	movs	r3, #1
 8008924:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008928:	f008 081f 	and.w	r8, r8, #31
 800892c:	fa03 f308 	lsl.w	r3, r3, r8
 8008930:	4213      	tst	r3, r2
 8008932:	4631      	mov	r1, r6
 8008934:	4620      	mov	r0, r4
 8008936:	bf18      	it	ne
 8008938:	f04b 0b02 	orrne.w	fp, fp, #2
 800893c:	1bad      	subs	r5, r5, r6
 800893e:	f7ff fe07 	bl	8008550 <rshift>
 8008942:	687e      	ldr	r6, [r7, #4]
 8008944:	f04f 0802 	mov.w	r8, #2
 8008948:	f1bb 0f00 	cmp.w	fp, #0
 800894c:	d04a      	beq.n	80089e4 <__gethex+0x3c4>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d016      	beq.n	8008982 <__gethex+0x362>
 8008954:	2b03      	cmp	r3, #3
 8008956:	d018      	beq.n	800898a <__gethex+0x36a>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d109      	bne.n	8008970 <__gethex+0x350>
 800895c:	f01b 0f02 	tst.w	fp, #2
 8008960:	d006      	beq.n	8008970 <__gethex+0x350>
 8008962:	f8da 3000 	ldr.w	r3, [sl]
 8008966:	ea4b 0b03 	orr.w	fp, fp, r3
 800896a:	f01b 0f01 	tst.w	fp, #1
 800896e:	d10f      	bne.n	8008990 <__gethex+0x370>
 8008970:	f048 0810 	orr.w	r8, r8, #16
 8008974:	e036      	b.n	80089e4 <__gethex+0x3c4>
 8008976:	f04f 0b01 	mov.w	fp, #1
 800897a:	e7d0      	b.n	800891e <__gethex+0x2fe>
 800897c:	f04f 0801 	mov.w	r8, #1
 8008980:	e7e2      	b.n	8008948 <__gethex+0x328>
 8008982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008984:	f1c3 0301 	rsb	r3, r3, #1
 8008988:	930f      	str	r3, [sp, #60]	; 0x3c
 800898a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0ef      	beq.n	8008970 <__gethex+0x350>
 8008990:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008994:	f104 0214 	add.w	r2, r4, #20
 8008998:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80089a2:	2300      	movs	r3, #0
 80089a4:	4694      	mov	ip, r2
 80089a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80089aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80089ae:	d01e      	beq.n	80089ee <__gethex+0x3ce>
 80089b0:	3101      	adds	r1, #1
 80089b2:	f8cc 1000 	str.w	r1, [ip]
 80089b6:	f1b8 0f02 	cmp.w	r8, #2
 80089ba:	f104 0214 	add.w	r2, r4, #20
 80089be:	d13d      	bne.n	8008a3c <__gethex+0x41c>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	42ab      	cmp	r3, r5
 80089c6:	d10b      	bne.n	80089e0 <__gethex+0x3c0>
 80089c8:	1169      	asrs	r1, r5, #5
 80089ca:	2301      	movs	r3, #1
 80089cc:	f005 051f 	and.w	r5, r5, #31
 80089d0:	fa03 f505 	lsl.w	r5, r3, r5
 80089d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d8:	421d      	tst	r5, r3
 80089da:	bf18      	it	ne
 80089dc:	f04f 0801 	movne.w	r8, #1
 80089e0:	f048 0820 	orr.w	r8, r8, #32
 80089e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089e6:	601c      	str	r4, [r3, #0]
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	601e      	str	r6, [r3, #0]
 80089ec:	e6a2      	b.n	8008734 <__gethex+0x114>
 80089ee:	4290      	cmp	r0, r2
 80089f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80089f4:	d8d6      	bhi.n	80089a4 <__gethex+0x384>
 80089f6:	68a2      	ldr	r2, [r4, #8]
 80089f8:	4593      	cmp	fp, r2
 80089fa:	db17      	blt.n	8008a2c <__gethex+0x40c>
 80089fc:	6861      	ldr	r1, [r4, #4]
 80089fe:	4648      	mov	r0, r9
 8008a00:	3101      	adds	r1, #1
 8008a02:	f7fd ffd3 	bl	80069ac <_Balloc>
 8008a06:	4682      	mov	sl, r0
 8008a08:	b918      	cbnz	r0, 8008a12 <__gethex+0x3f2>
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <__gethex+0x458>)
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	2184      	movs	r1, #132	; 0x84
 8008a10:	e6b3      	b.n	800877a <__gethex+0x15a>
 8008a12:	6922      	ldr	r2, [r4, #16]
 8008a14:	3202      	adds	r2, #2
 8008a16:	f104 010c 	add.w	r1, r4, #12
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	300c      	adds	r0, #12
 8008a1e:	f7ff fd4b 	bl	80084b8 <memcpy>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4648      	mov	r0, r9
 8008a26:	f7fe f801 	bl	8006a2c <_Bfree>
 8008a2a:	4654      	mov	r4, sl
 8008a2c:	6922      	ldr	r2, [r4, #16]
 8008a2e:	1c51      	adds	r1, r2, #1
 8008a30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008a34:	6121      	str	r1, [r4, #16]
 8008a36:	2101      	movs	r1, #1
 8008a38:	6151      	str	r1, [r2, #20]
 8008a3a:	e7bc      	b.n	80089b6 <__gethex+0x396>
 8008a3c:	6921      	ldr	r1, [r4, #16]
 8008a3e:	4559      	cmp	r1, fp
 8008a40:	dd0b      	ble.n	8008a5a <__gethex+0x43a>
 8008a42:	2101      	movs	r1, #1
 8008a44:	4620      	mov	r0, r4
 8008a46:	f7ff fd83 	bl	8008550 <rshift>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	42b3      	cmp	r3, r6
 8008a50:	f6ff aedb 	blt.w	800880a <__gethex+0x1ea>
 8008a54:	f04f 0801 	mov.w	r8, #1
 8008a58:	e7c2      	b.n	80089e0 <__gethex+0x3c0>
 8008a5a:	f015 051f 	ands.w	r5, r5, #31
 8008a5e:	d0f9      	beq.n	8008a54 <__gethex+0x434>
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	441a      	add	r2, r3
 8008a64:	f1c5 0520 	rsb	r5, r5, #32
 8008a68:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008a6c:	f7fe f890 	bl	8006b90 <__hi0bits>
 8008a70:	42a8      	cmp	r0, r5
 8008a72:	dbe6      	blt.n	8008a42 <__gethex+0x422>
 8008a74:	e7ee      	b.n	8008a54 <__gethex+0x434>
 8008a76:	bf00      	nop
 8008a78:	08009325 	.word	0x08009325

08008a7c <L_shift>:
 8008a7c:	f1c2 0208 	rsb	r2, r2, #8
 8008a80:	0092      	lsls	r2, r2, #2
 8008a82:	b570      	push	{r4, r5, r6, lr}
 8008a84:	f1c2 0620 	rsb	r6, r2, #32
 8008a88:	6843      	ldr	r3, [r0, #4]
 8008a8a:	6804      	ldr	r4, [r0, #0]
 8008a8c:	fa03 f506 	lsl.w	r5, r3, r6
 8008a90:	432c      	orrs	r4, r5
 8008a92:	40d3      	lsrs	r3, r2
 8008a94:	6004      	str	r4, [r0, #0]
 8008a96:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a9a:	4288      	cmp	r0, r1
 8008a9c:	d3f4      	bcc.n	8008a88 <L_shift+0xc>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}

08008aa0 <__match>:
 8008aa0:	b530      	push	{r4, r5, lr}
 8008aa2:	6803      	ldr	r3, [r0, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aaa:	b914      	cbnz	r4, 8008ab2 <__match+0x12>
 8008aac:	6003      	str	r3, [r0, #0]
 8008aae:	2001      	movs	r0, #1
 8008ab0:	bd30      	pop	{r4, r5, pc}
 8008ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008aba:	2d19      	cmp	r5, #25
 8008abc:	bf98      	it	ls
 8008abe:	3220      	addls	r2, #32
 8008ac0:	42a2      	cmp	r2, r4
 8008ac2:	d0f0      	beq.n	8008aa6 <__match+0x6>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e7f3      	b.n	8008ab0 <__match+0x10>

08008ac8 <__hexnan>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	680b      	ldr	r3, [r1, #0]
 8008ace:	6801      	ldr	r1, [r0, #0]
 8008ad0:	115e      	asrs	r6, r3, #5
 8008ad2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ad6:	f013 031f 	ands.w	r3, r3, #31
 8008ada:	b087      	sub	sp, #28
 8008adc:	bf18      	it	ne
 8008ade:	3604      	addne	r6, #4
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	1f37      	subs	r7, r6, #4
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	4690      	mov	r8, r2
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	f846 5c04 	str.w	r5, [r6, #-4]
 8008aee:	46b9      	mov	r9, r7
 8008af0:	463c      	mov	r4, r7
 8008af2:	9502      	str	r5, [sp, #8]
 8008af4:	46ab      	mov	fp, r5
 8008af6:	784a      	ldrb	r2, [r1, #1]
 8008af8:	1c4b      	adds	r3, r1, #1
 8008afa:	9303      	str	r3, [sp, #12]
 8008afc:	b342      	cbz	r2, 8008b50 <__hexnan+0x88>
 8008afe:	4610      	mov	r0, r2
 8008b00:	9105      	str	r1, [sp, #20]
 8008b02:	9204      	str	r2, [sp, #16]
 8008b04:	f7ff fd76 	bl	80085f4 <__hexdig_fun>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d14f      	bne.n	8008bac <__hexnan+0xe4>
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	9905      	ldr	r1, [sp, #20]
 8008b10:	2a20      	cmp	r2, #32
 8008b12:	d818      	bhi.n	8008b46 <__hexnan+0x7e>
 8008b14:	9b02      	ldr	r3, [sp, #8]
 8008b16:	459b      	cmp	fp, r3
 8008b18:	dd13      	ble.n	8008b42 <__hexnan+0x7a>
 8008b1a:	454c      	cmp	r4, r9
 8008b1c:	d206      	bcs.n	8008b2c <__hexnan+0x64>
 8008b1e:	2d07      	cmp	r5, #7
 8008b20:	dc04      	bgt.n	8008b2c <__hexnan+0x64>
 8008b22:	462a      	mov	r2, r5
 8008b24:	4649      	mov	r1, r9
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff ffa8 	bl	8008a7c <L_shift>
 8008b2c:	4544      	cmp	r4, r8
 8008b2e:	d950      	bls.n	8008bd2 <__hexnan+0x10a>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f1a4 0904 	sub.w	r9, r4, #4
 8008b36:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008b3e:	464c      	mov	r4, r9
 8008b40:	461d      	mov	r5, r3
 8008b42:	9903      	ldr	r1, [sp, #12]
 8008b44:	e7d7      	b.n	8008af6 <__hexnan+0x2e>
 8008b46:	2a29      	cmp	r2, #41	; 0x29
 8008b48:	d155      	bne.n	8008bf6 <__hexnan+0x12e>
 8008b4a:	3102      	adds	r1, #2
 8008b4c:	f8ca 1000 	str.w	r1, [sl]
 8008b50:	f1bb 0f00 	cmp.w	fp, #0
 8008b54:	d04f      	beq.n	8008bf6 <__hexnan+0x12e>
 8008b56:	454c      	cmp	r4, r9
 8008b58:	d206      	bcs.n	8008b68 <__hexnan+0xa0>
 8008b5a:	2d07      	cmp	r5, #7
 8008b5c:	dc04      	bgt.n	8008b68 <__hexnan+0xa0>
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4649      	mov	r1, r9
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7ff ff8a 	bl	8008a7c <L_shift>
 8008b68:	4544      	cmp	r4, r8
 8008b6a:	d934      	bls.n	8008bd6 <__hexnan+0x10e>
 8008b6c:	f1a8 0204 	sub.w	r2, r8, #4
 8008b70:	4623      	mov	r3, r4
 8008b72:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b76:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b7a:	429f      	cmp	r7, r3
 8008b7c:	d2f9      	bcs.n	8008b72 <__hexnan+0xaa>
 8008b7e:	1b3b      	subs	r3, r7, r4
 8008b80:	f023 0303 	bic.w	r3, r3, #3
 8008b84:	3304      	adds	r3, #4
 8008b86:	3e03      	subs	r6, #3
 8008b88:	3401      	adds	r4, #1
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	bf38      	it	cc
 8008b8e:	2304      	movcc	r3, #4
 8008b90:	4443      	add	r3, r8
 8008b92:	2200      	movs	r2, #0
 8008b94:	f843 2b04 	str.w	r2, [r3], #4
 8008b98:	429f      	cmp	r7, r3
 8008b9a:	d2fb      	bcs.n	8008b94 <__hexnan+0xcc>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	b91b      	cbnz	r3, 8008ba8 <__hexnan+0xe0>
 8008ba0:	4547      	cmp	r7, r8
 8008ba2:	d126      	bne.n	8008bf2 <__hexnan+0x12a>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	2005      	movs	r0, #5
 8008baa:	e025      	b.n	8008bf8 <__hexnan+0x130>
 8008bac:	3501      	adds	r5, #1
 8008bae:	2d08      	cmp	r5, #8
 8008bb0:	f10b 0b01 	add.w	fp, fp, #1
 8008bb4:	dd06      	ble.n	8008bc4 <__hexnan+0xfc>
 8008bb6:	4544      	cmp	r4, r8
 8008bb8:	d9c3      	bls.n	8008b42 <__hexnan+0x7a>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bc0:	2501      	movs	r5, #1
 8008bc2:	3c04      	subs	r4, #4
 8008bc4:	6822      	ldr	r2, [r4, #0]
 8008bc6:	f000 000f 	and.w	r0, r0, #15
 8008bca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008bce:	6020      	str	r0, [r4, #0]
 8008bd0:	e7b7      	b.n	8008b42 <__hexnan+0x7a>
 8008bd2:	2508      	movs	r5, #8
 8008bd4:	e7b5      	b.n	8008b42 <__hexnan+0x7a>
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0df      	beq.n	8008b9c <__hexnan+0xd4>
 8008bdc:	f1c3 0320 	rsb	r3, r3, #32
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295
 8008be4:	40da      	lsrs	r2, r3
 8008be6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008bea:	4013      	ands	r3, r2
 8008bec:	f846 3c04 	str.w	r3, [r6, #-4]
 8008bf0:	e7d4      	b.n	8008b9c <__hexnan+0xd4>
 8008bf2:	3f04      	subs	r7, #4
 8008bf4:	e7d2      	b.n	8008b9c <__hexnan+0xd4>
 8008bf6:	2004      	movs	r0, #4
 8008bf8:	b007      	add	sp, #28
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bfe <__ascii_mbtowc>:
 8008bfe:	b082      	sub	sp, #8
 8008c00:	b901      	cbnz	r1, 8008c04 <__ascii_mbtowc+0x6>
 8008c02:	a901      	add	r1, sp, #4
 8008c04:	b142      	cbz	r2, 8008c18 <__ascii_mbtowc+0x1a>
 8008c06:	b14b      	cbz	r3, 8008c1c <__ascii_mbtowc+0x1e>
 8008c08:	7813      	ldrb	r3, [r2, #0]
 8008c0a:	600b      	str	r3, [r1, #0]
 8008c0c:	7812      	ldrb	r2, [r2, #0]
 8008c0e:	1e10      	subs	r0, r2, #0
 8008c10:	bf18      	it	ne
 8008c12:	2001      	movne	r0, #1
 8008c14:	b002      	add	sp, #8
 8008c16:	4770      	bx	lr
 8008c18:	4610      	mov	r0, r2
 8008c1a:	e7fb      	b.n	8008c14 <__ascii_mbtowc+0x16>
 8008c1c:	f06f 0001 	mvn.w	r0, #1
 8008c20:	e7f8      	b.n	8008c14 <__ascii_mbtowc+0x16>

08008c22 <_realloc_r>:
 8008c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c26:	4680      	mov	r8, r0
 8008c28:	4614      	mov	r4, r2
 8008c2a:	460e      	mov	r6, r1
 8008c2c:	b921      	cbnz	r1, 8008c38 <_realloc_r+0x16>
 8008c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	4611      	mov	r1, r2
 8008c34:	f7fd be2e 	b.w	8006894 <_malloc_r>
 8008c38:	b92a      	cbnz	r2, 8008c46 <_realloc_r+0x24>
 8008c3a:	f7fd fdb7 	bl	80067ac <_free_r>
 8008c3e:	4625      	mov	r5, r4
 8008c40:	4628      	mov	r0, r5
 8008c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c46:	f000 f842 	bl	8008cce <_malloc_usable_size_r>
 8008c4a:	4284      	cmp	r4, r0
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	d802      	bhi.n	8008c56 <_realloc_r+0x34>
 8008c50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c54:	d812      	bhi.n	8008c7c <_realloc_r+0x5a>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4640      	mov	r0, r8
 8008c5a:	f7fd fe1b 	bl	8006894 <_malloc_r>
 8008c5e:	4605      	mov	r5, r0
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0ed      	beq.n	8008c40 <_realloc_r+0x1e>
 8008c64:	42bc      	cmp	r4, r7
 8008c66:	4622      	mov	r2, r4
 8008c68:	4631      	mov	r1, r6
 8008c6a:	bf28      	it	cs
 8008c6c:	463a      	movcs	r2, r7
 8008c6e:	f7ff fc23 	bl	80084b8 <memcpy>
 8008c72:	4631      	mov	r1, r6
 8008c74:	4640      	mov	r0, r8
 8008c76:	f7fd fd99 	bl	80067ac <_free_r>
 8008c7a:	e7e1      	b.n	8008c40 <_realloc_r+0x1e>
 8008c7c:	4635      	mov	r5, r6
 8008c7e:	e7df      	b.n	8008c40 <_realloc_r+0x1e>

08008c80 <__ascii_wctomb>:
 8008c80:	b149      	cbz	r1, 8008c96 <__ascii_wctomb+0x16>
 8008c82:	2aff      	cmp	r2, #255	; 0xff
 8008c84:	bf85      	ittet	hi
 8008c86:	238a      	movhi	r3, #138	; 0x8a
 8008c88:	6003      	strhi	r3, [r0, #0]
 8008c8a:	700a      	strbls	r2, [r1, #0]
 8008c8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c90:	bf98      	it	ls
 8008c92:	2001      	movls	r0, #1
 8008c94:	4770      	bx	lr
 8008c96:	4608      	mov	r0, r1
 8008c98:	4770      	bx	lr
	...

08008c9c <fiprintf>:
 8008c9c:	b40e      	push	{r1, r2, r3}
 8008c9e:	b503      	push	{r0, r1, lr}
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	4805      	ldr	r0, [pc, #20]	; (8008cbc <fiprintf+0x20>)
 8008ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	f000 f83f 	bl	8008d30 <_vfiprintf_r>
 8008cb2:	b002      	add	sp, #8
 8008cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cb8:	b003      	add	sp, #12
 8008cba:	4770      	bx	lr
 8008cbc:	20000064 	.word	0x20000064

08008cc0 <abort>:
 8008cc0:	b508      	push	{r3, lr}
 8008cc2:	2006      	movs	r0, #6
 8008cc4:	f000 fa0c 	bl	80090e0 <raise>
 8008cc8:	2001      	movs	r0, #1
 8008cca:	f7f8 fb6b 	bl	80013a4 <_exit>

08008cce <_malloc_usable_size_r>:
 8008cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd2:	1f18      	subs	r0, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfbc      	itt	lt
 8008cd8:	580b      	ldrlt	r3, [r1, r0]
 8008cda:	18c0      	addlt	r0, r0, r3
 8008cdc:	4770      	bx	lr

08008cde <__sfputc_r>:
 8008cde:	6893      	ldr	r3, [r2, #8]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	b410      	push	{r4}
 8008ce6:	6093      	str	r3, [r2, #8]
 8008ce8:	da08      	bge.n	8008cfc <__sfputc_r+0x1e>
 8008cea:	6994      	ldr	r4, [r2, #24]
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	db01      	blt.n	8008cf4 <__sfputc_r+0x16>
 8008cf0:	290a      	cmp	r1, #10
 8008cf2:	d103      	bne.n	8008cfc <__sfputc_r+0x1e>
 8008cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf8:	f000 b934 	b.w	8008f64 <__swbuf_r>
 8008cfc:	6813      	ldr	r3, [r2, #0]
 8008cfe:	1c58      	adds	r0, r3, #1
 8008d00:	6010      	str	r0, [r2, #0]
 8008d02:	7019      	strb	r1, [r3, #0]
 8008d04:	4608      	mov	r0, r1
 8008d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <__sfputs_r>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	4614      	mov	r4, r2
 8008d14:	18d5      	adds	r5, r2, r3
 8008d16:	42ac      	cmp	r4, r5
 8008d18:	d101      	bne.n	8008d1e <__sfputs_r+0x12>
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	e007      	b.n	8008d2e <__sfputs_r+0x22>
 8008d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d22:	463a      	mov	r2, r7
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ffda 	bl	8008cde <__sfputc_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d1f3      	bne.n	8008d16 <__sfputs_r+0xa>
 8008d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d30 <_vfiprintf_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	460d      	mov	r5, r1
 8008d36:	b09d      	sub	sp, #116	; 0x74
 8008d38:	4614      	mov	r4, r2
 8008d3a:	4698      	mov	r8, r3
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	b118      	cbz	r0, 8008d48 <_vfiprintf_r+0x18>
 8008d40:	6a03      	ldr	r3, [r0, #32]
 8008d42:	b90b      	cbnz	r3, 8008d48 <_vfiprintf_r+0x18>
 8008d44:	f7fc fd98 	bl	8005878 <__sinit>
 8008d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d4a:	07d9      	lsls	r1, r3, #31
 8008d4c:	d405      	bmi.n	8008d5a <_vfiprintf_r+0x2a>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_vfiprintf_r+0x2a>
 8008d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d56:	f7fc fea6 	bl	8005aa6 <__retarget_lock_acquire_recursive>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	071b      	lsls	r3, r3, #28
 8008d5e:	d501      	bpl.n	8008d64 <_vfiprintf_r+0x34>
 8008d60:	692b      	ldr	r3, [r5, #16]
 8008d62:	b99b      	cbnz	r3, 8008d8c <_vfiprintf_r+0x5c>
 8008d64:	4629      	mov	r1, r5
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 f93a 	bl	8008fe0 <__swsetup_r>
 8008d6c:	b170      	cbz	r0, 8008d8c <_vfiprintf_r+0x5c>
 8008d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d70:	07dc      	lsls	r4, r3, #31
 8008d72:	d504      	bpl.n	8008d7e <_vfiprintf_r+0x4e>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	b01d      	add	sp, #116	; 0x74
 8008d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	0598      	lsls	r0, r3, #22
 8008d82:	d4f7      	bmi.n	8008d74 <_vfiprintf_r+0x44>
 8008d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d86:	f7fc fe8f 	bl	8005aa8 <__retarget_lock_release_recursive>
 8008d8a:	e7f3      	b.n	8008d74 <_vfiprintf_r+0x44>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d90:	2320      	movs	r3, #32
 8008d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d9a:	2330      	movs	r3, #48	; 0x30
 8008d9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f50 <_vfiprintf_r+0x220>
 8008da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008da4:	f04f 0901 	mov.w	r9, #1
 8008da8:	4623      	mov	r3, r4
 8008daa:	469a      	mov	sl, r3
 8008dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db0:	b10a      	cbz	r2, 8008db6 <_vfiprintf_r+0x86>
 8008db2:	2a25      	cmp	r2, #37	; 0x25
 8008db4:	d1f9      	bne.n	8008daa <_vfiprintf_r+0x7a>
 8008db6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dba:	d00b      	beq.n	8008dd4 <_vfiprintf_r+0xa4>
 8008dbc:	465b      	mov	r3, fp
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ffa2 	bl	8008d0c <__sfputs_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f000 80a9 	beq.w	8008f20 <_vfiprintf_r+0x1f0>
 8008dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd0:	445a      	add	r2, fp
 8008dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 80a1 	beq.w	8008f20 <_vfiprintf_r+0x1f0>
 8008dde:	2300      	movs	r3, #0
 8008de0:	f04f 32ff 	mov.w	r2, #4294967295
 8008de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de8:	f10a 0a01 	add.w	sl, sl, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008df4:	931a      	str	r3, [sp, #104]	; 0x68
 8008df6:	4654      	mov	r4, sl
 8008df8:	2205      	movs	r2, #5
 8008dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfe:	4854      	ldr	r0, [pc, #336]	; (8008f50 <_vfiprintf_r+0x220>)
 8008e00:	f7f7 f9e6 	bl	80001d0 <memchr>
 8008e04:	9a04      	ldr	r2, [sp, #16]
 8008e06:	b9d8      	cbnz	r0, 8008e40 <_vfiprintf_r+0x110>
 8008e08:	06d1      	lsls	r1, r2, #27
 8008e0a:	bf44      	itt	mi
 8008e0c:	2320      	movmi	r3, #32
 8008e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e12:	0713      	lsls	r3, r2, #28
 8008e14:	bf44      	itt	mi
 8008e16:	232b      	movmi	r3, #43	; 0x2b
 8008e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b2a      	cmp	r3, #42	; 0x2a
 8008e22:	d015      	beq.n	8008e50 <_vfiprintf_r+0x120>
 8008e24:	9a07      	ldr	r2, [sp, #28]
 8008e26:	4654      	mov	r4, sl
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	4621      	mov	r1, r4
 8008e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e34:	3b30      	subs	r3, #48	; 0x30
 8008e36:	2b09      	cmp	r3, #9
 8008e38:	d94d      	bls.n	8008ed6 <_vfiprintf_r+0x1a6>
 8008e3a:	b1b0      	cbz	r0, 8008e6a <_vfiprintf_r+0x13a>
 8008e3c:	9207      	str	r2, [sp, #28]
 8008e3e:	e014      	b.n	8008e6a <_vfiprintf_r+0x13a>
 8008e40:	eba0 0308 	sub.w	r3, r0, r8
 8008e44:	fa09 f303 	lsl.w	r3, r9, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	46a2      	mov	sl, r4
 8008e4e:	e7d2      	b.n	8008df6 <_vfiprintf_r+0xc6>
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	1d19      	adds	r1, r3, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	9103      	str	r1, [sp, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	bfbb      	ittet	lt
 8008e5c:	425b      	neglt	r3, r3
 8008e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e62:	9307      	strge	r3, [sp, #28]
 8008e64:	9307      	strlt	r3, [sp, #28]
 8008e66:	bfb8      	it	lt
 8008e68:	9204      	strlt	r2, [sp, #16]
 8008e6a:	7823      	ldrb	r3, [r4, #0]
 8008e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e6e:	d10c      	bne.n	8008e8a <_vfiprintf_r+0x15a>
 8008e70:	7863      	ldrb	r3, [r4, #1]
 8008e72:	2b2a      	cmp	r3, #42	; 0x2a
 8008e74:	d134      	bne.n	8008ee0 <_vfiprintf_r+0x1b0>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	9203      	str	r2, [sp, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e86:	3402      	adds	r4, #2
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f60 <_vfiprintf_r+0x230>
 8008e8e:	7821      	ldrb	r1, [r4, #0]
 8008e90:	2203      	movs	r2, #3
 8008e92:	4650      	mov	r0, sl
 8008e94:	f7f7 f99c 	bl	80001d0 <memchr>
 8008e98:	b138      	cbz	r0, 8008eaa <_vfiprintf_r+0x17a>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ea0:	2240      	movs	r2, #64	; 0x40
 8008ea2:	4082      	lsls	r2, r0
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	3401      	adds	r4, #1
 8008ea8:	9304      	str	r3, [sp, #16]
 8008eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eae:	4829      	ldr	r0, [pc, #164]	; (8008f54 <_vfiprintf_r+0x224>)
 8008eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb4:	2206      	movs	r2, #6
 8008eb6:	f7f7 f98b 	bl	80001d0 <memchr>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d03f      	beq.n	8008f3e <_vfiprintf_r+0x20e>
 8008ebe:	4b26      	ldr	r3, [pc, #152]	; (8008f58 <_vfiprintf_r+0x228>)
 8008ec0:	bb1b      	cbnz	r3, 8008f0a <_vfiprintf_r+0x1da>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	3307      	adds	r3, #7
 8008ec6:	f023 0307 	bic.w	r3, r3, #7
 8008eca:	3308      	adds	r3, #8
 8008ecc:	9303      	str	r3, [sp, #12]
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	443b      	add	r3, r7
 8008ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed4:	e768      	b.n	8008da8 <_vfiprintf_r+0x78>
 8008ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eda:	460c      	mov	r4, r1
 8008edc:	2001      	movs	r0, #1
 8008ede:	e7a6      	b.n	8008e2e <_vfiprintf_r+0xfe>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	3401      	adds	r4, #1
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f04f 0c0a 	mov.w	ip, #10
 8008eec:	4620      	mov	r0, r4
 8008eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef2:	3a30      	subs	r2, #48	; 0x30
 8008ef4:	2a09      	cmp	r2, #9
 8008ef6:	d903      	bls.n	8008f00 <_vfiprintf_r+0x1d0>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0c6      	beq.n	8008e8a <_vfiprintf_r+0x15a>
 8008efc:	9105      	str	r1, [sp, #20]
 8008efe:	e7c4      	b.n	8008e8a <_vfiprintf_r+0x15a>
 8008f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f04:	4604      	mov	r4, r0
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7f0      	b.n	8008eec <_vfiprintf_r+0x1bc>
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <_vfiprintf_r+0x22c>)
 8008f12:	a904      	add	r1, sp, #16
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fb fe4d 	bl	8004bb4 <_printf_float>
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	1c78      	adds	r0, r7, #1
 8008f1e:	d1d6      	bne.n	8008ece <_vfiprintf_r+0x19e>
 8008f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f22:	07d9      	lsls	r1, r3, #31
 8008f24:	d405      	bmi.n	8008f32 <_vfiprintf_r+0x202>
 8008f26:	89ab      	ldrh	r3, [r5, #12]
 8008f28:	059a      	lsls	r2, r3, #22
 8008f2a:	d402      	bmi.n	8008f32 <_vfiprintf_r+0x202>
 8008f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f2e:	f7fc fdbb 	bl	8005aa8 <__retarget_lock_release_recursive>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	065b      	lsls	r3, r3, #25
 8008f36:	f53f af1d 	bmi.w	8008d74 <_vfiprintf_r+0x44>
 8008f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f3c:	e71c      	b.n	8008d78 <_vfiprintf_r+0x48>
 8008f3e:	ab03      	add	r3, sp, #12
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	462a      	mov	r2, r5
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <_vfiprintf_r+0x22c>)
 8008f46:	a904      	add	r1, sp, #16
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7fc f8d7 	bl	80050fc <_printf_i>
 8008f4e:	e7e4      	b.n	8008f1a <_vfiprintf_r+0x1ea>
 8008f50:	080095e1 	.word	0x080095e1
 8008f54:	080095eb 	.word	0x080095eb
 8008f58:	08004bb5 	.word	0x08004bb5
 8008f5c:	08008d0d 	.word	0x08008d0d
 8008f60:	080095e7 	.word	0x080095e7

08008f64 <__swbuf_r>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	460e      	mov	r6, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	b118      	cbz	r0, 8008f76 <__swbuf_r+0x12>
 8008f6e:	6a03      	ldr	r3, [r0, #32]
 8008f70:	b90b      	cbnz	r3, 8008f76 <__swbuf_r+0x12>
 8008f72:	f7fc fc81 	bl	8005878 <__sinit>
 8008f76:	69a3      	ldr	r3, [r4, #24]
 8008f78:	60a3      	str	r3, [r4, #8]
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	071a      	lsls	r2, r3, #28
 8008f7e:	d525      	bpl.n	8008fcc <__swbuf_r+0x68>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	b31b      	cbz	r3, 8008fcc <__swbuf_r+0x68>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	6922      	ldr	r2, [r4, #16]
 8008f88:	1a98      	subs	r0, r3, r2
 8008f8a:	6963      	ldr	r3, [r4, #20]
 8008f8c:	b2f6      	uxtb	r6, r6
 8008f8e:	4283      	cmp	r3, r0
 8008f90:	4637      	mov	r7, r6
 8008f92:	dc04      	bgt.n	8008f9e <__swbuf_r+0x3a>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4628      	mov	r0, r5
 8008f98:	f7ff fa2a 	bl	80083f0 <_fflush_r>
 8008f9c:	b9e0      	cbnz	r0, 8008fd8 <__swbuf_r+0x74>
 8008f9e:	68a3      	ldr	r3, [r4, #8]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	60a3      	str	r3, [r4, #8]
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	701e      	strb	r6, [r3, #0]
 8008fac:	6962      	ldr	r2, [r4, #20]
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d004      	beq.n	8008fbe <__swbuf_r+0x5a>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	07db      	lsls	r3, r3, #31
 8008fb8:	d506      	bpl.n	8008fc8 <__swbuf_r+0x64>
 8008fba:	2e0a      	cmp	r6, #10
 8008fbc:	d104      	bne.n	8008fc8 <__swbuf_r+0x64>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f7ff fa15 	bl	80083f0 <_fflush_r>
 8008fc6:	b938      	cbnz	r0, 8008fd8 <__swbuf_r+0x74>
 8008fc8:	4638      	mov	r0, r7
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f806 	bl	8008fe0 <__swsetup_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d0d5      	beq.n	8008f84 <__swbuf_r+0x20>
 8008fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8008fdc:	e7f4      	b.n	8008fc8 <__swbuf_r+0x64>
	...

08008fe0 <__swsetup_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4b2a      	ldr	r3, [pc, #168]	; (800908c <__swsetup_r+0xac>)
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	460c      	mov	r4, r1
 8008fea:	b118      	cbz	r0, 8008ff4 <__swsetup_r+0x14>
 8008fec:	6a03      	ldr	r3, [r0, #32]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <__swsetup_r+0x14>
 8008ff0:	f7fc fc42 	bl	8005878 <__sinit>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ffa:	0718      	lsls	r0, r3, #28
 8008ffc:	d422      	bmi.n	8009044 <__swsetup_r+0x64>
 8008ffe:	06d9      	lsls	r1, r3, #27
 8009000:	d407      	bmi.n	8009012 <__swsetup_r+0x32>
 8009002:	2309      	movs	r3, #9
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e034      	b.n	800907c <__swsetup_r+0x9c>
 8009012:	0758      	lsls	r0, r3, #29
 8009014:	d512      	bpl.n	800903c <__swsetup_r+0x5c>
 8009016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009018:	b141      	cbz	r1, 800902c <__swsetup_r+0x4c>
 800901a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800901e:	4299      	cmp	r1, r3
 8009020:	d002      	beq.n	8009028 <__swsetup_r+0x48>
 8009022:	4628      	mov	r0, r5
 8009024:	f7fd fbc2 	bl	80067ac <_free_r>
 8009028:	2300      	movs	r3, #0
 800902a:	6363      	str	r3, [r4, #52]	; 0x34
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	2300      	movs	r3, #0
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f043 0308 	orr.w	r3, r3, #8
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	b94b      	cbnz	r3, 800905c <__swsetup_r+0x7c>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800904e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009052:	d003      	beq.n	800905c <__swsetup_r+0x7c>
 8009054:	4621      	mov	r1, r4
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f884 	bl	8009164 <__smakebuf_r>
 800905c:	89a0      	ldrh	r0, [r4, #12]
 800905e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009062:	f010 0301 	ands.w	r3, r0, #1
 8009066:	d00a      	beq.n	800907e <__swsetup_r+0x9e>
 8009068:	2300      	movs	r3, #0
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	6963      	ldr	r3, [r4, #20]
 800906e:	425b      	negs	r3, r3
 8009070:	61a3      	str	r3, [r4, #24]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	b943      	cbnz	r3, 8009088 <__swsetup_r+0xa8>
 8009076:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800907a:	d1c4      	bne.n	8009006 <__swsetup_r+0x26>
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	0781      	lsls	r1, r0, #30
 8009080:	bf58      	it	pl
 8009082:	6963      	ldrpl	r3, [r4, #20]
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	e7f4      	b.n	8009072 <__swsetup_r+0x92>
 8009088:	2000      	movs	r0, #0
 800908a:	e7f7      	b.n	800907c <__swsetup_r+0x9c>
 800908c:	20000064 	.word	0x20000064

08009090 <_raise_r>:
 8009090:	291f      	cmp	r1, #31
 8009092:	b538      	push	{r3, r4, r5, lr}
 8009094:	4604      	mov	r4, r0
 8009096:	460d      	mov	r5, r1
 8009098:	d904      	bls.n	80090a4 <_raise_r+0x14>
 800909a:	2316      	movs	r3, #22
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090a6:	b112      	cbz	r2, 80090ae <_raise_r+0x1e>
 80090a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090ac:	b94b      	cbnz	r3, 80090c2 <_raise_r+0x32>
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f830 	bl	8009114 <_getpid_r>
 80090b4:	462a      	mov	r2, r5
 80090b6:	4601      	mov	r1, r0
 80090b8:	4620      	mov	r0, r4
 80090ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090be:	f000 b817 	b.w	80090f0 <_kill_r>
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d00a      	beq.n	80090dc <_raise_r+0x4c>
 80090c6:	1c59      	adds	r1, r3, #1
 80090c8:	d103      	bne.n	80090d2 <_raise_r+0x42>
 80090ca:	2316      	movs	r3, #22
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7e7      	b.n	80090a2 <_raise_r+0x12>
 80090d2:	2400      	movs	r4, #0
 80090d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090d8:	4628      	mov	r0, r5
 80090da:	4798      	blx	r3
 80090dc:	2000      	movs	r0, #0
 80090de:	e7e0      	b.n	80090a2 <_raise_r+0x12>

080090e0 <raise>:
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <raise+0xc>)
 80090e2:	4601      	mov	r1, r0
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f7ff bfd3 	b.w	8009090 <_raise_r>
 80090ea:	bf00      	nop
 80090ec:	20000064 	.word	0x20000064

080090f0 <_kill_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d07      	ldr	r5, [pc, #28]	; (8009110 <_kill_r+0x20>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f7f8 f941 	bl	8001384 <_kill>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d102      	bne.n	800910c <_kill_r+0x1c>
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	b103      	cbz	r3, 800910c <_kill_r+0x1c>
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	bd38      	pop	{r3, r4, r5, pc}
 800910e:	bf00      	nop
 8009110:	20000458 	.word	0x20000458

08009114 <_getpid_r>:
 8009114:	f7f8 b92e 	b.w	8001374 <_getpid>

08009118 <__swhatbuf_r>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	460c      	mov	r4, r1
 800911c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009120:	2900      	cmp	r1, #0
 8009122:	b096      	sub	sp, #88	; 0x58
 8009124:	4615      	mov	r5, r2
 8009126:	461e      	mov	r6, r3
 8009128:	da0d      	bge.n	8009146 <__swhatbuf_r+0x2e>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009130:	f04f 0100 	mov.w	r1, #0
 8009134:	bf0c      	ite	eq
 8009136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800913a:	2340      	movne	r3, #64	; 0x40
 800913c:	2000      	movs	r0, #0
 800913e:	6031      	str	r1, [r6, #0]
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	b016      	add	sp, #88	; 0x58
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	466a      	mov	r2, sp
 8009148:	f000 f848 	bl	80091dc <_fstat_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	dbec      	blt.n	800912a <__swhatbuf_r+0x12>
 8009150:	9901      	ldr	r1, [sp, #4]
 8009152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800915a:	4259      	negs	r1, r3
 800915c:	4159      	adcs	r1, r3
 800915e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009162:	e7eb      	b.n	800913c <__swhatbuf_r+0x24>

08009164 <__smakebuf_r>:
 8009164:	898b      	ldrh	r3, [r1, #12]
 8009166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009168:	079d      	lsls	r5, r3, #30
 800916a:	4606      	mov	r6, r0
 800916c:	460c      	mov	r4, r1
 800916e:	d507      	bpl.n	8009180 <__smakebuf_r+0x1c>
 8009170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	2301      	movs	r3, #1
 800917a:	6163      	str	r3, [r4, #20]
 800917c:	b002      	add	sp, #8
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	ab01      	add	r3, sp, #4
 8009182:	466a      	mov	r2, sp
 8009184:	f7ff ffc8 	bl	8009118 <__swhatbuf_r>
 8009188:	9900      	ldr	r1, [sp, #0]
 800918a:	4605      	mov	r5, r0
 800918c:	4630      	mov	r0, r6
 800918e:	f7fd fb81 	bl	8006894 <_malloc_r>
 8009192:	b948      	cbnz	r0, 80091a8 <__smakebuf_r+0x44>
 8009194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009198:	059a      	lsls	r2, r3, #22
 800919a:	d4ef      	bmi.n	800917c <__smakebuf_r+0x18>
 800919c:	f023 0303 	bic.w	r3, r3, #3
 80091a0:	f043 0302 	orr.w	r3, r3, #2
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	e7e3      	b.n	8009170 <__smakebuf_r+0xc>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	6020      	str	r0, [r4, #0]
 80091ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	9b00      	ldr	r3, [sp, #0]
 80091b4:	6163      	str	r3, [r4, #20]
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	6120      	str	r0, [r4, #16]
 80091ba:	b15b      	cbz	r3, 80091d4 <__smakebuf_r+0x70>
 80091bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f81d 	bl	8009200 <_isatty_r>
 80091c6:	b128      	cbz	r0, 80091d4 <__smakebuf_r+0x70>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	431d      	orrs	r5, r3
 80091d8:	81a5      	strh	r5, [r4, #12]
 80091da:	e7cf      	b.n	800917c <__smakebuf_r+0x18>

080091dc <_fstat_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	; (80091fc <_fstat_r+0x20>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	f7f8 f92a 	bl	8001442 <_fstat>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d102      	bne.n	80091f8 <_fstat_r+0x1c>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	b103      	cbz	r3, 80091f8 <_fstat_r+0x1c>
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	20000458 	.word	0x20000458

08009200 <_isatty_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	; (800921c <_isatty_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f8 f929 	bl	8001462 <_isatty>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_isatty_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_isatty_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000458 	.word	0x20000458

08009220 <_init>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr

0800922c <_fini>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr
