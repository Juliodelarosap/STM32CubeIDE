
parcial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b20  08004b20  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b20  08004b20  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b20  08004b20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000010  08004b38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004b38  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e12  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266a  00000000  00000000  00032e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000354c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d16c  00000000  00000000  000373d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a3a  00000000  00000000  00054544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adf6b  00000000  00000000  00067f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  00115f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad0 	.word	0x08004ad0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004ad0 	.word	0x08004ad0

080001c8 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	b29b      	uxth	r3, r3
 80001e2:	4413      	add	r3, r2
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	797b      	ldrb	r3, [r7, #5]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4413      	add	r3, r2
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	f203 1305 	addw	r3, r3, #261	; 0x105
 80001f2:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 80001f4:	8afb      	ldrh	r3, [r7, #22]
 80001f6:	425b      	negs	r3, r3
 80001f8:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80001fa:	237e      	movs	r3, #126	; 0x7e
 80001fc:	733b      	strb	r3, [r7, #12]
 80001fe:	23ff      	movs	r3, #255	; 0xff
 8000200:	737b      	strb	r3, [r7, #13]
 8000202:	2306      	movs	r3, #6
 8000204:	73bb      	strb	r3, [r7, #14]
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	2300      	movs	r3, #0
 800020c:	743b      	strb	r3, [r7, #16]
 800020e:	79bb      	ldrb	r3, [r7, #6]
 8000210:	747b      	strb	r3, [r7, #17]
 8000212:	797b      	ldrb	r3, [r7, #5]
 8000214:	74bb      	strb	r3, [r7, #18]
 8000216:	8afb      	ldrh	r3, [r7, #22]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	b29b      	uxth	r3, r3
 800021c:	b2db      	uxtb	r3, r3
 800021e:	74fb      	strb	r3, [r7, #19]
 8000220:	8afb      	ldrh	r3, [r7, #22]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	753b      	strb	r3, [r7, #20]
 8000226:	23ef      	movs	r3, #239	; 0xef
 8000228:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800022a:	f107 010c 	add.w	r1, r7, #12
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	220a      	movs	r2, #10
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <Send_cmd+0x7c>)
 8000236:	f004 f849 	bl	80042cc <HAL_UART_Transmit>
}
 800023a:	bf00      	nop
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000168 	.word	0x20000168

08000248 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 800024c:	2201      	movs	r2, #1
 800024e:	2100      	movs	r1, #0
 8000250:	2003      	movs	r0, #3
 8000252:	f7ff ffb9 	bl	80001c8 <Send_cmd>
  HAL_Delay(200);
 8000256:	20c8      	movs	r0, #200	; 0xc8
 8000258:	f000 fd42 	bl	8000ce0 <HAL_Delay>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <DF_Init>:


void DF_Init (uint8_t volume)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 800026a:	2202      	movs	r2, #2
 800026c:	2100      	movs	r1, #0
 800026e:	203f      	movs	r0, #63	; 0x3f
 8000270:	f7ff ffaa 	bl	80001c8 <Send_cmd>
	HAL_Delay(200);
 8000274:	20c8      	movs	r0, #200	; 0xc8
 8000276:	f000 fd33 	bl	8000ce0 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	461a      	mov	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	2006      	movs	r0, #6
 8000282:	f7ff ffa1 	bl	80001c8 <Send_cmd>
	HAL_Delay(500);
 8000286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028a:	f000 fd29 	bl	8000ce0 <HAL_Delay>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2100      	movs	r1, #0
 800029e:	200e      	movs	r0, #14
 80002a0:	f7ff ff92 	bl	80001c8 <Send_cmd>
	HAL_Delay(200);
 80002a4:	20c8      	movs	r0, #200	; 0xc8
 80002a6:	f000 fd1b 	bl	8000ce0 <HAL_Delay>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}

080002ae <DF_Playback>:
	Send_cmd(0x02, 0, 0);
	HAL_Delay(200);
}

void DF_Playback (void)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2100      	movs	r1, #0
 80002b6:	200d      	movs	r0, #13
 80002b8:	f7ff ff86 	bl	80001c8 <Send_cmd>
	HAL_Delay(200);
 80002bc:	20c8      	movs	r0, #200	; 0xc8
 80002be:	f000 fd0f 	bl	8000ce0 <HAL_Delay>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <Check_Key>:

void Check_Key (void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 80002cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <Check_Key+0x5c>)
 80002d2:	f002 f89b 	bl	800240c <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d021      	beq.n	8000320 <Check_Key+0x58>
	{
		while (HAL_GPIO_ReadPin(Pause_Port, Pause_Key));
 80002dc:	bf00      	nop
 80002de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e2:	4810      	ldr	r0, [pc, #64]	; (8000324 <Check_Key+0x5c>)
 80002e4:	f002 f892 	bl	800240c <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f7      	bne.n	80002de <Check_Key+0x16>
		if (isplaying)
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <Check_Key+0x60>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d008      	beq.n	8000308 <Check_Key+0x40>
		{
			ispause = 1;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <Check_Key+0x64>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	601a      	str	r2, [r3, #0]
			isplaying = 0;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <Check_Key+0x60>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
			DF_Pause();
 8000302:	f7ff ffc8 	bl	8000296 <DF_Pause>
			isplaying = 1;
			ispause = 0;
			DF_Playback();
		}
	}
}
 8000306:	e00b      	b.n	8000320 <Check_Key+0x58>
		else if (ispause)
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <Check_Key+0x64>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d007      	beq.n	8000320 <Check_Key+0x58>
			isplaying = 1;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <Check_Key+0x60>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
			ispause = 0;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <Check_Key+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
			DF_Playback();
 800031c:	f7ff ffc7 	bl	80002ae <DF_Playback>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	48000800 	.word	0x48000800
 8000328:	20000000 	.word	0x20000000
 800032c:	2000002c 	.word	0x2000002c

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000336:	f000 fc6d 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033a:	f000 f82f 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033e:	f000 f9e3 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 8000342:	f000 f9bb 	bl	80006bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000346:	f000 f989 	bl	800065c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800034a:	f000 f957 	bl	80005fc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800034e:	f000 f883 	bl	8000458 <MX_ADC1_Init>
  MX_DAC_Init();
 8000352:	f000 f8dd 	bl	8000510 <MX_DAC_Init>
  MX_TIM2_Init();
 8000356:	f000 f905 	bl	8000564 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  DF_Init(10);
 800035a:	200a      	movs	r0, #10
 800035c:	f7ff ff80 	bl	8000260 <DF_Init>
  DF_PlayFromStart();
 8000360:	f7ff ff72 	bl	8000248 <DF_PlayFromStart>
  HAL_ADC_Start_DMA(&hadc1, &ENTRADA, 1);
 8000364:	2201      	movs	r2, #1
 8000366:	4909      	ldr	r1, [pc, #36]	; (800038c <main+0x5c>)
 8000368:	4809      	ldr	r0, [pc, #36]	; (8000390 <main+0x60>)
 800036a:	f000 fe81 	bl	8001070 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,&ENTRADA,1,DAC_ALIGN_12B_R);
 800036e:	2300      	movs	r3, #0
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2301      	movs	r3, #1
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <main+0x5c>)
 8000376:	2100      	movs	r1, #0
 8000378:	4806      	ldr	r0, [pc, #24]	; (8000394 <main+0x64>)
 800037a:	f001 fc4d 	bl	8001c18 <HAL_DAC_Start_DMA>
     HAL_TIM_Base_Start(&htim2);
 800037e:	4806      	ldr	r0, [pc, #24]	; (8000398 <main+0x68>)
 8000380:	f003 fcd2 	bl	8003d28 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Check_Key();
 8000384:	f7ff ffa0 	bl	80002c8 <Check_Key>
 8000388:	e7fc      	b.n	8000384 <main+0x54>
 800038a:	bf00      	nop
 800038c:	20000278 	.word	0x20000278
 8000390:	20000030 	.word	0x20000030
 8000394:	200000c4 	.word	0x200000c4
 8000398:	2000011c 	.word	0x2000011c

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	; 0x70
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 fb88 	bl	8004ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	463b      	mov	r3, r7
 80003c2:	2234      	movs	r2, #52	; 0x34
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 fb7a 	bl	8004ac0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003cc:	2301      	movs	r3, #1
 80003ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	2301      	movs	r3, #1
 80003dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003de:	2302      	movs	r3, #2
 80003e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 f83a 	bl	800246c <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fe:	f000 f9f9 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000406:	2302      	movs	r3, #2
 8000408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f003 f862 	bl	80034e8 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800042a:	f000 f9e3 	bl	80007f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 800042e:	2381      	movs	r3, #129	; 0x81
 8000430:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4618      	mov	r0, r3
 8000440:	f003 fa88 	bl	8003954 <HAL_RCCEx_PeriphCLKConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800044a:	f000 f9d3 	bl	80007f4 <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3770      	adds	r7, #112	; 0x70
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045e:	463b      	mov	r3, r7
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
 800046c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800046e:	4b27      	ldr	r3, [pc, #156]	; (800050c <MX_ADC1_Init+0xb4>)
 8000470:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000476:	4b25      	ldr	r3, [pc, #148]	; (800050c <MX_ADC1_Init+0xb4>)
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <MX_ADC1_Init+0xb4>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_ADC1_Init+0xb4>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000488:	4b20      	ldr	r3, [pc, #128]	; (800050c <MX_ADC1_Init+0xb4>)
 800048a:	2201      	movs	r2, #1
 800048c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <MX_ADC1_Init+0xb4>)
 8000490:	2200      	movs	r2, #0
 8000492:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000496:	4b1d      	ldr	r3, [pc, #116]	; (800050c <MX_ADC1_Init+0xb4>)
 8000498:	2200      	movs	r2, #0
 800049a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_ADC1_Init+0xb4>)
 800049e:	2201      	movs	r2, #1
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_ADC1_Init+0xb4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_ADC1_Init+0xb4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_ADC1_Init+0xb4>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_ADC1_Init+0xb4>)
 80004b8:	2204      	movs	r2, #4
 80004ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_ADC1_Init+0xb4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_ADC1_Init+0xb4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004c8:	4810      	ldr	r0, [pc, #64]	; (800050c <MX_ADC1_Init+0xb4>)
 80004ca:	f000 fc4b 	bl	8000d64 <HAL_ADC_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80004d4:	f000 f98e 	bl	80007f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004d8:	2301      	movs	r3, #1
 80004da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004dc:	2301      	movs	r3, #1
 80004de:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004e4:	2307      	movs	r3, #7
 80004e6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f0:	463b      	mov	r3, r7
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_ADC1_Init+0xb4>)
 80004f6:	f000 fe57 	bl	80011a8 <HAL_ADC_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000500:	f000 f978 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000030 	.word	0x20000030

08000510 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_DAC_Init+0x4c>)
 8000522:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <MX_DAC_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000526:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_DAC_Init+0x4c>)
 8000528:	f001 fb35 	bl	8001b96 <HAL_DAC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000532:	f000 f95f 	bl	80007f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000536:	2324      	movs	r3, #36	; 0x24
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_DAC_Init+0x4c>)
 8000546:	f001 fbd5 	bl	8001cf4 <HAL_DAC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000550:	f000 f950 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200000c4 	.word	0x200000c4
 8000560:	40007400 	.word	0x40007400

08000564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <MX_TIM2_Init+0x94>)
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800058a:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_TIM2_Init+0x94>)
 800058c:	2247      	movs	r2, #71	; 0x47
 800058e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_TIM2_Init+0x94>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_TIM2_Init+0x94>)
 8000598:	2263      	movs	r2, #99	; 0x63
 800059a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <MX_TIM2_Init+0x94>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_TIM2_Init+0x94>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <MX_TIM2_Init+0x94>)
 80005aa:	f003 fb65 	bl	8003c78 <HAL_TIM_Base_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005b4:	f000 f91e 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MX_TIM2_Init+0x94>)
 80005c6:	f003 fbfb 	bl	8003dc0 <HAL_TIM_ConfigClockSource>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005d0:	f000 f910 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005d4:	2320      	movs	r3, #32
 80005d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_TIM2_Init+0x94>)
 80005e2:	f003 fdbf 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005ec:	f000 f902 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000011c 	.word	0x2000011c

080005fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <MX_USART1_UART_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800060c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART1_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART1_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART1_UART_Init+0x58>)
 8000640:	f003 fdf6 	bl	8004230 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f8d3 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000168 	.word	0x20000168
 8000658:	40013800 	.word	0x40013800

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART2_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000668:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 80006a0:	f003 fdc6 	bl	8004230 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 f8a3 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001f0 	.word	0x200001f0
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_DMA_Init+0x48>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_DMA_Init+0x48>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DMA_Init+0x48>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f001 fa23 	bl	8001b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 fa3c 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	200d      	movs	r0, #13
 80006f0:	f001 fa1b 	bl	8001b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006f4:	200d      	movs	r0, #13
 80006f6:	f001 fa34 	bl	8001b62 <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_GPIO_Init+0xe0>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <MX_GPIO_Init+0xe0>)
 800073c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xe0>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xe0>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xe0>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	4819      	ldr	r0, [pc, #100]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000786:	f001 fe59 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_GPIO_Init+0xe8>)
 80007a0:	f001 fcc2 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0xe4>)
 80007be:	f001 fcb3 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80007c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 fca5 	bl	8002128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000400 	.word	0x48000400
 80007f0:	48000800 	.word	0x48000800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000836:	2007      	movs	r0, #7
 8000838:	f001 f96c 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000868:	d14c      	bne.n	8000904 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <HAL_ADC_MspInit+0xc4>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <HAL_ADC_MspInit+0xc4>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <HAL_ADC_MspInit+0xc4>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <HAL_ADC_MspInit+0xc4>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a21      	ldr	r2, [pc, #132]	; (800090c <HAL_ADC_MspInit+0xc4>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <HAL_ADC_MspInit+0xc4>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089a:	2301      	movs	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f001 fc3a 	bl	8002128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_ADC_MspInit+0xcc>)
 80008b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008de:	2220      	movs	r2, #32
 80008e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008ea:	f001 fa86 	bl	8001dfa <HAL_DMA_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80008f4:	f7ff ff7e 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_ADC_MspInit+0xc8>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	20000080 	.word	0x20000080
 8000914:	40020008 	.word	0x40020008

08000918 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a2c      	ldr	r2, [pc, #176]	; (80009e8 <HAL_DAC_MspInit+0xd0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d152      	bne.n	80009e0 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <HAL_DAC_MspInit+0xd4>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <HAL_DAC_MspInit+0xd4>)
 8000940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <HAL_DAC_MspInit+0xd4>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_DAC_MspInit+0xd4>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a25      	ldr	r2, [pc, #148]	; (80009ec <HAL_DAC_MspInit+0xd4>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_DAC_MspInit+0xd4>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800096a:	2310      	movs	r3, #16
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096e:	2303      	movs	r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f001 fbd2 	bl	8002128 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <HAL_DAC_MspInit+0xdc>)
 8000988:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 800098c:	2210      	movs	r2, #16
 800098e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 800099e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 80009a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 80009ae:	2220      	movs	r2, #32
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 80009ba:	f001 fa1e 	bl	8001dfa <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80009c4:	f7ff ff16 	bl	80007f4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_DAC_MspInit+0xe0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_DAC_MspInit+0xe0>)
 80009ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <HAL_DAC_MspInit+0xd8>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40007400 	.word	0x40007400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	200000d8 	.word	0x200000d8
 80009f4:	40020030 	.word	0x40020030
 80009f8:	40010000 	.word	0x40010000

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0c:	d10b      	bne.n	8000a26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <HAL_UART_MspInit+0xd8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d128      	bne.n	8000aac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a8a:	2330      	movs	r3, #48	; 0x30
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481c      	ldr	r0, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0xe0>)
 8000aa6:	f001 fb3f 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aaa:	e02d      	b.n	8000b08 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_UART_MspInit+0xe4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d128      	bne.n	8000b08 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_UART_MspInit+0xdc>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af6:	2307      	movs	r3, #7
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f001 fb10 	bl	8002128 <HAL_GPIO_Init>
}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	40004400 	.word	0x40004400

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f898 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <DMA1_Channel1_IRQHandler+0x10>)
 8000b7a:	f001 f9e4 	bl	8001f46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000080 	.word	0x20000080

08000b88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <DMA1_Channel3_IRQHandler+0x10>)
 8000b8e:	f001 f9da 	bl	8001f46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000d8 	.word	0x200000d8

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 ff43 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fb9d 	bl	8000330 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c04:	08004b28 	.word	0x08004b28
  ldr r2, =_sbss
 8000c08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c0c:	20000280 	.word	0x20000280

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_Init+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_Init+0x28>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 ff75 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fde6 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 ff8d 	bl	8001b7e <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 ff55 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000004 	.word	0x20000004
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	2000027c 	.word	0x2000027c

08000cc8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000027c 	.word	0x2000027c

08000ce0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000000c 	.word	0x2000000c

08000d28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09a      	sub	sp, #104	; 0x68
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e169      	b.n	8001058 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d176      	bne.n	8000e84 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d152      	bne.n	8000e44 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fd45 	bl	8000848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d13b      	bne.n	8000e44 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 fd6b 	bl	80018a8 <ADC_Disable>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d12f      	bne.n	8000e44 <HAL_ADC_Init+0xe0>
 8000de4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d12b      	bne.n	8000e44 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df4:	f023 0302 	bic.w	r3, r3, #2
 8000df8:	f043 0202 	orr.w	r2, r3, #2
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e0e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e20:	4b8f      	ldr	r3, [pc, #572]	; (8001060 <HAL_ADC_Init+0x2fc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a8f      	ldr	r2, [pc, #572]	; (8001064 <HAL_ADC_Init+0x300>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9a      	lsrs	r2, r3, #18
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e36:	e002      	b.n	8000e3e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f9      	bne.n	8000e38 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e60:	d110      	bne.n	8000e84 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f023 0312 	bic.w	r3, r3, #18
 8000e6a:	f043 0210 	orr.w	r2, r3, #16
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 80d6 	bne.w	800103e <HAL_ADC_Init+0x2da>
 8000e92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 80d1 	bne.w	800103e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80c9 	bne.w	800103e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000eb4:	f043 0202 	orr.w	r2, r3, #2
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ebc:	4b6a      	ldr	r3, [pc, #424]	; (8001068 <HAL_ADC_Init+0x304>)
 8000ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d108      	bne.n	8000ee4 <HAL_ADC_Init+0x180>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_ADC_Init+0x180>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <HAL_ADC_Init+0x182>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11c      	bne.n	8000f24 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000eea:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d010      	beq.n	8000f12 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d107      	bne.n	8000f0c <HAL_ADC_Init+0x1a8>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_ADC_Init+0x1a8>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_ADC_Init+0x1aa>
 8000f0c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f22:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7e5b      	ldrb	r3, [r3, #25]
 8000f28:	035b      	lsls	r3, r3, #13
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f2e:	2a01      	cmp	r2, #1
 8000f30:	d002      	beq.n	8000f38 <HAL_ADC_Init+0x1d4>
 8000f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f36:	e000      	b.n	8000f3a <HAL_ADC_Init+0x1d6>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d11b      	bne.n	8000f90 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7e5b      	ldrb	r3, [r3, #25]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	3b01      	subs	r3, #1
 8000f66:	045a      	lsls	r2, r3, #17
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f70:	663b      	str	r3, [r7, #96]	; 0x60
 8000f72:	e00d      	b.n	8000f90 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f7c:	f043 0220 	orr.w	r2, r3, #32
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d007      	beq.n	8000fa8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d114      	bne.n	8000fe0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fc4:	f023 0302 	bic.w	r3, r3, #2
 8000fc8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7e1b      	ldrb	r3, [r3, #24]
 8000fce:	039a      	lsls	r2, r3, #14
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_ADC_Init+0x308>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10c      	bne.n	8001016 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f023 010f 	bic.w	r1, r3, #15
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
 8001014:	e007      	b.n	8001026 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 020f 	bic.w	r2, r2, #15
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f023 0303 	bic.w	r3, r3, #3
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
 800103c:	e00a      	b.n	8001054 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f023 0312 	bic.w	r3, r3, #18
 8001046:	f043 0210 	orr.w	r2, r3, #16
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800104e:	2301      	movs	r3, #1
 8001050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001054:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001058:	4618      	mov	r0, r3
 800105a:	3768      	adds	r7, #104	; 0x68
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000004 	.word	0x20000004
 8001064:	431bde83 	.word	0x431bde83
 8001068:	50000300 	.word	0x50000300
 800106c:	fff0c007 	.word	0xfff0c007

08001070 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b00      	cmp	r3, #0
 800108c:	d17e      	bne.n	800118c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_ADC_Start_DMA+0x2c>
 8001098:	2302      	movs	r3, #2
 800109a:	e07a      	b.n	8001192 <HAL_ADC_Start_DMA+0x122>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 fb9b 	bl	80017e0 <ADC_Enable>
 80010aa:	4603      	mov	r3, r0
 80010ac:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d166      	bne.n	8001182 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010fe:	d106      	bne.n	800110e <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	f023 0206 	bic.w	r2, r3, #6
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	645a      	str	r2, [r3, #68]	; 0x44
 800110c:	e002      	b.n	8001114 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_ADC_Start_DMA+0x12c>)
 8001122:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_ADC_Start_DMA+0x130>)
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001130:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_ADC_Start_DMA+0x134>)
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	221c      	movs	r2, #28
 800113a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0210 	orr.w	r2, r2, #16
 800114a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3340      	adds	r3, #64	; 0x40
 8001166:	4619      	mov	r1, r3
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f000 fe8c 	bl	8001e88 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	e006      	b.n	8001190 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800118a:	e001      	b.n	8001190 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800118c:	2302      	movs	r3, #2
 800118e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001190:	7dfb      	ldrb	r3, [r7, #23]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08001715 	.word	0x08001715
 80011a0:	0800178f 	.word	0x0800178f
 80011a4:	080017ab 	.word	0x080017ab

080011a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b09b      	sub	sp, #108	; 0x6c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x22>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e299      	b.n	80016fe <HAL_ADC_ConfigChannel+0x556>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 827d 	bne.w	80016dc <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d81c      	bhi.n	8001224 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	461a      	mov	r2, r3
 80011fe:	231f      	movs	r3, #31
 8001200:	4093      	lsls	r3, r2
 8001202:	43db      	mvns	r3, r3
 8001204:	4019      	ands	r1, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa00 f203 	lsl.w	r2, r0, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	e063      	b.n	80012ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d81e      	bhi.n	800126a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	3b1e      	subs	r3, #30
 8001240:	221f      	movs	r2, #31
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	4019      	ands	r1, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	3b1e      	subs	r3, #30
 800125c:	fa00 f203 	lsl.w	r2, r0, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	635a      	str	r2, [r3, #52]	; 0x34
 8001268:	e040      	b.n	80012ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b0e      	cmp	r3, #14
 8001270:	d81e      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	3b3c      	subs	r3, #60	; 0x3c
 8001286:	221f      	movs	r2, #31
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	4019      	ands	r1, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	3b3c      	subs	r3, #60	; 0x3c
 80012a2:	fa00 f203 	lsl.w	r2, r0, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
 80012ae:	e01d      	b.n	80012ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3b5a      	subs	r3, #90	; 0x5a
 80012c4:	221f      	movs	r2, #31
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4019      	ands	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	3b5a      	subs	r3, #90	; 0x5a
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80e5 	bne.w	80014c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b09      	cmp	r3, #9
 8001302:	d91c      	bls.n	800133e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6999      	ldr	r1, [r3, #24]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	3b1e      	subs	r3, #30
 8001316:	2207      	movs	r2, #7
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	4019      	ands	r1, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6898      	ldr	r0, [r3, #8]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	3b1e      	subs	r3, #30
 8001330:	fa00 f203 	lsl.w	r2, r0, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	619a      	str	r2, [r3, #24]
 800133c:	e019      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6959      	ldr	r1, [r3, #20]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	2207      	movs	r2, #7
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	4019      	ands	r1, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	6898      	ldr	r0, [r3, #8]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	3b01      	subs	r3, #1
 8001390:	2b03      	cmp	r3, #3
 8001392:	d84f      	bhi.n	8001434 <HAL_ADC_ConfigChannel+0x28c>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <HAL_ADC_ConfigChannel+0x1f4>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013cf 	.word	0x080013cf
 80013a4:	080013f1 	.word	0x080013f1
 80013a8:	08001413 	.word	0x08001413
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b2:	4b99      	ldr	r3, [pc, #612]	; (8001618 <HAL_ADC_ConfigChannel+0x470>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	0691      	lsls	r1, r2, #26
 80013bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013be:	430a      	orrs	r2, r1
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013cc:	e07e      	b.n	80014cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013d4:	4b90      	ldr	r3, [pc, #576]	; (8001618 <HAL_ADC_ConfigChannel+0x470>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	0691      	lsls	r1, r2, #26
 80013de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013e0:	430a      	orrs	r2, r1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013ee:	e06d      	b.n	80014cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013f6:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_ADC_ConfigChannel+0x470>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	0691      	lsls	r1, r2, #26
 8001400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001402:	430a      	orrs	r2, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800140e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001410:	e05c      	b.n	80014cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001418:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <HAL_ADC_ConfigChannel+0x470>)
 800141a:	4013      	ands	r3, r2
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	0691      	lsls	r1, r2, #26
 8001422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001424:	430a      	orrs	r2, r1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001430:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001432:	e04b      	b.n	80014cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	069b      	lsls	r3, r3, #26
 8001444:	429a      	cmp	r2, r3
 8001446:	d107      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001456:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800145e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	069b      	lsls	r3, r3, #26
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800147a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	069b      	lsls	r3, r3, #26
 800148c:	429a      	cmp	r2, r3
 800148e:	d107      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800149e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	069b      	lsls	r3, r3, #26
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d10a      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80014c4:	e001      	b.n	80014ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80014c6:	bf00      	nop
 80014c8:	e000      	b.n	80014cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80014ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x344>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x344>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_ADC_ConfigChannel+0x346>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 80ff 	bne.w	80016f2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d00f      	beq.n	800151c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	400a      	ands	r2, r1
 8001516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800151a:	e049      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	409a      	lsls	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b09      	cmp	r3, #9
 800153c:	d91c      	bls.n	8001578 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6999      	ldr	r1, [r3, #24]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	3b1b      	subs	r3, #27
 8001550:	2207      	movs	r2, #7
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	4019      	ands	r1, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6898      	ldr	r0, [r3, #8]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	3b1b      	subs	r3, #27
 800156a:	fa00 f203 	lsl.w	r2, r0, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	e01b      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6959      	ldr	r1, [r3, #20]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	4019      	ands	r1, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	fa00 f203 	lsl.w	r2, r0, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_ADC_ConfigChannel+0x474>)
 80015b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	d105      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d014      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015cc:	2b11      	cmp	r3, #17
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	f040 8086 	bne.w	80016f2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17f      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10d      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x478>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d106      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x478>
 8001612:	2301      	movs	r3, #1
 8001614:	e005      	b.n	8001622 <HAL_ADC_ConfigChannel+0x47a>
 8001616:	bf00      	nop
 8001618:	83fff000 	.word	0x83fff000
 800161c:	50000300 	.word	0x50000300
 8001620:	2300      	movs	r3, #0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d150      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001626:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001628:	2b00      	cmp	r3, #0
 800162a:	d010      	beq.n	800164e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x4a0>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x4a0>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_ADC_ConfigChannel+0x4a2>
 8001648:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13c      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d11d      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x4ea>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165e:	d118      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_ADC_ConfigChannel+0x564>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <HAL_ADC_ConfigChannel+0x568>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9a      	lsrs	r2, r3, #18
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001682:	e002      	b.n	800168a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3b01      	subs	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f9      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001690:	e02e      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b11      	cmp	r3, #17
 8001698:	d10b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x50a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a2:	d106      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80016ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016b0:	e01e      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d11a      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80016ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016c6:	e013      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f043 0220 	orr.w	r2, r3, #32
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016da:	e00a      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f043 0220 	orr.w	r2, r3, #32
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016ee:	e000      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016fe:	4618      	mov	r0, r3
 8001700:	376c      	adds	r7, #108	; 0x6c
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000004 	.word	0x20000004
 8001710:	431bde83 	.word	0x431bde83

08001714 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800172a:	2b00      	cmp	r3, #0
 800172c:	d126      	bne.n	800177c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001744:	2b00      	cmp	r3, #0
 8001746:	d115      	bne.n	8001774 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800174c:	2b00      	cmp	r3, #0
 800174e:	d111      	bne.n	8001774 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fad7 	bl	8000d28 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800177a:	e004      	b.n	8001786 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff facd 	bl	8000d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f043 0204 	orr.w	r2, r3, #4
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fabd 	bl	8000d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d108      	bne.n	800180c <ADC_Enable+0x2c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <ADC_Enable+0x2c>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <ADC_Enable+0x2e>
 800180c:	2300      	movs	r3, #0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d143      	bne.n	800189a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <ADC_Enable+0xc4>)
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e02f      	b.n	800189c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800184c:	f7ff fa3c 	bl	8000cc8 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001852:	e01b      	b.n	800188c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001854:	f7ff fa38 	bl	8000cc8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d914      	bls.n	800188c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d00d      	beq.n	800188c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f043 0210 	orr.w	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e007      	b.n	800189c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b01      	cmp	r3, #1
 8001898:	d1dc      	bne.n	8001854 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	8000003f 	.word	0x8000003f

080018a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <ADC_Disable+0x2c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <ADC_Disable+0x2c>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <ADC_Disable+0x2e>
 80018d4:	2300      	movs	r3, #0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d047      	beq.n	800196a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030d 	and.w	r3, r3, #13
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10f      	bne.n	8001908 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0202 	orr.w	r2, r2, #2
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2203      	movs	r2, #3
 80018fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001900:	f7ff f9e2 	bl	8000cc8 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	e029      	b.n	800195c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0210 	orr.w	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e023      	b.n	800196c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001924:	f7ff f9d0 	bl	8000cc8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d914      	bls.n	800195c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10d      	bne.n	800195c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d0dc      	beq.n	8001924 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff29 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff3e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff31 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e014      	b.n	8001bd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7fe fead 	bl	8000918 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_DAC_Start_DMA+0x1e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e053      	b.n	8001cde <HAL_DAC_Start_DMA+0xc6>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_DAC_Start_DMA+0xd0>)
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_DAC_Start_DMA+0xd4>)
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_DAC_Start_DMA+0xd8>)
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c68:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d013      	beq.n	8001c98 <HAL_DAC_Start_DMA+0x80>
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d815      	bhi.n	8001ca2 <HAL_DAC_Start_DMA+0x8a>
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DAC_Start_DMA+0x6c>
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d005      	beq.n	8001c8e <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8001c82:	e00e      	b.n	8001ca2 <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3308      	adds	r3, #8
 8001c8a:	617b      	str	r3, [r7, #20]
      break;
 8001c8c:	e00a      	b.n	8001ca4 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	330c      	adds	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	e005      	b.n	8001ca4 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	617b      	str	r3, [r7, #20]
      break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_DAC_Start_DMA+0x8c>
      break;
 8001ca2:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6898      	ldr	r0, [r3, #8]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	f000 f8e3 	bl	8001e88 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08001d8f 	.word	0x08001d8f
 8001cec:	08001db1 	.word	0x08001db1
 8001cf0:	08001dcd 	.word	0x08001dcd

08001cf4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	795b      	ldrb	r3, [r3, #5]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_DAC_ConfigChannel+0x20>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e036      	b.n	8001d82 <HAL_DAC_ConfigChannel+0x8e>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4013      	ands	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	22c0      	movs	r2, #192	; 0xc0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	400a      	ands	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff ff1c 	bl	8001bda <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	711a      	strb	r2, [r3, #4]
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff ff15 	bl	8001bee <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff ff0b 	bl	8001c02 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	711a      	strb	r2, [r3, #4]
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e037      	b.n	8001e80 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f940 	bl	80020e8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}  
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Start_IT+0x20>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e04a      	b.n	8001f3e <HAL_DMA_Start_IT+0xb6>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d13a      	bne.n	8001f30 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f8d4 	bl	800208c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 020e 	orr.w	r2, r2, #14
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e00f      	b.n	8001f1e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 020a 	orr.w	r2, r2, #10
 8001f0c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e005      	b.n	8001f3c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2204      	movs	r2, #4
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d024      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x72>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01f      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0204 	bic.w	r2, r2, #4
 8001f94:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fb6:	e065      	b.n	8002084 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02c      	beq.n	8002022 <HAL_DMA_IRQHandler+0xdc>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d027      	beq.n	8002022 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 020a 	bic.w	r2, r2, #10
 8001fee:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	2102      	movs	r1, #2
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d035      	beq.n	8002084 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002020:	e030      	b.n	8002084 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2208      	movs	r2, #8
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d028      	beq.n	8002084 <HAL_DMA_IRQHandler+0x13e>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d023      	beq.n	8002084 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 020e 	bic.w	r2, r2, #14
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
    }
  }
}  
 8002082:	e7ff      	b.n	8002084 <HAL_DMA_IRQHandler+0x13e>
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d108      	bne.n	80020cc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ca:	e007      	b.n	80020dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <DMA_CalcBaseAndBitshift+0x34>)
 80020f8:	4413      	add	r3, r2
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <DMA_CalcBaseAndBitshift+0x38>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a06      	ldr	r2, [pc, #24]	; (8002124 <DMA_CalcBaseAndBitshift+0x3c>)
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	bffdfff8 	.word	0xbffdfff8
 8002120:	cccccccd 	.word	0xcccccccd
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e14e      	b.n	80023d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8140 	beq.w	80023d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_GPIO_Init+0x40>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d130      	bne.n	80021ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219e:	2201      	movs	r2, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d017      	beq.n	8002206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d123      	bne.n	800225a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 809a 	beq.w	80023d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229c:	4b55      	ldr	r3, [pc, #340]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a54      	ldr	r2, [pc, #336]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022de:	d013      	beq.n	8002308 <HAL_GPIO_Init+0x1e0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a46      	ldr	r2, [pc, #280]	; (80023fc <HAL_GPIO_Init+0x2d4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00d      	beq.n	8002304 <HAL_GPIO_Init+0x1dc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a45      	ldr	r2, [pc, #276]	; (8002400 <HAL_GPIO_Init+0x2d8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <HAL_GPIO_Init+0x1d8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a44      	ldr	r2, [pc, #272]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_GPIO_Init+0x1d4>
 80022f8:	2303      	movs	r3, #3
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x1e2>
 80022fc:	2305      	movs	r3, #5
 80022fe:	e004      	b.n	800230a <HAL_GPIO_Init+0x1e2>
 8002300:	2302      	movs	r3, #2
 8002302:	e002      	b.n	800230a <HAL_GPIO_Init+0x1e2>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_GPIO_Init+0x1e2>
 8002308:	2300      	movs	r3, #0
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	f002 0203 	and.w	r2, r2, #3
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	4093      	lsls	r3, r2
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800231a:	4937      	ldr	r1, [pc, #220]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002328:	4b37      	ldr	r3, [pc, #220]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800234c:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002376:	4a24      	ldr	r2, [pc, #144]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_GPIO_Init+0x2e0>)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f aea9 	bne.w	8002138 <HAL_GPIO_Init+0x10>
  }
}
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	48000400 	.word	0x48000400
 8002400:	48000800 	.word	0x48000800
 8002404:	48000c00 	.word	0x48000c00
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e001      	b.n	800242e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002458:	e002      	b.n	8002460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002472:	af00      	add	r7, sp, #0
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f001 b823 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 817d 	beq.w	80027a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024a8:	4bbc      	ldr	r3, [pc, #752]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d00c      	beq.n	80024ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b4:	4bb9      	ldr	r3, [pc, #740]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d15c      	bne.n	800257a <HAL_RCC_OscConfig+0x10e>
 80024c0:	4bb6      	ldr	r3, [pc, #728]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d155      	bne.n	800257a <HAL_RCC_OscConfig+0x10e>
 80024ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x94>
 80024fa:	4ba8      	ldr	r3, [pc, #672]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0xc0>
 8002500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002504:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002518:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800251c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002528:	4b9c      	ldr	r3, [pc, #624]	; (800279c <HAL_RCC_OscConfig+0x330>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002530:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002534:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002540:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002544:	fab2 f282 	clz	r2, r2
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f042 0220 	orr.w	r2, r2, #32
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f002 021f 	and.w	r2, r2, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f202 	lsl.w	r2, r1, r2
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 811f 	beq.w	80027a0 <HAL_RCC_OscConfig+0x334>
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 8116 	bne.w	80027a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f000 bfaf 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x12e>
 800258c:	4b83      	ldr	r3, [pc, #524]	; (800279c <HAL_RCC_OscConfig+0x330>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a82      	ldr	r2, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e036      	b.n	8002608 <HAL_RCC_OscConfig+0x19c>
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x158>
 80025aa:	4b7c      	ldr	r3, [pc, #496]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7b      	ldr	r2, [pc, #492]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b79      	ldr	r3, [pc, #484]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a78      	ldr	r2, [pc, #480]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e021      	b.n	8002608 <HAL_RCC_OscConfig+0x19c>
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x184>
 80025d6:	4b71      	ldr	r3, [pc, #452]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a70      	ldr	r2, [pc, #448]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6e      	ldr	r3, [pc, #440]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6d      	ldr	r2, [pc, #436]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x19c>
 80025f0:	4b6a      	ldr	r3, [pc, #424]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002608:	4b64      	ldr	r3, [pc, #400]	; (800279c <HAL_RCC_OscConfig+0x330>)
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f023 020f 	bic.w	r2, r3, #15
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	495f      	ldr	r1, [pc, #380]	; (800279c <HAL_RCC_OscConfig+0x330>)
 800261e:	4313      	orrs	r3, r2
 8002620:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d059      	beq.n	80026e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fb49 	bl	8000cc8 <HAL_GetTick>
 8002636:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe fb44 	bl	8000cc8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b64      	cmp	r3, #100	; 0x64
 800264a:	d902      	bls.n	8002652 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	f000 bf43 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002656:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002666:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x218>
 800267e:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e015      	b.n	80026b0 <HAL_RCC_OscConfig+0x244>
 8002684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002688:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80026ac:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x330>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80026b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80026bc:	fa92 f2a2 	rbit	r2, r2
 80026c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80026c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ab      	beq.n	800263c <HAL_RCC_OscConfig+0x1d0>
 80026e4:	e05d      	b.n	80027a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe faef 	bl	8000cc8 <HAL_GetTick>
 80026ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe faea 	bl	8000cc8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d902      	bls.n	8002706 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	f000 bee9 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800271a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x2cc>
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x2f8>
 8002738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800274c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002750:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002754:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002768:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800276c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002778:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ab      	bne.n	80026f0 <HAL_RCC_OscConfig+0x284>
 8002798:	e003      	b.n	80027a2 <HAL_RCC_OscConfig+0x336>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 817d 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027b8:	4ba6      	ldr	r3, [pc, #664]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027c4:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d172      	bne.n	80028b6 <HAL_RCC_OscConfig+0x44a>
 80027d0:	4ba0      	ldr	r3, [pc, #640]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d16c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x44a>
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80027ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x3a0>
 8002806:	4b93      	ldr	r3, [pc, #588]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e013      	b.n	8002834 <HAL_RCC_OscConfig+0x3c8>
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002830:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2202      	movs	r2, #2
 8002836:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800283a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002846:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCC_OscConfig+0x410>
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d002      	beq.n	800287c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f000 be2e 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	21f8      	movs	r1, #248	; 0xf8
 8002892:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800289a:	fa91 f1a1 	rbit	r1, r1
 800289e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80028a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80028a6:	fab1 f181 	clz	r1, r1
 80028aa:	b2c9      	uxtb	r1, r1
 80028ac:	408b      	lsls	r3, r1
 80028ae:	4969      	ldr	r1, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b4:	e0fd      	b.n	8002ab2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8088 	beq.w	80029d8 <HAL_RCC_OscConfig+0x56c>
 80028c8:	2301      	movs	r3, #1
 80028ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80028da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	2301      	movs	r3, #1
 80028f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe f9e8 	bl	8000cc8 <HAL_GetTick>
 80028f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe f9e3 	bl	8000cc8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	f000 bde2 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002926:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x4d8>
 800293e:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0x500>
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800295c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2202      	movs	r2, #2
 800296e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002972:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800297e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0af      	beq.n	80028fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	21f8      	movs	r1, #248	; 0xf8
 80029b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029bc:	fa91 f1a1 	rbit	r1, r1
 80029c0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80029c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80029c8:	fab1 f181 	clz	r1, r1
 80029cc:	b2c9      	uxtb	r1, r1
 80029ce:	408b      	lsls	r3, r1
 80029d0:	4920      	ldr	r1, [pc, #128]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
 80029d6:	e06c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x646>
 80029d8:	2301      	movs	r3, #1
 80029da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80029ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	461a      	mov	r2, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe f960 	bl	8000cc8 <HAL_GetTick>
 8002a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7fe f95b 	bl	8000cc8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f000 bd5a 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5ec>
 8002a4e:	4b01      	ldr	r3, [pc, #4]	; (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e015      	b.n	8002a80 <HAL_RCC_OscConfig+0x614>
 8002a54:	40021000 	.word	0x40021000
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a7c:	4bc8      	ldr	r3, [pc, #800]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ad      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8110 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d079      	beq.n	8002bcc <HAL_RCC_OscConfig+0x760>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4bab      	ldr	r3, [pc, #684]	; (8002da4 <HAL_RCC_OscConfig+0x938>)
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2301      	movs	r3, #1
 8002b00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe f8e1 	bl	8000cc8 <HAL_GetTick>
 8002b06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe f8dc 	bl	8000cc8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f000 bcdb 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7c:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b88:	2102      	movs	r1, #2
 8002b8a:	6019      	str	r1, [r3, #0]
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	fa93 f1a3 	rbit	r1, r3
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ba2:	6019      	str	r1, [r3, #0]
  return result;
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0a0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x6a0>
 8002bca:	e08d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x87c>
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bee:	601a      	str	r2, [r3, #0]
  return result;
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bf8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x938>)
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe f85b 	bl	8000cc8 <HAL_GetTick>
 8002c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fe f856 	bl	8000cc8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d902      	bls.n	8002c2e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f000 bc55 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c36:	2202      	movs	r2, #2
 8002c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c7e:	2202      	movs	r2, #2
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	6019      	str	r1, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f1a3 	rbit	r1, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cc0:	6019      	str	r1, [r3, #0]
  return result;
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d197      	bne.n	8002c18 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 81a1 	beq.w	8003040 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d04:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	61d3      	str	r3, [r2, #28]
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002d36:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fd ffb7 	bl	8000cc8 <HAL_GetTick>
 8002d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	e009      	b.n	8002d74 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fd ffb2 	bl	8000cc8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e3b1      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ef      	beq.n	8002d60 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10d      	bne.n	8002dac <HAL_RCC_OscConfig+0x940>
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4a02      	ldr	r2, [pc, #8]	; (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6213      	str	r3, [r2, #32]
 8002d9c:	e03c      	b.n	8002e18 <HAL_RCC_OscConfig+0x9ac>
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	10908120 	.word	0x10908120
 8002da8:	40007000 	.word	0x40007000
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x96a>
 8002dbc:	4bc1      	ldr	r3, [pc, #772]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4ac0      	ldr	r2, [pc, #768]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	4bbe      	ldr	r3, [pc, #760]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4abd      	ldr	r2, [pc, #756]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	e020      	b.n	8002e18 <HAL_RCC_OscConfig+0x9ac>
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x994>
 8002de6:	4bb7      	ldr	r3, [pc, #732]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4ab6      	ldr	r2, [pc, #728]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	4bb4      	ldr	r3, [pc, #720]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4ab3      	ldr	r2, [pc, #716]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6213      	str	r3, [r2, #32]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0x9ac>
 8002e00:	4bb0      	ldr	r3, [pc, #704]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4aaf      	ldr	r2, [pc, #700]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	4bad      	ldr	r3, [pc, #692]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4aac      	ldr	r2, [pc, #688]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e12:	f023 0304 	bic.w	r3, r3, #4
 8002e16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8081 	beq.w	8002f2c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fd ff4d 	bl	8000cc8 <HAL_GetTick>
 8002e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fd ff48 	bl	8000cc8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e345      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fa93 f2a3 	rbit	r2, r3
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e78:	2202      	movs	r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e92:	601a      	str	r2, [r3, #0]
  return result;
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xa4c>
 8002eb2:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	e013      	b.n	8002ee0 <HAL_RCC_OscConfig+0xa74>
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ee8:	2102      	movs	r1, #2
 8002eea:	6011      	str	r1, [r2, #0]
 8002eec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	fa92 f1a2 	rbit	r1, r2
 8002efa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002efe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f02:	6011      	str	r1, [r2, #0]
  return result;
 8002f04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f08:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d084      	beq.n	8002e34 <HAL_RCC_OscConfig+0x9c8>
 8002f2a:	e07f      	b.n	800302c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd fecc 	bl	8000cc8 <HAL_GetTick>
 8002f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fec7 	bl	8000cc8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e2c4      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f94:	601a      	str	r2, [r3, #0]
  return result;
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_OscConfig+0xb4e>
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	e013      	b.n	8002fe2 <HAL_RCC_OscConfig+0xb76>
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002fea:	2102      	movs	r1, #2
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fa92 f1a2 	rbit	r1, r2
 8002ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003000:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003004:	6011      	str	r1, [r2, #0]
  return result;
 8003006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800300a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d184      	bne.n	8002f36 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800302c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8242 	beq.w	80034d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	f000 8213 	beq.w	8003486 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 8162 	bne.w	8003336 <HAL_RCC_OscConfig+0xeca>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800307a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fe06 	bl	8000cc8 <HAL_GetTick>
 80030bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	e00c      	b.n	80030dc <HAL_RCC_OscConfig+0xc70>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd fdfe 	bl	8000cc8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1fd      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003100:	601a      	str	r2, [r3, #0]
  return result;
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800310a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d102      	bne.n	8003126 <HAL_RCC_OscConfig+0xcba>
 8003120:	4bb0      	ldr	r3, [pc, #704]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	e027      	b.n	8003176 <HAL_RCC_OscConfig+0xd0a>
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800312e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800317a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800317e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003188:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	fa92 f1a2 	rbit	r1, r2
 8003192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003196:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800319a:	6011      	str	r1, [r2, #0]
  return result;
 800319c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	fab2 f282 	clz	r2, r2
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f042 0220 	orr.w	r2, r2, #32
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f002 021f 	and.w	r2, r2, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f202 	lsl.w	r2, r1, r2
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d182      	bne.n	80030c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c2:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	497f      	ldr	r1, [pc, #508]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80031f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800320e:	601a      	str	r2, [r3, #0]
  return result;
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003218:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2301      	movs	r3, #1
 800322e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fd fd4a 	bl	8000cc8 <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	e009      	b.n	800324e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd fd45 	bl	8000cc8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e144      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003272:	601a      	str	r2, [r3, #0]
  return result;
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800327c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_RCC_OscConfig+0xe2c>
 8003292:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e027      	b.n	80032e8 <HAL_RCC_OscConfig+0xe7c>
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80032c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f2a3 	rbit	r2, r3
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80032f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fa92 f1a2 	rbit	r1, r2
 8003304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003308:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800330c:	6011      	str	r1, [r2, #0]
  return result;
 800330e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003312:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d082      	beq.n	800323a <HAL_RCC_OscConfig+0xdce>
 8003334:	e0cf      	b.n	80034d6 <HAL_RCC_OscConfig+0x106a>
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800333e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800335a:	601a      	str	r2, [r3, #0]
  return result;
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003364:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd fca4 	bl	8000cc8 <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	e009      	b.n	800339a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003386:	f7fd fc9f 	bl	8000cc8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e09e      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80033a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80033be:	601a      	str	r2, [r3, #0]
  return result;
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80033c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d104      	bne.n	80033e8 <HAL_RCC_OscConfig+0xf7c>
 80033de:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	e029      	b.n	8003438 <HAL_RCC_OscConfig+0xfcc>
 80033e4:	40021000 	.word	0x40021000
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80033f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCC_OscConfig+0x1078>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003440:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800344a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	fa92 f1a2 	rbit	r1, r2
 8003454:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003458:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800345c:	6011      	str	r1, [r2, #0]
  return result;
 800345e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003462:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	fab2 f282 	clz	r2, r2
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f042 0220 	orr.w	r2, r2, #32
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f002 021f 	and.w	r2, r2, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d180      	bne.n	8003386 <HAL_RCC_OscConfig+0xf1a>
 8003484:	e027      	b.n	80034d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e01e      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_OscConfig+0x1078>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80034a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80034ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80034be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b09e      	sub	sp, #120	; 0x78
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e162      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b90      	ldr	r3, [pc, #576]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 0207 	bic.w	r2, r3, #7
 8003516:	498b      	ldr	r1, [pc, #556]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b89      	ldr	r3, [pc, #548]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e14a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b82      	ldr	r3, [pc, #520]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	497f      	ldr	r1, [pc, #508]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80dc 	beq.w	8003714 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d13c      	bne.n	80035de <HAL_RCC_ClockConfig+0xf6>
 8003564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003568:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_RCC_ClockConfig+0xa6>
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e00f      	b.n	80035ae <HAL_RCC_ClockConfig+0xc6>
 800358e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003592:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	667b      	str	r3, [r7, #100]	; 0x64
 800359c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a0:	663b      	str	r3, [r7, #96]	; 0x60
 80035a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80035b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80035bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d17b      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0f3      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d13c      	bne.n	8003660 <HAL_RCC_ClockConfig+0x178>
 80035e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_RCC_ClockConfig+0x128>
 800360a:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	e00f      	b.n	8003630 <HAL_RCC_ClockConfig+0x148>
 8003610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003614:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	647b      	str	r3, [r7, #68]	; 0x44
 800361e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
 8003624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800362c:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003634:	63ba      	str	r2, [r7, #56]	; 0x38
 8003636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003638:	fa92 f2a2 	rbit	r2, r2
 800363c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800363e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0220 	orr.w	r2, r2, #32
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d13a      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b2      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
 8003660:	2302      	movs	r3, #2
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_RCC_ClockConfig+0x1a0>
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e00d      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1bc>
 8003688:	2302      	movs	r3, #2
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
 8003694:	2302      	movs	r3, #2
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2202      	movs	r2, #2
 80036a6:	61ba      	str	r2, [r7, #24]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	fa92 f2a2 	rbit	r2, r2
 80036ae:	617a      	str	r2, [r7, #20]
  return result;
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e079      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	491a      	ldr	r1, [pc, #104]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fd faf0 	bl	8000cc8 <HAL_GetTick>
 80036e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd faec 	bl	8000cc8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e061      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_ClockConfig+0x260>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d214      	bcs.n	800374c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0207 	bic.w	r2, r3, #7
 800372a:	4906      	ldr	r1, [pc, #24]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b04      	ldr	r3, [pc, #16]	; (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e040      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	491a      	ldr	r1, [pc, #104]	; (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4912      	ldr	r1, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800378a:	f000 f829 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800378e:	4601      	mov	r1, r0
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003798:	22f0      	movs	r2, #240	; 0xf0
 800379a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	60fa      	str	r2, [r7, #12]
  return result;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	40d3      	lsrs	r3, r2
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x2ec>)
 80037b0:	5cd3      	ldrb	r3, [r2, r3]
 80037b2:	fa21 f303 	lsr.w	r3, r1, r3
 80037b6:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <HAL_RCC_ClockConfig+0x2f0>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCC_ClockConfig+0x2f4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fa3e 	bl	8000c40 <HAL_InitTick>
  
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3778      	adds	r7, #120	; 0x78
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08004ae8 	.word	0x08004ae8
 80037d8:	20000004 	.word	0x20000004
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b08b      	sub	sp, #44	; 0x2c
 80037e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x30>
 800380a:	2b08      	cmp	r3, #8
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x36>
 800380e:	e03c      	b.n	800388a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003812:	623b      	str	r3, [r7, #32]
      break;
 8003814:	e03c      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800381c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003820:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	fa92 f2a2 	rbit	r2, r2
 8003828:	607a      	str	r2, [r7, #4]
  return result;
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	40d3      	lsrs	r3, r2
 8003834:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	220f      	movs	r2, #15
 8003844:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	fa92 f2a2 	rbit	r2, r2
 800384c:	60fa      	str	r2, [r7, #12]
  return result;
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	fab2 f282 	clz	r2, r2
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	40d3      	lsrs	r3, r2
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003868:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e004      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	623b      	str	r3, [r7, #32]
      break;
 8003888:	e002      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800388c:	623b      	str	r3, [r7, #32]
      break;
 800388e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003890:	6a3b      	ldr	r3, [r7, #32]
}
 8003892:	4618      	mov	r0, r3
 8003894:	372c      	adds	r7, #44	; 0x2c
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	007a1200 	.word	0x007a1200
 80038a8:	08004b00 	.word	0x08004b00
 80038ac:	08004b10 	.word	0x08004b10
 80038b0:	003d0900 	.word	0x003d0900

080038b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000004 	.word	0x20000004

080038cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038d2:	f7ff ffef 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038d6:	4601      	mov	r1, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	fa92 f2a2 	rbit	r2, r2
 80038ec:	603a      	str	r2, [r7, #0]
  return result;
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	fab2 f282 	clz	r2, r2
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	40d3      	lsrs	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_RCC_GetPCLK1Freq+0x40>)
 80038fa:	5cd3      	ldrb	r3, [r2, r3]
 80038fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	08004af8 	.word	0x08004af8

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003916:	f7ff ffcd 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 800391a:	4601      	mov	r1, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003924:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003928:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	fa92 f2a2 	rbit	r2, r2
 8003930:	603a      	str	r2, [r7, #0]
  return result;
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	fab2 f282 	clz	r2, r2
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	40d3      	lsrs	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x40>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	08004af8 	.word	0x08004af8

08003954 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b092      	sub	sp, #72	; 0x48
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80d4 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003978:	4b4e      	ldr	r3, [pc, #312]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10e      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4a4a      	ldr	r2, [pc, #296]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	61d3      	str	r3, [r2, #28]
 8003990:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a41      	ldr	r2, [pc, #260]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd f985 	bl	8000cc8 <HAL_GetTick>
 80039be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd f981 	bl	8000cc8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b64      	cmp	r3, #100	; 0x64
 80039ce:	d901      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e14b      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8084 	beq.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d07c      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd f931 	bl	8000cc8 <HAL_GetTick>
 8003a66:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fd f92d 	bl	8000cc8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0f5      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003a80:	2302      	movs	r3, #2
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	61fb      	str	r3, [r7, #28]
  return result;
 8003a98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d108      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003aae:	4b01      	ldr	r3, [pc, #4]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	e00d      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	10908100 	.word	0x10908100
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	613a      	str	r2, [r7, #16]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	fa92 f2a2 	rbit	r2, r2
 8003ada:	60fa      	str	r2, [r7, #12]
  return result;
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	fab2 f282 	clz	r2, r2
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f002 021f 	and.w	r2, r2, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0b7      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003afa:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	495b      	ldr	r1, [pc, #364]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2c:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f023 0203 	bic.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	494e      	ldr	r1, [pc, #312]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f023 0210 	bic.w	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4947      	ldr	r1, [pc, #284]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b68:	4b42      	ldr	r3, [pc, #264]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	493f      	ldr	r1, [pc, #252]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b86:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f023 0220 	bic.w	r2, r3, #32
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	4938      	ldr	r1, [pc, #224]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba4:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	4930      	ldr	r1, [pc, #192]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4929      	ldr	r1, [pc, #164]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4921      	ldr	r1, [pc, #132]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	491a      	ldr	r1, [pc, #104]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c1c:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	4912      	ldr	r1, [pc, #72]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	490b      	ldr	r1, [pc, #44]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3748      	adds	r7, #72	; 0x48
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40021000 	.word	0x40021000

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fc feac 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 f94c 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e033      	b.n	8003da8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_TIM_Base_Start+0x8c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_TIM_Base_Start+0x3e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIM_Base_Start+0x3e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <HAL_TIM_Base_Start+0x90>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d115      	bne.n	8003d92 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_TIM_Base_Start+0x94>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d015      	beq.n	8003da4 <HAL_TIM_Base_Start+0x7c>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7e:	d011      	beq.n	8003da4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d90:	e008      	b.n	8003da4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e000      	b.n	8003da6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	00010007 	.word	0x00010007

08003dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_ConfigClockSource+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0b6      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x18a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d03e      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xd8>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	f200 8087 	bhi.w	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_TIM_ConfigClockSource+0x176>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d87f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d01a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xaa>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d87b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d050      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x11e>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d877      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d03c      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xfe>
 8003e44:	2b50      	cmp	r3, #80	; 0x50
 8003e46:	d873      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d058      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x13e>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d86f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e50:	2b30      	cmp	r3, #48	; 0x30
 8003e52:	d064      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d86b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d060      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d867      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d05a      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e68:	e062      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f000 f953 	bl	8004124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
      break;
 8003e96:	e04f      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 f93c 	bl	8004124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e03c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 f8b0 	bl	8004030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2150      	movs	r1, #80	; 0x50
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f909 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003edc:	e02c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 f8cf 	bl	800408e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2160      	movs	r1, #96	; 0x60
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f8f9 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003efc:	e01c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f890 	bl	8004030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f8e9 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 f8e0 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a2e      	ldr	r2, [pc, #184]	; (8004020 <TIM_Base_SetConfig+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0x20>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d108      	bne.n	8003f86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a25      	ldr	r2, [pc, #148]	; (8004020 <TIM_Base_SetConfig+0xcc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_Base_SetConfig+0x5a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d00b      	beq.n	8003fae <TIM_Base_SetConfig+0x5a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <TIM_Base_SetConfig+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0x5a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_Base_SetConfig+0xd4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0x5a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	; (800402c <TIM_Base_SetConfig+0xd8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d108      	bne.n	8003fc0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <TIM_Base_SetConfig+0xcc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00b      	beq.n	8004004 <TIM_Base_SetConfig+0xb0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <TIM_Base_SetConfig+0xd0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d007      	beq.n	8004004 <TIM_Base_SetConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_Base_SetConfig+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0xb0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	; (800402c <TIM_Base_SetConfig+0xd8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800

08004030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 030a 	bic.w	r3, r3, #10
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0210 	bic.w	r2, r3, #16
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	f043 0307 	orr.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	021a      	lsls	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	431a      	orrs	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e04f      	b.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a21      	ldr	r2, [pc, #132]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d004      	beq.n	80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10c      	bne.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40014000 	.word	0x40014000

08004230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e040      	b.n	80042c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc fbf0 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8b6 	bl	80043e0 <UART_SetConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9e0 	bl	800464c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800429a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa67 	bl	8004790 <UART_CheckIdleState>
 80042c2:	4603      	mov	r3, r0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d178      	bne.n	80043d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Transmit+0x24>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e071      	b.n	80043d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2221      	movs	r2, #33	; 0x21
 8004300:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004302:	f7fc fce1 	bl	8000cc8 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004320:	d108      	bne.n	8004334 <HAL_UART_Transmit+0x68>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	e003      	b.n	800433c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800433c:	e030      	b.n	80043a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fac9 	bl	80048e0 <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e03c      	b.n	80043d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	b292      	uxth	r2, r2
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	3302      	adds	r3, #2
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e008      	b.n	800438e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	781a      	ldrb	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b292      	uxth	r2, r2
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	3301      	adds	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1c8      	bne.n	800433e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2200      	movs	r2, #0
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa92 	bl	80048e0 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e005      	b.n	80043d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b8a      	ldr	r3, [pc, #552]	; (8004634 <UART_SetConfig+0x254>)
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	6979      	ldr	r1, [r7, #20]
 8004414:	430b      	orrs	r3, r1
 8004416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a78      	ldr	r2, [pc, #480]	; (8004638 <UART_SetConfig+0x258>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d120      	bne.n	800449e <UART_SetConfig+0xbe>
 800445c:	4b77      	ldr	r3, [pc, #476]	; (800463c <UART_SetConfig+0x25c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d817      	bhi.n	8004498 <UART_SetConfig+0xb8>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x90>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004493 	.word	0x08004493
 800447c:	08004487 	.word	0x08004487
 8004480:	2300      	movs	r3, #0
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e01d      	b.n	80044c2 <UART_SetConfig+0xe2>
 8004486:	2302      	movs	r3, #2
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e01a      	b.n	80044c2 <UART_SetConfig+0xe2>
 800448c:	2304      	movs	r3, #4
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e017      	b.n	80044c2 <UART_SetConfig+0xe2>
 8004492:	2308      	movs	r3, #8
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e014      	b.n	80044c2 <UART_SetConfig+0xe2>
 8004498:	2310      	movs	r3, #16
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e011      	b.n	80044c2 <UART_SetConfig+0xe2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a67      	ldr	r2, [pc, #412]	; (8004640 <UART_SetConfig+0x260>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d102      	bne.n	80044ae <UART_SetConfig+0xce>
 80044a8:	2300      	movs	r3, #0
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	e009      	b.n	80044c2 <UART_SetConfig+0xe2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a64      	ldr	r2, [pc, #400]	; (8004644 <UART_SetConfig+0x264>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d102      	bne.n	80044be <UART_SetConfig+0xde>
 80044b8:	2300      	movs	r3, #0
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e001      	b.n	80044c2 <UART_SetConfig+0xe2>
 80044be:	2310      	movs	r3, #16
 80044c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ca:	d15a      	bne.n	8004582 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d827      	bhi.n	8004522 <UART_SetConfig+0x142>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0xf8>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	08004505 	.word	0x08004505
 80044e0:	0800450d 	.word	0x0800450d
 80044e4:	08004523 	.word	0x08004523
 80044e8:	08004513 	.word	0x08004513
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004523 	.word	0x08004523
 80044f4:	08004523 	.word	0x08004523
 80044f8:	0800451b 	.word	0x0800451b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7ff f9e6 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 8004500:	61b8      	str	r0, [r7, #24]
        break;
 8004502:	e013      	b.n	800452c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004504:	f7ff fa04 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8004508:	61b8      	str	r0, [r7, #24]
        break;
 800450a:	e00f      	b.n	800452c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800450c:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <UART_SetConfig+0x268>)
 800450e:	61bb      	str	r3, [r7, #24]
        break;
 8004510:	e00c      	b.n	800452c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004512:	f7ff f965 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8004516:	61b8      	str	r0, [r7, #24]
        break;
 8004518:	e008      	b.n	800452c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	61bb      	str	r3, [r7, #24]
        break;
 8004520:	e004      	b.n	800452c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77bb      	strb	r3, [r7, #30]
        break;
 800452a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d074      	beq.n	800461c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	005a      	lsls	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	d916      	bls.n	800457c <UART_SetConfig+0x19c>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d212      	bcs.n	800457c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f023 030f 	bic.w	r3, r3, #15
 800455e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	b29b      	uxth	r3, r3
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	b29a      	uxth	r2, r3
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	4313      	orrs	r3, r2
 8004570:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	89fa      	ldrh	r2, [r7, #14]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	e04f      	b.n	800461c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	77bb      	strb	r3, [r7, #30]
 8004580:	e04c      	b.n	800461c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d828      	bhi.n	80045da <UART_SetConfig+0x1fa>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x1b0>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7ff f98a 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 80045b8:	61b8      	str	r0, [r7, #24]
        break;
 80045ba:	e013      	b.n	80045e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7ff f9a8 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 80045c0:	61b8      	str	r0, [r7, #24]
        break;
 80045c2:	e00f      	b.n	80045e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b20      	ldr	r3, [pc, #128]	; (8004648 <UART_SetConfig+0x268>)
 80045c6:	61bb      	str	r3, [r7, #24]
        break;
 80045c8:	e00c      	b.n	80045e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7ff f909 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80045ce:	61b8      	str	r0, [r7, #24]
        break;
 80045d0:	e008      	b.n	80045e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d6:	61bb      	str	r3, [r7, #24]
        break;
 80045d8:	e004      	b.n	80045e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	77bb      	strb	r3, [r7, #30]
        break;
 80045e2:	bf00      	nop
    }

    if (pclk != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	085a      	lsrs	r2, r3, #1
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	441a      	add	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d909      	bls.n	8004618 <UART_SetConfig+0x238>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460a:	d205      	bcs.n	8004618 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	e001      	b.n	800461c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004628:	7fbb      	ldrb	r3, [r7, #30]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	efff69f3 	.word	0xefff69f3
 8004638:	40013800 	.word	0x40013800
 800463c:	40021000 	.word	0x40021000
 8004640:	40004400 	.word	0x40004400
 8004644:	40004800 	.word	0x40004800
 8004648:	007a1200 	.word	0x007a1200

0800464c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474a:	d10a      	bne.n	8004762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b098      	sub	sp, #96	; 0x60
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a0:	f7fc fa92 	bl	8000cc8 <HAL_GetTick>
 80047a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d12e      	bne.n	8004812 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f88c 	bl	80048e0 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d021      	beq.n	8004812 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e2:	653b      	str	r3, [r7, #80]	; 0x50
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ec:	647b      	str	r3, [r7, #68]	; 0x44
 80047ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e6      	bne.n	80047ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e062      	b.n	80048d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d149      	bne.n	80048b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f856 	bl	80048e0 <UART_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d03c      	beq.n	80048b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	623b      	str	r3, [r7, #32]
   return(result);
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
 800485a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e6      	bne.n	800483a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	60fb      	str	r3, [r7, #12]
   return(result);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	64bb      	str	r3, [r7, #72]	; 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488c:	61fa      	str	r2, [r7, #28]
 800488e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	69b9      	ldr	r1, [r7, #24]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	617b      	str	r3, [r7, #20]
   return(result);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e5      	bne.n	800486c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e011      	b.n	80048d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3758      	adds	r7, #88	; 0x58
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f0:	e049      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d045      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fc f9e5 	bl	8000cc8 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <UART_WaitOnFlagUntilTimeout+0x30>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e048      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d031      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d110      	bne.n	8004952 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2208      	movs	r2, #8
 8004936:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f838 	bl	80049ae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2208      	movs	r2, #8
 8004942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e029      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004960:	d111      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800496a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f81e 	bl	80049ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d0a6      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b095      	sub	sp, #84	; 0x54
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d4:	643b      	str	r3, [r7, #64]	; 0x40
 80049d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d118      	bne.n	8004a56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 0310 	bic.w	r3, r3, #16
 8004a38:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e6      	bne.n	8004a24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a6a:	bf00      	nop
 8004a6c:	3754      	adds	r7, #84	; 0x54
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4d0d      	ldr	r5, [pc, #52]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2600      	movs	r6, #0
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4d0b      	ldr	r5, [pc, #44]	; (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 f820 	bl	8004ad0 <_init>
 8004a90:	1b64      	subs	r4, r4, r5
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2600      	movs	r6, #0
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08004b20 	.word	0x08004b20
 8004ab4:	08004b20 	.word	0x08004b20
 8004ab8:	08004b20 	.word	0x08004b20
 8004abc:	08004b24 	.word	0x08004b24

08004ac0 <memset>:
 8004ac0:	4402      	add	r2, r0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d100      	bne.n	8004aca <memset+0xa>
 8004ac8:	4770      	bx	lr
 8004aca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ace:	e7f9      	b.n	8004ac4 <memset+0x4>

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
